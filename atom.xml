<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon的博客</title>
  <icon>https://www.gravatar.com/avatar/9d151238658e9fa1d07c5b6b41f6fcbc</icon>
  <subtitle>每多学一点知识，就少写一行代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-18T12:55:15.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李晓</name>
    <email>xiao.liunit@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nodejs中编写异步的单元测试代码</title>
    <link href="http://yoursite.com/2018/12/18/Nodejs%E4%B8%AD%E7%BC%96%E5%86%99%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/12/18/Nodejs中编写异步的单元测试代码/</id>
    <published>2018-12-18T12:54:36.000Z</published>
    <updated>2018-12-18T12:55:15.514Z</updated>
    
    <content type="html"><![CDATA[<p>在Nodejs的开发过程中，异步这个话题是无论如何都躲不过去的，关于异步的文章已经有过许多篇了，我也不打算写在开发Web应用的过程中，该如何在Nodejs中处理异步代码。在前些日子，我跟单元测试覆盖率这个指标杠上了，因为自己在写一个Nodejs的工程，我希望这个工程的测试代码量不要太少，目标是100%的行覆盖率，所以最近写了许多的单元测试代码。使用的测试框架是Mocha，断言库是Chai，那么今天我们就来聊聊在单元测试中，处理异步代码的各种姿势。</p><p>&lt;!--more--&gt;</p><h2>处理promise</h2><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">'../app/utils/async-db'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; should &#125; = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line">should();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试数据库连接的正确状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">describe(<span class="string">'mysql connect success state'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should return an array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">'SELECT * FROM `Users`'</span>;</span><br><span class="line">    query(sql)</span><br><span class="line">      .then(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">        rows.should.be.an(<span class="string">'array'</span>);</span><br><span class="line">        done();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        done(err);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>先来看看今天的例子，这段代码就是测试数据库连接状态的库，在断言库中我偏向于使用should类型的，因为更加的语义化，更符合TDD的阅读习惯。而这段代码看似没有问题，但是运行起来会报错：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure <span class="string">"done()"</span> is called; <span class="keyword">if</span> returning a Promise, ensure it resolves.</span><br></pre></td></tr></table></figure></p><p>为什么呢，原因是在第二行、第四行。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; should &#125; = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line">...</span><br><span class="line">should();</span><br></pre></td></tr></table></figure></p><p>在这样引用了should之后，是无法像刚才代码中那样使用should的，为什么我会写出这样的语法呢？我承认我当时偷懒随便看了篇博客就照猫画虎了，以后一定要跟着官方文档来！！！所以我们这里先纠正错误，正确的代码如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">'../app/utils/async-db'</span>);</span><br><span class="line"><span class="keyword">const</span> should = <span class="built_in">require</span>(<span class="string">'chai'</span>).should();</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试数据库连接的正确状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">describe(<span class="string">'mysql connect success state'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should return an array did not have done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">'SELECT * FROM `Users`'</span>;</span><br><span class="line">    query(sql)</span><br><span class="line">      .then(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">        rows.should.be.an(<span class="string">'array'</span>);</span><br><span class="line">        done();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        done(err);</span><br><span class="line">        <span class="comment">// throw err;</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这样，在promise中，在then里直接写断言，之后再跟上done，表示测试完成，就可以成功的完成异步测试，这种方式是done回调的方式。</p><p>而还有直接返回promise的方式，写法如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试数据库连接的正确状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">describe(<span class="string">'mysql connect success state'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should return an array did not have done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">'SELECT * FROM `Users`'</span>;</span><br><span class="line">    <span class="keyword">return</span> query(sql)</span><br><span class="line">      .then(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">        rows.should.be.an(<span class="string">'array'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>直接说一下写法的区别吧，在第二行代码的it块内，回调的function中不要再加入done回调的，不然测试程序会一直等待你的done回调，当超时之后就会报错了。而去除done回调之后，直接写返回结果就好了，如果catch到了error，那么直接会被抛出，测试失败。</p><p>这两种方法写完，应该还有很多同学觉得这样写非常啰嗦吧，那么我们来看一个chai断言库的中间件，这个中间件可以大大简化promise相关的断言，这个库就是<code>chai-as-promised</code>。这个库中提供了一个最重要的Api就是<code>should.eventually</code>，直接按字面意思去理解这个链式api吧，意味着它会等待promise的最终执行结果，来测试断言。还是刚才的例子，用这个小插件改写完之后是这样的。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">'../app/utils/async-db'</span>);</span><br><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line"><span class="keyword">const</span> chaiAsPromised = <span class="built_in">require</span>(<span class="string">'chai-as-promised'</span>);</span><br><span class="line">chai.use(chaiAsPromised);</span><br><span class="line">chai.should();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * chai-as-promised库的简单使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">describe(<span class="string">'Mysql connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 记得使用chai-as-promised的时候 这里的function不要加 done 参数</span></span><br><span class="line">  it(<span class="string">'should return an array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">'SELECT * FROM `Users`'</span>;</span><br><span class="line">    <span class="keyword">return</span> query(sql).should.eventually.be.an(<span class="string">'array'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>瞬间测试的代码块内只剩下两行代码了，是不是看着分外的爽？稍微学习一下这样的用法，相信异步的单元测试，从此以后对同学们来说就是小菜一碟咯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Nodejs的开发过程中，异步这个话题是无论如何都躲不过去的，关于异步的文章已经有过许多篇了，我也不打算写在开发Web应用的过程中，该如何在Nodejs中处理异步代码。在前些日子，我跟单元测试覆盖率这个指标杠上了，因为自己在写一个Nodejs的工程，我希望这个工程的测试代
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript中的浮点数</title>
    <link href="http://yoursite.com/2018/11/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>http://yoursite.com/2018/11/30/理解JavaScript中的浮点数/</id>
    <published>2018-11-30T13:17:07.000Z</published>
    <updated>2018-11-30T13:21:09.703Z</updated>
    
    <content type="html"><![CDATA[<p>如果你除了JavaScript外还有接触过其他的编程语言，那么你应该会发现在别的编程语言中，数值型的数据类型有好几种，例如Objective-C中的int，double， float，long等，而在JavaScript中就有一个特殊的点，它只有Number这一种数值型的数据类型。因为这一特殊性，Number也是ECMAScript中需要特别关注的一个数据类型了。</p><p>而一句话来概括JavaScript中的Number类型就是，这是由IEEE754格式来表示整数和浮点数值(双精度数值)。</p><p>双精度浮点数值能准确的表示高达53位精度的整数，从-2^53到2^53这个区间的所有整数都是有效的双精度浮点数，因此，尽管JavaScript中缺少明显的整数类型，但是依然可以进行整数运算。</p><p>&lt;!--more--&gt;</p><p>所谓浮点数值，就是该树脂中必须包含一个小数点，并且小数点后面必须至少有一位数字。虽然个位数点前面可以没有整数，但是一般的编程过程中不推荐这种写法。</p><p>大多数的算术运算符都可以使用整数、实数或两者的组合进行计算。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> * <span class="number">0.19</span> <span class="comment">// 0.19</span></span><br><span class="line"><span class="number">-99</span> + <span class="number">100</span>； <span class="comment">// 1</span></span><br><span class="line"><span class="number">21</span><span class="number">-12.3</span>; <span class="comment">//  8.7</span></span><br><span class="line"><span class="number">2.5</span> / <span class="number">5</span>; <span class="comment">// 0.5</span></span><br><span class="line"><span class="number">21</span> % <span class="number">8</span>; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>由于保存浮点数值需要的内存空间是保存整数值的两倍，因此ECMAScript会不失时机地将浮点数值转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样的，如果浮点数值本身表示的就是一个小数（1.0），那么该数值也会被转换为整数。</p><p>关于浮点数最后的警示是，我们应该时刻对它们保持警惕，浮点数看似跟其他语言的浮点数并无两样，但是它们是出了名的不精确。甚至一些看起来最简单的算术运算都会产生不正确的结果。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure></p><p>这里使用的必须是这个经典的例子，也是被当做面试题问过无数遍的问题。尽管64位的精度已经相当高了，但是双精度浮点数也只能表示一组有限的数字，而不能表示所有的实数集。浮点运算只能产生近似的结果，四舍五入到最接近的可表示的实数。</p><p>关于浮点数会产生舍入误差的问题，有一点需要明确：这是使用基于IEEE754数值的浮点计算的通病，ECMAScript并非独此一家，其他使用相同数值格式的语言也存在这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你除了JavaScript外还有接触过其他的编程语言，那么你应该会发现在别的编程语言中，数值型的数据类型有好几种，例如Objective-C中的int，double， float，long等，而在JavaScript中就有一个特殊的点，它只有Number这一种数值型的数
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解prototype、getPrototypeOf和 _proto _之间的不同</title>
    <link href="http://yoursite.com/2018/11/21/%E7%90%86%E8%A7%A3prototype%E3%80%81getPrototypeOf%E5%92%8C-proto-%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
    <id>http://yoursite.com/2018/11/21/理解prototype、getPrototypeOf和-proto-之间的不同/</id>
    <published>2018-11-21T08:26:31.000Z</published>
    <updated>2018-11-30T13:23:00.799Z</updated>
    
    <content type="html"><![CDATA[<p>在学习JavaScript的过程中，原型是如何也绕不过去的一个知识点。虽然在现在ES6已经非常普及的现在，许多js的程序员都已经不再用原型的知识点来编写代码了，但是充分的理解原型也是很有必要的，尤其是在阅读他人优秀的js代码时，理解原型能帮助我们更好的理解早期代码。而原型包括三个访问器，这三个访问器有时功能重叠，所以准确的理解并区分他们还是很有必要的。</p><p>&lt;!--more--&gt;</p><p>这三个访问器就是<code>prototype</code>、<code>getPrototypeOf</code>和<code>__proto__</code>，从名字上可见这三个访问器都是对prototype这个单词做了一些变化，生成这样的属性方法名。为了测试这三个方法的输出，我们先来模拟创建一个存储用户数据User的类。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, passwordHash</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.passwordHash = passwordHash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'[User '</span> + <span class="keyword">this</span>.name + <span class="string">']'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.checkPassword = <span class="function"><span class="keyword">function</span>(<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hash(password) === <span class="keyword">this</span>.passwordHash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们创建的这个User类的构造函数，接收两个参数，一个是用户名name，一个是密码的hash值，并且类中有两个方法<code>toString</code>以及<code>checkPassword</code>用来输出用户信息和检查密码。</p><p>如果这个时候我们打印这三个原型方法的日志会得到一样的结果</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">'Lix'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(u)); <span class="comment">// User &#123; toString: [Function], checkPassword: [Function] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u.__proto__); <span class="comment">// User &#123; toString: [Function], checkPassword: [Function] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(User.prototype); <span class="comment">// User &#123; toString: [Function], checkPassword: [Function] &#125;</span></span><br></pre></td></tr></table></figure></p><p>既然他们的输出都一样，那么他们是否作用一样呢，我们可以来比较测试一下。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(u) === User.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u.__proto__ === User.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>既然这两个方法都跟我们User对象的原型相等，那么这三个属性的区别究竟是什么呢？别急，接下来就把结论告诉大家。</p><ul><li><code>C.prototype</code>用于建立由 <code>new C()</code> 创建的对象的原型。</li><li><code>Object.getPrototype(obj)</code>是ES5中用来获取obj对象的原型对象的标准方法。</li><li><code>obj.__proto__</code>是获取obj对象的原型对象的非标准方法。</li></ul><p>所以一般我们是不会直接访问<code>C.prototype</code>去获取原型对象的，在ES5的环境中，我们使用<code>Object.getPrototype(obj)</code>来获取原型对象，而在不支持ES5的环境中，我们可以考虑用<code>__proto__</code>这样的非标准方法来当做权宜之计，希望各位不明白的同学能牢记这些区别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习JavaScript的过程中，原型是如何也绕不过去的一个知识点。虽然在现在ES6已经非常普及的现在，许多js的程序员都已经不再用原型的知识点来编写代码了，但是充分的理解原型也是很有必要的，尤其是在阅读他人优秀的js代码时，理解原型能帮助我们更好的理解早期代码。而原型包
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript——为自己的库编写更健壮的API函数</title>
    <link href="http://yoursite.com/2018/11/14/javascript%E2%80%94%E2%80%94%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%E7%BC%96%E5%86%99%E6%9B%B4%E5%81%A5%E5%A3%AE%E7%9A%84API%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/11/14/javascript——为自己的库编写更健壮的API函数/</id>
    <published>2018-11-14T06:05:25.000Z</published>
    <updated>2018-11-30T13:23:48.127Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看书的时候，阅读了关于使用JavaScript在代码库的设计时需要注意的文章，对我的启发很大，于是决定记录一些其中的知识点，一是分享自己获取到的知识，二是辅助记忆，让我以后更注意地去编写更健壮的JavaScript函数。</p><p>首先我们要记住的一个规则就是<strong>使用undefined来代替没有值的情况</strong>。</p><p>&lt;!--more--&gt;</p><p>我们来看下面的这个例子，有一个对象，有宽高的属性，我们传入宽高属性并用构造函数创建对象。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">320</span>; <span class="comment">// wrong test</span></span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">240</span>; <span class="comment">// wrong test</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> Element(); <span class="comment">// width: 320, height: 240</span></span><br></pre></td></tr></table></figure></p><p>如c1这个对象一样，他创建并且使用了我们预先设置的宽高的默认值。乍一看是不是没有什么问题，可是这里就隐藏了一个bug。如果我们想创建一个宽高都为0的对象，那么这个写法就会产生问题了。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Element(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">c2.width; <span class="comment">// 320</span></span><br><span class="line">c2.height; <span class="comment">// 240</span></span><br></pre></td></tr></table></figure></p><p>可见如果目标属性可以接受0作为参数，那么我们就不能使用或来取值。而对于String类型的对象的话，使用或还是可行的。那么对于能接受0作为值的参数，我们应该如何编写代码呢？答案很简单，使用undefined来代替没有值的情况就可以了。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Element(width, height) &#123;</span><br><span class="line">  this.width = width === undefined ? 320 : width;</span><br><span class="line">  this.height = height === undefined ? 240 : height;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c1 = new Element(0, 0);</span><br><span class="line">c1.width; // 0</span><br><span class="line">c1.height; // 0</span><br><span class="line"></span><br><span class="line">var c2 = new Element();</span><br><span class="line">c2.width; // 320</span><br><span class="line">c2.height; // 240</span><br></pre></td></tr></table></figure></p><p>当我们用undefined来判断是否有值的情况时，这个bug也就自然而然的没有了。</p><p>第二个需要我们记住的规则是<strong>函数有时应该接受关键字对象作为参数</strong>。</p><p>现在我们假设我们要设计一个第三方的弹窗库，我们有一个弹窗的对象Alert。那么我们先来看看这个构造函数:</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = <span class="keyword">new</span> Alert(<span class="number">100</span>, <span class="number">75</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="string">'Error'</span>, message, <span class="string">'blue'</span>, <span class="string">'white'</span>, <span class="string">'black'</span>, <span class="string">'error'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>这就是我们设计的构造函数，需要把每个参数对应的传入。如果你在阅读到这样的代码时，是不是会觉得非常难受，因为你并不知道每个参数对应着什么意思，尤其是最后一个<code>true</code>，到底代表的是什么布尔值？</p><p>而如果这时我们使用关键字对象来作为参数又会是什么表现呢？</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = <span class="keyword">new</span> Alert(&#123;</span><br><span class="line">  x: <span class="number">100</span>,</span><br><span class="line">  y: <span class="number">75</span>,</span><br><span class="line">  width: <span class="number">300</span>,</span><br><span class="line">  height: <span class="number">200</span>,</span><br><span class="line">  title: <span class="string">'Error'</span>,</span><br><span class="line">  message: <span class="string">'this is message'</span>,</span><br><span class="line">  titleColor: <span class="string">'blue'</span>,</span><br><span class="line">  bgColor: <span class="string">'white'</span>,</span><br><span class="line">  textColor: <span class="string">'black'</span>,</span><br><span class="line">  icon: <span class="string">'error'</span>,</span><br><span class="line">  modal: <span class="string">'true'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>看看这个新的构造函数，是不是舒服很多了，所有的参数意义一目了然。</p><p>但是这样的设计也存在一个问题，如果有的必传参数，漏传了怎么办？那么程序就会运行错误了。所以我们可以把一些必传的参数提取出来，放入构造函数的参数内。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = <span class="keyword">new</span> Alert(app, message, &#123;</span><br><span class="line"> width: <span class="number">150</span>, <span class="attr">height</span>: <span class="number">100</span>,</span><br><span class="line"> title: <span class="string">"Error"</span>,</span><br><span class="line"> titleColor: <span class="string">"blue"</span>, <span class="attr">bgColor</span>: <span class="string">"white"</span>, <span class="attr">textColor</span>: <span class="string">"black"</span>,</span><br><span class="line"> icon: <span class="string">"error"</span>, <span class="attr">modal</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果提取出必须要传入的参数的话，构造函数就是这样了，这样看还是比较清晰的呢。那么再结合我们的第一条规则，将undefined作为没有值的情况，完整的构造函数代码，就像下面这样了：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Alert</span>(<span class="params">parent, message, opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.width = opts.width === <span class="literal">undefined</span> ? <span class="number">320</span> : opts.width;</span><br><span class="line">  <span class="keyword">this</span>.height = opts.height === <span class="literal">undefined</span> ? <span class="number">200</span> : opts.height;</span><br><span class="line">  <span class="keyword">this</span>.x = opts.x === <span class="literal">undefined</span></span><br><span class="line">         ? (parent.width / <span class="number">2</span>) - (<span class="keyword">this</span>.width / <span class="number">2</span>)</span><br><span class="line">         : opts.x;</span><br><span class="line">  <span class="keyword">this</span>.y = opts.y === <span class="literal">undefined</span></span><br><span class="line">         ? (parent.height / <span class="number">2</span>) - (<span class="keyword">this</span>.height / <span class="number">2</span>)</span><br><span class="line">         : opts.y;</span><br><span class="line">  <span class="keyword">this</span>.title = opts.title || <span class="string">'Alert'</span>;</span><br><span class="line">  <span class="keyword">this</span>.titleColor = opts.titleColor || <span class="string">'blue'</span>;</span><br><span class="line">  <span class="keyword">this</span>.bgColor = opts.bgColor || <span class="string">'white'</span>;</span><br><span class="line">  <span class="keyword">this</span>.textColor = opts.textColor || <span class="string">'black'</span>;</span><br><span class="line">  <span class="keyword">this</span>.icon = opts.icon || <span class="string">'info'</span>;</span><br><span class="line">  <span class="keyword">this</span>.modal = !!opts.modal;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再往后优化的话，还可以使用一些库里的extend方法了，由于并不是标准库的方法，我在这里也就不讲下去了。希望这些分享能给初学JavaScript的同学一点帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看书的时候，阅读了关于使用JavaScript在代码库的设计时需要注意的文章，对我的启发很大，于是决定记录一些其中的知识点，一是分享自己获取到的知识，二是辅助记忆，让我以后更注意地去编写更健壮的JavaScript函数。&lt;/p&gt;
&lt;p&gt;首先我们要记住的一个规则就是&lt;s
      
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
      <category term="API设计" scheme="http://yoursite.com/tags/API%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>服务器的Mysql初始化设置</title>
    <link href="http://yoursite.com/2018/10/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Mysql%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/10/09/服务器的Mysql初始化设置/</id>
    <published>2018-10-09T06:49:22.000Z</published>
    <updated>2018-11-30T13:24:36.902Z</updated>
    
    <content type="html"><![CDATA[<p>继上篇博客记录了服务器的初始化安全设置之后，本篇文章会记录Mysql数据库的初始化安全设置。在操作mysql之前，最好先行备份，毕竟有“备”无患嘛。</p><h2>一、修改root用户的口令</h2><p>在Ubuntu16.04版本的服务器上，如果安装mysql的话会要求大家设置root的密码，若是没有设置过root用户的密码，可以用下面三种方法来这是</p><ul><li>用mysqladmin命令来改root用户口令</li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password 123456 // 设置mysql管理员root的密码为123456</span><br></pre></td></tr></table></figure></p><ul><li>用set password命令来修改密码：</li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost=password(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure></p><ul><li>直接修改user表的root用户口令</li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> password=password(<span class="string">'123456'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></p><p>这就是三种修改mysql中管理员口令的操作方式。</p><p>&lt;!--more--&gt;</p><h2>二、删除默认的数据库和用户</h2><p>mysql初始化后会自动生成空用户和test库，但实际上这样会留有安全隐患，所以我们在这里选择全部删除的操作。我们在命令行进入mysql后执行下面这些命令。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database <span class="built_in">test</span>;</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; delete from db;</span><br><span class="line">mysql&gt; delete from user <span class="built_in">where</span> not(host=<span class="string">"localhost"</span> and user=<span class="string">"root"</span>);</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></p><h2>三、修改默认的管理员名称</h2><p>因为默认的管理员名称是root，为了防止别人对root这个登录名进行暴力破解，我们最好也能把root用户的名称改掉，防止穷举破解。</p><p>同样的执行下面的操作就能修改用户名，这个例子里我们把数据库管理员root的名称改为original。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> user=<span class="string">"original"</span> <span class="built_in">where</span> user=<span class="string">"root"</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></p><h2>四、禁止远程连接mysql</h2><p>正常的话我们的mysql只是后端的程序来进行连接，所以我们无需开启socket进行监听，那么我们可以关闭mysql的监听功能。</p><ul><li><p>在my.cnf文件里，[mysqld]的部分添加skip-networking参数。</p></li><li><p>mysqld服务器中参数中添加 –skip-networking 启动参数来使mysql不监听任何TCP/IP连接，增加安全性。如果要进行mysql的管理的话,可以在服务器本地安装一个phpMyadmin来进行管理。</p></li></ul><h2>五、使用特定用户访问数据库</h2><p>我们可以针对每个库，创建特定的账户，给予这些账户针对某个库有 update、select、delete、insert、drop table、create table等权限。这样就能很好的避免某个库被攻破后不牵连其他库了。而当我们设置完善之后，最好就不要在使用root用户来访问数据库了。</p><h2>六、删除历史记录</h2><p>执行以上的命令会被shell记录在历史文件里，比如bash会写入用户目录的.bash_history文件，如果这些文件不慎被读，那么数据库的密码就会泄漏。用户登陆数据库后执行的SQL命令也会被MySQL记录在用户目录的.mysql_history文件里。如果数据库用户用SQL语句修改了数据库密码，也会因.mysql_history文件而泄漏。所以我们在shell登陆及备份的时候不要在-p后直接加密码，而是在提示后再输入数据库密码。 另外这两个文件我们也应该不让它记录我们的操作，以防万一。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm .bash_history .mysql_history</span><br><span class="line">$ ln -s /dev/null .bash_history</span><br><span class="line">$ ln -s /dev/null .mysql_history</span><br></pre></td></tr></table></figure></p><p>我自己常用的就是这六个步骤的设置，虽然不是很全，但是也勉强够用咯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继上篇博客记录了服务器的初始化安全设置之后，本篇文章会记录Mysql数据库的初始化安全设置。在操作mysql之前，最好先行备份，毕竟有“备”无患嘛。&lt;/p&gt;
&lt;h2&gt;一、修改root用户的口令&lt;/h2&gt;
&lt;p&gt;在Ubuntu16.04版本的服务器上，如果安装mysql的话会
      
    
    </summary>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="云服务器" scheme="http://yoursite.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04服务器的初始化设置</title>
    <link href="http://yoursite.com/2018/09/19/Ubuntu-16-04%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/19/Ubuntu-16-04服务器的初始化设置/</id>
    <published>2018-09-19T12:59:50.000Z</published>
    <updated>2018-09-19T13:04:34.770Z</updated>
    
    <content type="html"><![CDATA[<p>最近在服务器的安全性这个问题上吃了点亏，于是决定写几篇Linux服务器初始化相关的文章，来记录这次踩坑的成果。尽早的设置会让服务器更加的安全，提高它的可用性，为后续的部署程序打下基础。</p><h2>一、root登录</h2><p>在我们买下一台云服务器之后，就可以从控制台中拿到服务器的ip以及账号密码。这时我们可以通过</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@SERVER_IP_ADDRESS</span><br></pre></td></tr></table></figure></p><p>这个命令来连接服务器。如果出现了接受有关主机的真实性的警告，就选择同意，在输入密码之后，就能完成登录过程。</p><h3>root是什么</h3><p>在Unix与类Unix系统中，root是在所有模式（单/多用户）下对所有文件与程序拥有一切权限的用户（也即超级用户）的约定俗成的通名。</p><h2>二、创建新用户</h2><p>root账号的权限是非常大的，所以在我们第一次登录了root账号之后，我们就应该准备一个新账号，以后登录就使用这个新账号。所以接下来的步骤我们准备创建一个新用户。</p><p>例如我要创建一个名为&quot;leon&quot;的新用户。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser leon</span><br></pre></td></tr></table></figure></p><p>确认之后，我们需要先给账户设置一个密码。之后系统会问我们一些信息，包括全名，家庭电话，工作电话等等。如果可以的话，给账户设置一个强度较高的密码并且记住，也可以选择性的留下你的其他信息。</p><p>&lt;!--more--&gt;</p><h2>三、赋予root权限</h2><p>我们刚刚创建的leon是一个常规账户权限的账户，但是我们在日常的使用中可能需要超级管理员的权限，使用这一权限的方法是在命令前加上<code>sudo</code>，例如：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>为了避免权限不够的情况，我们要酌情的给一些确实需要并且值得信任的账户root权限，当我们使用root账户登录时这样操作，</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG sudo leon</span><br></pre></td></tr></table></figure></p><p>现在我们的用户leon就已经有了运行超级用户权限的命令。</p><h2>四、使用ssh来登录服务器</h2><p>使用ssh密钥来登录服务器可以很好的提高服务器的安全性，这个操作我在之前的博客里已经写过，在这里我就贴个链接吧。</p><p><a href="http://originalix.github.io/2018/04/25/%E5%9C%A8Mac%E4%B8%8A%E4%BD%BF%E7%94%A8ssh-key%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">使用ssh-key免密码登录服务器</a></p><p>在完成ssh登录服务器的配置之后，我们来说说怎么禁用密码的验证方式来提高服务器的安全性。</p><h2>五、设置禁用密码登录</h2><p>如果我们允许服务器能通过密码验证登录的话，那么任意一个得到我们账号密码的坏人，就可能登录到服务器上进行破坏性的操作。所以为了服务器的安全考虑，我推荐大家禁止使用密码验证的方式来登录服务器。毕竟我们在信任的电脑上已经配置了ssh-key了。</p><p>警告⚠️：一定要配置好ssh-key能够登录服务器了，才执行这一步的操作，否则你的服务器就永远登录不上去了，只能重装恢复了，可能会导致数据丢失。</p><p>使用root账户或者sudo命令，打开ssh的配置文件:</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p><p>查找<code>Passwordauthentication</code>选项，删除他前面的注释#，然后将他的值改为<code>no</code>。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sshd_config 禁用密码登录设置</span></span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure></p><p>接下来找到如下两个配置，如果跟我下面保持一致，则不更改，否则更改为一致，默认配置就是如下的值:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure></p><p>当你完成这些更改后，保存并使用， 使用<code>:wq</code>保存退出。</p><p>重启ssh的程序</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload sshd</span><br></pre></td></tr></table></figure></p><p>现在密码验证就已经关闭了，你只能使用ssh来进行身份验证。</p><p>在你退出这个登录连接之前，最好开一个新窗口，对自己的配置进行验证，首先确认ssh可以成功登录，免得等一下无法登录，再尝试使用另一个账号来登录服务器，如果拒绝了密码访问，那么我们的配置就成功了。</p><h2>六、设置防火墙</h2><p>Ubuntu 16.04服务器可以使用UFW防火墙来确保只允许与某些服务的连接。我们可以很容易地使用这个应用程序设置基本的防火墙。</p><p>不同的应用程序可以在安装时向UFW注册其配置文件。这些配置文件允许UFW按名称管理这些应用程序。 OpenSSH，该服务允许我们现在连接到我们的服务器，已在UFW注册了一个配置文件。</p><p>您可以通过键入以下内容查看此内容：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw app list</span><br></pre></td></tr></table></figure></p><p>可以看到以下内容</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Available applications:</span><br><span class="line">  Apache</span><br><span class="line">  Apache Full</span><br><span class="line">  Apache Secure</span><br><span class="line">  OpenSSH</span><br></pre></td></tr></table></figure></p><p>我们需要确保防火墙允许ssh连接，所以我们通过如下命令来允许这些连接：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow OpenSSH</span><br></pre></td></tr></table></figure></p><p>使用如下命令来启用防火墙：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></p><p>我们也可以自行查看防火墙的状态：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></p><p>可以看到：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">Apache Full                ALLOW       Anywhere</span><br><span class="line">OpenSSH                    ALLOW       Anywhere</span><br><span class="line">Apache Full (v6)           ALLOW       Anywhere (v6)</span><br><span class="line">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure></p><p>例如iOS的api接口，微信小程序的配置需要使用https协议，那我们要打开443的端口访问，可以使用如下命令打开端口：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 443 允许外部访问443端口</span><br></pre></td></tr></table></figure></p><p>到这里我们的服务器的基本配置也就已经完成了，接下来就可以单独为数据库打造安全访问的配置了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在服务器的安全性这个问题上吃了点亏，于是决定写几篇Linux服务器初始化相关的文章，来记录这次踩坑的成果。尽早的设置会让服务器更加的安全，提高它的可用性，为后续的部署程序打下基础。&lt;/p&gt;
&lt;h2&gt;一、root登录&lt;/h2&gt;
&lt;p&gt;在我们买下一台云服务器之后，就可以从控
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>唠唠快速排序算法</title>
    <link href="http://yoursite.com/2018/09/09/%E5%94%A0%E5%94%A0%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/09/唠唠快速排序算法/</id>
    <published>2018-09-09T07:34:27.000Z</published>
    <updated>2018-09-09T07:37:55.668Z</updated>
    
    <content type="html"><![CDATA[<p>每一个从事计算机相关方向工作的同学一定听说过快速排序算法，在面试的准备过程中，快排也一定是一个必须要牢牢掌握的算法。那么今天就来唠唠快速排序算法。</p><p>快速排序算法又称划分交换排序，简称快排，是一种排序算法。在平均状态下排序n个项目需要O(nlogn)次比较，在最坏的情况下则需要O(n^2)次比较，不过这种情况并不常见。事实上呢，快速排序通常要比其他算法更快，因为它的内部循环可以在大部分的架构上很有效率地达成。</p><p>&lt;!--more--&gt;</p><p>快速排序的动画演示：</p><p><img src="https://camo.githubusercontent.com/2499d89bbb30337a5d2d7770cc034b4b71fbfdc6/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f362f36612f536f7274696e675f717569636b736f72745f616e696d2e676966" alt="快排动画"></p><p>快速排序算法采用的是分治法的思想，将一个完整的待排序的序列一分为二，分而治之，并递归的对子序列继续排序。</p><p>可以这么简单的描述快速排序的步骤：</p><p>1、从数组中随机的选择一个元素，称之为“基准” （pivot）。</p><p>2、从数组中按顺序取出元素与基准比较，如果取出的元素比基准小，则放置入基准之前的数组，而如果取出的元素比基准大，则放入基准之后的数组，如果取出的元素与基准相等，则与基准放置于同一数组中。该操作可以称之为分区（partition）操作。</p><p>3、在第一遍排序完之后，再递归的对基准之前的数组与基准之后的两个数组进行排序，直至拆分至最小的数组大小，则可视为排序完成，按照调用栈返回结果。则排序完成。</p><p>介绍完步骤之后，来看看用javaScript如何来实现快速排序：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  快速排序算法</span></span><br><span class="line"><span class="comment"> *  最优时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="comment"> *  平均时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="comment"> *  最坏时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment"> *  是否稳定 否</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">  sort(originalArray) &#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果数组小于等于一个元素的时候就返回，可以理解为已经排好序</span></span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义左右两个数组</span></span><br><span class="line">    <span class="keyword">const</span> leftArray = [];</span><br><span class="line">    <span class="keyword">const</span> rightArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出第一个元素作为比较对象</span></span><br><span class="line">    <span class="keyword">const</span> pivotElement = array.shift();</span><br><span class="line">    <span class="keyword">const</span> centerArray = [pivotElement];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把数组切分为左中右三部分</span></span><br><span class="line">    <span class="keyword">while</span> (array.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentElement = array.shift();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currentElement === pivotElement) &#123;</span><br><span class="line">        centerArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentElement &lt; pivotElement) &#123;</span><br><span class="line">        leftArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rightArray.push(currentElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对左右两个数组递归排序</span></span><br><span class="line">    <span class="keyword">const</span> leftSortedArray = <span class="keyword">this</span>.sort(leftArray);</span><br><span class="line">    <span class="keyword">const</span> rightSortedArray = <span class="keyword">this</span>.sort(rightArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将返回的已经排好序的左中右三个数组合并 完成排序</span></span><br><span class="line">    <span class="keyword">return</span> leftSortedArray.concat(centerArray, rightSortedArray);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> quick = <span class="keyword">new</span> QuickSort();</span><br><span class="line"><span class="keyword">const</span> res = quick.sort(array);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></p><p>最后温馨的提醒各位同学，一定要牢牢的掌握快速排序算法，直到能随意白板手写快排为止。</p><p><a href="https://github.com/originalix/algorithm/blob/master/JavaScript/algorithms/sorting/quick-sort/QuickSort.js" target="_blank" rel="noopener">javaScript版快排源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每一个从事计算机相关方向工作的同学一定听说过快速排序算法，在面试的准备过程中，快排也一定是一个必须要牢牢掌握的算法。那么今天就来唠唠快速排序算法。&lt;/p&gt;
&lt;p&gt;快速排序算法又称划分交换排序，简称快排，是一种排序算法。在平均状态下排序n个项目需要O(nlogn)次比较，在最
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序——城市/区县定位选择组件</title>
    <link href="http://yoursite.com/2018/08/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E5%9F%8E%E5%B8%82%E5%8C%BA%E5%8E%BF%E5%AE%9A%E4%BD%8D%E9%80%89%E6%8B%A9%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/08/28/微信小程序——城市区县定位选择组件/</id>
    <published>2018-08-28T06:16:33.000Z</published>
    <updated>2018-09-06T13:43:46.718Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序——城市/区县定位选择组件</p><p>前两天在实现一个城市选择器的需求的时候，在github上看到了<a href="https://github.com/BeijiYang" target="_blank" rel="noopener">BeijiYang</a>同学的开源项目，觉得做的非常不错，不过是基于原生小程序写的，所以就花了点时间把他的项目基于mpvue框架改写了。方便让使用mpvue框架的同学使用。</p><p>贴一下原项目的地址，还在使用小程序自带框架的同学可以使用这个库哦 <a href="https://github.com/BeijiYang/citySelector" target="_blank" rel="noopener">项目地址</a></p><p>先一起看一下实现的效果图:</p><p>&lt;!--more--&gt;</p><p><img src="https://github.com/originalix/citySelector/blob/master/%E5%9F%8E%E5%B8%82%E9%80%89%E6%8B%A9%E5%99%A8%E7%A4%BA%E4%BE%8B.gif?raw=true" alt="效果图"></p><p>在改写完代码以后，我也来谈谈这个小组件里的实现逻辑。首先从布局开始，这个页面的布局结构由三个主要部分构成，页面顶部的搜索框，页面最右侧的字母列表栏，以及左边的最主要的城市列表部分。具体的页面代码我就不贴了，github链接我会放在文章尾部。</p><p>我们将地级市的数据存放到本地的<code>city.js</code>文件中，在这个<code>city.js</code>的文件中，还同时包括城市检索的首字母的数组数据，页面的城市列表以及首字母检索的数据就会从<code>city.js</code>中读取。在页面生命周期开始时，我们得获取当前设备的屏幕高度，用以计算右侧首字母列表的单个item高度，并且要将首字母检索的数组重组结构，最后绑定到当前页面的data下，如下的逻辑</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> searchLetter = city.searchLetter;</span><br><span class="line"><span class="keyword">const</span> cityList = city.cityList();</span><br><span class="line"><span class="keyword">const</span> sysInfo = wx.getSystemInfoSync();</span><br><span class="line"><span class="built_in">console</span>.log(sysInfo);</span><br><span class="line"><span class="keyword">const</span> winHeight = sysInfo.windowHeight;</span><br><span class="line"><span class="built_in">console</span>.log(winHeight);</span><br><span class="line"><span class="keyword">const</span> itemH = winHeight / searchLetter.length;</span><br><span class="line"></span><br><span class="line">searchLetter.map(</span><br><span class="line">  (item, index) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;&#125;;</span><br><span class="line">    temp.name = item;</span><br><span class="line">    temp.tHeight = index * itemH;</span><br><span class="line">    temp.bHeight = (index + <span class="number">1</span>) * itemH;</span><br><span class="line">    tempArr.push(temp);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tempArr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.winHeight = winHeight;</span><br><span class="line"><span class="keyword">this</span>.itemH = itemH;</span><br><span class="line"><span class="keyword">this</span>.searchLetter = tempArr;</span><br><span class="line"><span class="keyword">this</span>.cityList = cityList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.getLocation();</span><br></pre></td></tr></table></figure></p><p>在进入页面后，还需要定位当前的城市区县，所以有了上面👆源码的最后一行，<code>getLocation()</code>函数，这个函数的主要目的是为了获取到当前定位。</p><p>跟小程序原生项目不同的是我们的项目使用了Vuex来管理数据，所以原项目中需要全局保存的变量都被我使用了Vuex来管理，并且把通过腾讯地图API获取区县列表的逻辑也放入了Vuex内，让我们的组件内部只处理UI事件，变得更简洁干净，更易维护。</p><p>在点击了城市的Cell之后，接下来的操作就是通过腾讯地图API去请求接口，获取当前城市的附属区县数据，展示并可以再次点选。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* component中的UI操作 */</span></span><br><span class="line"><span class="comment">// 选择城市</span></span><br><span class="line">bindCity(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.condition = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.changeCity(&#123;</span><br><span class="line">    city: e.currentTarget.dataset.city,</span><br><span class="line">    code: e.currentTarget.dataset.code</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.scrollTopId = <span class="string">'selectcounty'</span>;</span><br><span class="line">  <span class="keyword">this</span>.completeList = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.selectCounty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Vuex中的selectCounty()函数 */</span></span><br><span class="line"><span class="comment">// 根据城市代码 定位区县</span></span><br><span class="line">[CITY_SELECT_COUNTY](&#123; commit, state &#125;) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正在定位区县'</span>);</span><br><span class="line"><span class="keyword">let</span> code = state.currentCityCode;</span><br><span class="line">wx.request(&#123;</span><br><span class="line">  url: <span class="string">`https://apis.map.qq.com/ws/district/v1/getchildren?&amp;id=<span class="subst">$&#123;code&#125;</span>&amp;key=<span class="subst">$&#123;config.key&#125;</span>`</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    commit(&#123;</span><br><span class="line">      type: CITY_SELECT_COUNTY,</span><br><span class="line">      list: res.data.result[<span class="number">0</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求区县成功'</span> + <span class="string">`https://apis.map.qq.com/ws/district/v1/getchildren?&amp;id=<span class="subst">$&#123;code&#125;</span>&amp;key=<span class="subst">$&#123;config.key&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求区县失败，请重试'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这里就是主要的点选逻辑，接下来看看搜索框实现的搜索逻辑。我们的搜索框要求能够通过汉字或者拼音搜索，所以在搜索逻辑中，我们根据对象的short和shorter属性来进行匹配，具体的逻辑可以看如下代码:</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索匹配逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">auto() &#123;</span><br><span class="line">  <span class="keyword">let</span> inputSd = <span class="keyword">this</span>.inputName.trim();</span><br><span class="line">  <span class="keyword">let</span> sd = inputSd.toLowerCase();</span><br><span class="line">  <span class="keyword">let</span> num = sd.length;</span><br><span class="line">  <span class="keyword">const</span> cityList = city.cityObjs;</span><br><span class="line">  <span class="keyword">let</span> finalCityList = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> temp = cityList.filter(</span><br><span class="line">    item =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> text = item.short.slice(<span class="number">0</span>, num).toLowerCase();</span><br><span class="line">      <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">      <span class="keyword">return</span> (text &amp;&amp; text == sd);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在城市数据中，添加简拼到“shorter”属性，就可以实现简拼搜索</span></span><br><span class="line">  <span class="keyword">let</span> tempShorter = cityList.filter(</span><br><span class="line">    itemShorter =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (itemShorter.shorter) &#123;</span><br><span class="line">        <span class="keyword">let</span> textShorter = itemShorter.shorter.slice(<span class="number">0</span>, num).toLowerCase();</span><br><span class="line">        <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">        <span class="keyword">return</span> (textShorter &amp;&amp; textShorter == sd);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempChinese = cityList.filter(</span><br><span class="line">    itemChinese =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> textChinese = itemChinese.city.slice(<span class="number">0</span>, num);</span><br><span class="line">      <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">      <span class="keyword">return</span> (textChinese &amp;&amp; textChinese == sd);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (temp[<span class="number">0</span>]) &#123;</span><br><span class="line">    temp.map(</span><br><span class="line">      item =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> testObj = &#123;&#125;;</span><br><span class="line">        testObj.city = item.city;</span><br><span class="line">        testObj.code = item.code;</span><br><span class="line">        finalCityList.push(testObj);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.completeList = finalCityList;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tempShorter[<span class="number">0</span>]) &#123;</span><br><span class="line">    tempShorter.map(</span><br><span class="line">      item =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> testObj = &#123;&#125;;</span><br><span class="line">        testObj.city = item.city;</span><br><span class="line">        testObj.code = item.code;</span><br><span class="line">        finalCityList.push(testObj);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.completeList = finalCityList;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tempChinese[<span class="number">0</span>]) &#123;</span><br><span class="line">    tempChinese.map(</span><br><span class="line">      item =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> testObj = &#123;&#125;;</span><br><span class="line">        testObj.city = item.city;</span><br><span class="line">        testObj.code = item.code;</span><br><span class="line">        finalCityList.push(testObj);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.completeList = finalCityList;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里，搜索功能也完成了，剩下无非就是各个界面的通信、以及组件与页面间的通信了，肯定也是各位同学必备的基本功了，也就不讲了。有其他疑问的可以直接阅读源码。</p><p>下面放上github仓库地址: <a href="https://github.com/originalix/citySelector" target="_blank" rel="noopener">微信小程序-城市选择组件</a></p><p>如果对你有帮助，请给我一个star谢谢。</p><p>同时谢谢原作者的开源，是你的开源让使用mpvue的同学得到帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信小程序——城市/区县定位选择组件&lt;/p&gt;
&lt;p&gt;前两天在实现一个城市选择器的需求的时候，在github上看到了&lt;a href=&quot;https://github.com/BeijiYang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BeijiYang&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序算法</title>
    <link href="http://yoursite.com/2018/08/07/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/07/堆排序算法/</id>
    <published>2018-08-07T12:02:17.000Z</published>
    <updated>2018-08-07T12:03:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>啊噢，又开始写算法学习的笔记了。最近在准备面试的过程中又把这些常见的排序算法拿出来复习复习，既然这篇写到了堆排序，那么就代表堆排序算法的概念被我忘的差不多了，写篇博客加深记忆吧。</p><p>&lt;!--more--&gt;</p><p>在维基百科上看堆排序，上面有这么一张图，</p><p><img src="https://camo.githubusercontent.com/207aa201f944b13e8a79842effcacf3f7ee3721e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f312f31622f536f7274696e675f68656170736f72745f616e696d2e676966" alt=""></p><p>可是原谅我概念真的忘的差不多了，所以理解不了这张图，于是我又找到另一个可视化的过程，一目了然，是别人放在github page上的一个<a href="https://bajdcc.github.io/html/heap.html" target="_blank" rel="noopener">页面</a>，地址就在<a href="https://bajdcc.github.io/html/heap.html" target="_blank" rel="noopener">这里</a>。所以本篇文章的堆排序的可视化动画，就参考这个吧。</p><p>堆排序（Heapsort)是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。</p><p>通常堆是通过一维数组来实现的，在数组起始位置为0的情形中来看看堆节点的一些定义。</p><ul><li>父节点i的左子节点在位置(2i + 1);</li><li>父节点i的右子节点在位置(2i + 2);</li><li>子节点i的父节点在floor((i - 1) / 2);</li></ul><p>关于堆中节点的位置，有如上三个定义。</p><p>在堆的数据结构中，堆中的最大值总是位于根节点上。而堆中的一个很重要的操作就是最大堆调整(Max_Heapify)，即为将堆的末端子节点作调整，使得子节点永远小于父节点。</p><p>接下来看看这个关键的Max_Heapify最大堆调整的实现是怎样的：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">maxHeapify(start, end) &#123;</span><br><span class="line">  <span class="comment">// 建立父节点指标和子节点指标</span></span><br><span class="line">  <span class="keyword">let</span> dad = start;</span><br><span class="line">  <span class="keyword">let</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若子节点指标超过范围，则直接跳出函数</span></span><br><span class="line">  <span class="keyword">if</span> (son &gt;= end)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 先比较两个子节点的大小 选择最大的</span></span><br><span class="line">  <span class="keyword">if</span> (son + <span class="number">1</span> &lt; end &amp;&amp; <span class="keyword">this</span>.array[son] &lt; <span class="keyword">this</span>.array[son + <span class="number">1</span>])</span><br><span class="line">    son++;</span><br><span class="line">  <span class="comment">// 如果父节点小于子节点，交换父子节点的内容再继续子节点与孙节点的比较</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.array[dad] &lt; <span class="keyword">this</span>.array[son]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.swap(dad, son);</span><br><span class="line">    <span class="keyword">this</span>.maxHeapify(son, end);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在进行最大堆调整的操作时，我们传入初始和终止的两个索引，并且根据我们刚提到的堆节点的定义，建立父节点和子节点指标。接下来如果子节点的指标超过的终止索引的范围，则直接跳出函数。否则的话我们比较两个子节点的大小，选择大的节点进行接下来的操作。</p><p>在两个节点中选取完较大节点后，我们比较父节点与子节点，如果父节点小于子节点，那么交换父子节点的内容，再递归的比较子节点与孙节点，直到调整完成。</p><p>完整的堆排序算法（javascript实现）如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  堆排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(originalArray) &#123;</span><br><span class="line">    <span class="comment">// 拷贝数组，不修改原数组</span></span><br><span class="line">    <span class="keyword">this</span>.array = [...originalArray];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  swap(i, j) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="keyword">this</span>.array[i];</span><br><span class="line">    <span class="keyword">this</span>.array[i] = <span class="keyword">this</span>.array[j];</span><br><span class="line">    <span class="keyword">this</span>.array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  maxHeapify(start, end) &#123;</span><br><span class="line">    <span class="comment">// 建立父节点指标和子节点指标</span></span><br><span class="line">    <span class="keyword">let</span> dad = start;</span><br><span class="line">    <span class="keyword">let</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若子节点指标超过范围，则直接跳出函数</span></span><br><span class="line">    <span class="keyword">if</span> (son &gt;= end)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 先比较两个子节点的大小 选择最大的</span></span><br><span class="line">    <span class="keyword">if</span> (son + <span class="number">1</span> &lt; end &amp;&amp; <span class="keyword">this</span>.array[son] &lt; <span class="keyword">this</span>.array[son + <span class="number">1</span>])</span><br><span class="line">      son++;</span><br><span class="line">    <span class="comment">// 如果父节点小于子节点，交换父子节点的内容再继续子节点与孙节点的比较</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.array[dad] &lt; <span class="keyword">this</span>.array[son]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.swap(dad, son);</span><br><span class="line">      <span class="keyword">this</span>.maxHeapify(son, end);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sort() &#123;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.array.length;</span><br><span class="line">    <span class="comment">// 初始化 i从最后一个父节点开始调整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor((len - <span class="number">1</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">      <span class="keyword">this</span>.maxHeapify(i, len);</span><br><span class="line">    <span class="comment">// 先将第一个元素和已排好的前一位做交换，再重新调整，直到排序完成</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">this</span>.swap(<span class="number">0</span>, i);</span><br><span class="line">      <span class="keyword">this</span>.maxHeapify(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> heap = <span class="keyword">new</span> HeapSort(array);</span><br><span class="line"><span class="keyword">let</span> res = heap.sort();</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></p><p>sort函数里的两个for循环也要解释一下，第一个for循环，是堆的初始化，从最后一个父节点开始，调整整个数组的排序。而第二个for循环，是把第一个已经确定大小的元素和已经排好位的前一个元素做交换，再重新调整排序，直到整个排序完成。待for循环完成之后，整个数组也就呈从小到大的顺序了排好了。</p><p>理解完代码之后，再看看堆排序的时间复杂度，堆排序的平均时间复杂度，以及最优、最坏的时间复杂度都是O(nlog n)，而空间复杂度是O(1)，并且堆排序是一种不稳定排序。</p><p>文章中的源码在这里<a href="https://github.com/originalix/algorithm/blob/4cd004c0c96e39a35daa3e97171ad0bbea5e2f49/JavaScript/algorithms/sorting/heap-sort/HeapSort.js" target="_blank" rel="noopener">堆排序算法源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;啊噢，又开始写算法学习的笔记了。最近在准备面试的过程中又把这些常见的排序算法拿出来复习复习，既然这篇写到了堆排序，那么就代表堆排序算法的概念被我忘的差不多了，写篇博客加深记忆吧。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;在维基百科上看堆排序，上面有这
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="堆排序" scheme="http://yoursite.com/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>从element-ui源码来看BEM实现</title>
    <link href="http://yoursite.com/2018/07/23/%E4%BB%8Eelement-ui%E6%BA%90%E7%A0%81%E6%9D%A5%E7%9C%8BBEM%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/23/从element-ui源码来看BEM实现/</id>
    <published>2018-07-23T11:50:58.000Z</published>
    <updated>2018-07-23T11:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前看过一些CSS的编码规范，也照着规范编写代码，但是还是觉得自己的CSS编码风格不是很好，在平时开发中使用各个知名的组件库的时候，发现现在挺多组件库都是BEM的命名风格了，于是找了比较知名的element饿了么前端的组件库的源码，想从看饿了么组件库的代码入手，学习学习大厂的的CSS BEM规范代码的书写风格。</p><p>&lt;!--more--&gt;</p><p>BEM代表“块（block），元素（element），修饰符（modifier）”，开发组件的过程中经常使用这三个实体，而在选择器中，这三个实体由以下符号来表示扩展关系：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-  中划线：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__ 双下划线：双下划线用来连接块和块的子元素。</span><br><span class="line">_  单下划线：单下划线用来描述一个块或者块的子元素的一种状态。</span><br><span class="line"></span><br><span class="line">type-block__element_modifier</span><br></pre></td></tr></table></figure></p><p>以上的描述是从腾讯的前端规范库中找到的，简单的来说理解了块、元素、修饰符三个分类之后，就能大致理解BEM代码是什么样的结构了，可是了解结构是一方面，如何写好代码又是另一方面。我在element组件库中的<code>mixins.scss</code>文件中找到了想要的答案。</p><p>接下来我要讲的就是如何利用sass，编写具有可读性和可维护性的BEM规则的css代码。</p><p>首先来看sass代码中对于block的定义:</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$namespace: 'el';</span><br><span class="line">$element-separator: '__';</span><br><span class="line">$modifier-separator: '--';</span><br><span class="line">$state-prefix: 'is-';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> b($block) &#123;</span><br><span class="line">  $B: $namespace+'-'+$block !global;</span><br><span class="line"></span><br><span class="line">  .#&#123;$B&#125; &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便大家理解代码，我现在开头贴上配置文件中定义的变量，而这时就能很清楚的看到block的生成就是基于BEM规范中，块是设计或布局的一部分，具有唯一地意义，利用命名空间<code>el</code>加上中划线，以及传入的block的名字，构建出block的样式，例如<code>alert</code>组件，在渲染完成后是<code>el-alert</code>，体现出它的唯一性。而在块的内部，再来编写跟这个块关联的其他样式代码。</p><p>块的构建非常的简单，接下来来看稍微有点复杂的元素的定义:</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> e($element) &#123;</span><br><span class="line">  $E: $element !global;</span><br><span class="line">  $selector: &amp;;</span><br><span class="line">  $currentSelector: "";</span><br><span class="line">  @<span class="keyword">each</span> $unit in $element &#123;</span><br><span class="line">    $currentSelector: #&#123;$currentSelector + "." + $B + $element-separator + $unit + ","&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> hitAllSpecialNestRule($selector) &#123;</span><br><span class="line">    @<span class="keyword">at</span>-<span class="keyword">root</span> &#123;</span><br><span class="line">      #&#123;$selector&#125; &#123;</span><br><span class="line">        #&#123;$currentSelector&#125; &#123;</span><br><span class="line">          @<span class="keyword">content</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">at</span>-<span class="keyword">root</span> &#123;</span><br><span class="line">      #&#123;$currentSelector&#125; &#123;</span><br><span class="line">        @<span class="keyword">content</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>元素选择器的实现中，我们应该把关注点放在if和eles分支上，为什么会出现<code>hitAllSpecialNestRule</code>函数判断的分支，原因是在修饰符或者其他mixin中嵌套一个元素element，会出现修饰符在前，而元素在后的编译结果，所以我们用<code>hitAllSpecialNestRule</code>函数来判断是否存在特殊的嵌套，如果存在的话，将我们的元素字符串写在前面，而修饰符放在后面，如果不存在，则原样输出。</p><p>而<code>hitAllSpecialNestRule</code>的实现则在下面的代码中：</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">function</span> selectorToString($selector) &#123;</span><br><span class="line">  $selector: inspect($selector);</span><br><span class="line">  $selector: str-slice($selector, 2, -2);</span><br><span class="line">  @<span class="keyword">return</span> $selector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">function</span> containsModifier($selector) &#123;</span><br><span class="line">  $selector: selectorToString($selector);</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> str-index($selector, $modifier-separator) &#123;</span><br><span class="line">    @<span class="keyword">return</span> true;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">return</span> false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">function</span> containWhenFlag($selector) &#123;</span><br><span class="line">  $selector: selectorToString($selector);</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> str-index($selector, <span class="string">'.'</span> + $state-prefix) &#123;</span><br><span class="line">    @<span class="keyword">return</span> true</span><br><span class="line">  &#125; @else &#123;</span><br><span class="line">    @<span class="keyword">return</span> false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function containPseudoClass($selector) &#123;</span><br><span class="line">  $selector: selectorToString($selector);</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> str-index($selector, <span class="string">':'</span>) &#123;</span><br><span class="line">    @<span class="keyword">return</span> true</span><br><span class="line">  &#125; @else &#123;</span><br><span class="line">    @<span class="keyword">return</span> false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function hitAllSpecialNestRule($selector) &#123;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">return</span> containsModifier($selector) or containWhenFlag($selector) or containPseudoClass($selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个函数<code>selectorToString</code>，就是将我们的选择器转换成一个字符串，而接下来的三个函数，分别判断了是否存在修饰符、flag例如（.isCenter）、伪类的情况。最后综合在一起返回结果，避免嵌套。</p><p>最后则是<code>modifier</code>修饰符的实现了，代码如下:</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> m($modifier) &#123;</span><br><span class="line">  $selector: &amp;;</span><br><span class="line">  $currentSelector: "";</span><br><span class="line">  @<span class="keyword">each</span> $unit in $modifier &#123;</span><br><span class="line">    $currentSelector: #&#123;$currentSelector + &amp; + $modifier-separator + $unit + ","&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">at</span>-<span class="keyword">root</span> &#123;</span><br><span class="line">    #&#123;$currentSelector&#125; &#123;</span><br><span class="line">      @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看懂的元素的实现之后，修饰符的实现就是一目了然的了。利用刚刚介绍的函数，以及块、元素、修饰符的实现代码，在sass中已经能非常高效率并且优雅的基于BEM规范的代码了。</p><p>贴一段示例代码，如何利用上面的代码编写BEM规范的css代码：</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"mixins/mixins"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"common/var"</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> b(test) &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    background-color: $--color-white;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> when(center) &#123;</span><br><span class="line">        <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> m(success) &#123;</span><br><span class="line">        background-color: $--color-black;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.lix-test__description</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: $--color-white;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> m(warning) &#123;</span><br><span class="line">        background-color: $--color-black;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.lix-test__description</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: $--color-white;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> e(content) &#123;</span><br><span class="line">        <span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>;</span><br><span class="line">        <span class="selector-tag">padding</span>: 0 8<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> e(title) &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 8<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">line-height</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">        </span><br><span class="line">        @<span class="keyword">include</span> when(bold) &#123;</span><br><span class="line">            <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lix-test-fade-enter</span>,</span><br><span class="line"><span class="selector-class">.lix-test-fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译之后的样子：</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.lix-test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line">  <span class="selector-class">.lix-test</span><span class="selector-class">.is-center</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center; &#125;</span><br><span class="line">  <span class="selector-class">.lix-test--success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br><span class="line">    <span class="selector-class">.lix-test--success</span> <span class="selector-class">.lix-test__description</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line">  <span class="selector-class">.lix-test--warning</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br><span class="line">    <span class="selector-class">.lix-test--warning</span> <span class="selector-class">.lix-test__description</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line">  <span class="selector-class">.lix-test__content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>; &#125;</span><br><span class="line">  <span class="selector-class">.lix-test__title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">10px</span>; &#125;</span><br><span class="line">    <span class="selector-class">.lix-test__title</span><span class="selector-class">.is-bold</span> &#123;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lix-test-fade-enter</span>,</span><br><span class="line"><span class="selector-class">.lix-test-fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>瞧见了么，合理的利用b、m、e的mixin就可以风格良好的css代码了。上面的所有代码都在<a href="https://github.com/originalix/Original/tree/master/sass/BEM" target="_blank" rel="noopener">这里</a>哦，有需要的可以直接看完整代码学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前看过一些CSS的编码规范，也照着规范编写代码，但是还是觉得自己的CSS编码风格不是很好，在平时开发中使用各个知名的组件库的时候，发现现在挺多组件库都是BEM的命名风格了，于是找了比较知名的element饿了么前端的组件库的源码，想从看饿了么组件库的代码入手，学习学习大厂
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结</title>
    <link href="http://yoursite.com/2018/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/17/小程序开发总结/</id>
    <published>2018-07-17T12:08:47.000Z</published>
    <updated>2018-07-17T12:09:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久很久没有更新了，最近几个月因为房子交房，生活上是一片忙碌，工作上的事其实还好，没有分去很多精力，主要是在生活上的事情牵扯了太多了精力，于是乎把每周一更博客的习惯都打断了，每周想起这件事情都觉得很愧疚，但是总是又抽不出时间来写，好像脑袋一片空白，不知道在要写什么。</p><p>现在房子开始正常装修了，想起来前段时间从前端到后端的独立完成了一个小程序的项目，想在恢复更新的时候，总结总结我在小程序的开发过程中碰到的问题或者是产生的感想。</p><p>&lt;!--more--&gt;</p><p>这个项目是我第一个接触小程序的项目，所以一开始我抛掉了用一些热门框架的想法，就想从原生的小程序组织架构来感受小程序最初的设计。在完整的看完微信提供的小程序开发文档后，就开始着手尝试开发小程序了，因为是基于前端而构建的小程序，所以语言方面是没有什么障碍的，只是微信封装了一套自己的类似HTML标签，放在<code>wxml</code>这个格式的文件中，大家可以理解为<code>html</code>的后缀名，剩下的话<code>wxss</code>就与<code>css</code>基本一致了。而小程序与其他前端程序构建有区别的地方之一就是把配置文件放在了<code>json</code>格式的文件里，因为我有Native iOS的基础，所以我大概理解把一些Navigation与Tabbar UI组件相关的配置放在了<code>json</code>文件里，还有把React和Vue中引入组件相关的配置，放在<code>json</code>文件里。而全局有一个<code>app.json</code>的文件，路由配置也必须写在里面，写到这里就要开始吐槽微信小程序开发第一个让我体验不是很好的地方，就是你的每一个页面，是放在<code>pages</code>这个文件夹下面的，例如我们的主页<code>index</code>目录底下有这么几个文件<code>index.wxml</code>、<code>index.wxss</code>、<code>index.json</code>、<code>index.js</code>。而这时你得在<code>app.json</code>中注册这个页面，比如填写<code>/pages/index/index</code>。就是这样的一个配置过程，每个页面下面有四个文件，每次还要去注册页面，只要一旦没注册，或者js里没有完成<code>Page({})</code>初始化对应的代码，那么整个小程序就会报错，运行不了，除非按照规范完成配置。如果小程序比较大，页面很多，那么这样配置我感觉还是挺累的。对于这个点我看到了微信官方发布的小程序框架<code>wepy</code>，在这个框架中是仿照<code>Vue</code>的组织架构，解决了上述的问题，所以接下来的小程序开发，我会尝试基于这个框架来开发，看看是否体验会变得更好。</p><p>第二点就是小程序的配置真的好严格哦，开发iOS或者安卓的时候，直接一台测试服务器就可以先把接口部署上，立马可以开发了，而小程序必须有已经完成备案的域名，并且基于https协议部署好，然后才可以在小程序的后台配置，上传文件域名，socket使用的域名，甚至webview的域名都要单独配置，累觉不爱。总是在需要完成某项功能的时候，才想起来还要配置，打开后台又是一番折腾。不过腾讯在这方面应该是基于安全考虑吧，毕竟是运行在微信的平台里的。</p><p>第三点就是小程序目前已经发展了快两年的时间了，感觉生态还不是很完善，比较完善的组件库也不是很多，我找到的大概除了微信官方的<code>WeUI</code>外，就是有赞的组件库和蘑菇街的组件库比较全了。所以如果想搞开源项目的同学，可以围绕小程序的生态动动脑筋，可能会孵化出不错的开源项目。</p><p>吐槽完小程序之后，再说说体验不错的地方，首先就是微信的JSAPI体验真的不错，受过iOS里各种API折磨的同学可能会有跟我一样的感觉，一些组件在JSAPI的设计里，调用只是这么简单的事情，并且微信的开发工具调试也是很不错的。只是真机测试的自由度还是有限，只能开发者本人测试。而小程序的设计也让下载app这样一个讨厌的事情被无形的解决了。当然了，代价就是你没有推送这种运营很关心的手段了，毕竟鱼和熊掌不可得兼。</p><p>我的第一个小程序的项目完成了，这只是开始的第一步，接下来也一定还会有更多的想法在微信小程序的平台上诞生的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久很久很久没有更新了，最近几个月因为房子交房，生活上是一片忙碌，工作上的事其实还好，没有分去很多精力，主要是在生活上的事情牵扯了太多了精力，于是乎把每周一更博客的习惯都打断了，每周想起这件事情都觉得很愧疚，但是总是又抽不出时间来写，好像脑袋一片空白，不知道在要写什么。&lt;/
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序——使用setData修改数组中的单个对象</title>
    <link href="http://yoursite.com/2018/05/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8setData%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%AA%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/05/30/微信小程序——使用setData修改数组中的单个对象/</id>
    <published>2018-05-30T13:47:21.000Z</published>
    <updated>2018-05-30T13:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序已经出来挺久的时间了，之前只是在文档上粗略的看了一下，最近稍得空闲，便利用微信小程序平台写一个练手的项目，顺便学习一下小程序开发，感觉大体跟前端开发基本类似，但是因为是在微信的平台上运行，具体还是要根据小程序的规则来编写代码的，其中还是有部分的内容跟前端中常见的有所不同，于是接下来的博客里，也会顺手记录微信小程序开发过程中的一些坑，帮助后来的小程序开发者少踩一些坑，当然我踩的坑大部分都是以前的开发者踩过的，我所做的也仅仅是记录，分享。</p><p>习惯使用Vue或者React这类框架的开发者们，肯定不会对修改data内中数组的单个对象而烦恼，因为这些框架已经帮我们很好的处理了这个问题，并且在文档上也写的非常清楚。</p><p>比如要求是有一个数组存放了购物车的商品信息，而你在购物车内修改了单个商品的期望购买数量后，我们就要动态的更新这个单个对象的购买数量值，如果在小程序里我们会怎么做呢？</p><p>&lt;!-- more --&gt;</p><p>如果你按照Vue的写法来实现的话，不出意外会失败。而微信小程序也只给我们提供了一个setData方法，这个方法是使用键值对的形式对数据进行修改，例如：</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    name : <span class="string">'leon'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>回到我们刚刚的例子里，这时候，如果你想修改单个商品的数量信息，应该怎么写？</p><p>首先展示一种错误的写法：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;<span class="attr">text</span>: <span class="string">'init data'</span>&#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  changeItemInArray: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      <span class="string">'array['</span>+index+<span class="string">'].text'</span>:<span class="string">'changed data'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果这样动态的写index，很显然，这样是无法使用在对象的key中的，我相信小程序的新手开发者可能尝试过这样的写法。</p><p>那么正确的写法究竟是怎么样的呢？</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">changeItemInArray: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提前准备好对象</span></span><br><span class="line">  <span class="keyword">var</span> item = <span class="keyword">this</span>.data.list[index]</span><br><span class="line">  </span><br><span class="line">  item.count = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 依旧是根据index获取数组中的对象</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="string">"list["</span>+ index + <span class="string">"]"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    <span class="comment">// 这里使用键值对方式赋值</span></span><br><span class="line">    key: item </span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，希望以后的小程序版本更新中，有更好的赋值方法。希望这篇文章能帮助到小程序的新手开发者。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信小程序已经出来挺久的时间了，之前只是在文档上粗略的看了一下，最近稍得空闲，便利用微信小程序平台写一个练手的项目，顺便学习一下小程序开发，感觉大体跟前端开发基本类似，但是因为是在微信的平台上运行，具体还是要根据小程序的规则来编写代码的，其中还是有部分的内容跟前端中常见的有
      
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云上免费部署HTTPS</title>
    <link href="http://yoursite.com/2018/05/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2HTTPS/"/>
    <id>http://yoursite.com/2018/05/22/腾讯云上免费部署HTTPS/</id>
    <published>2018-05-22T12:15:05.000Z</published>
    <updated>2018-05-22T13:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写微信小程序的时候，微信小程序需要所有的请求接口都部署在https协议上，于是就研究了一下怎么在腾讯云上部署https环境，发现还是比较简单的，首先我的服务器环境是Ubuntu 16.04, LAMP的环境。</p><h2>获取SSL证书</h2><p>腾讯云的SSL证书服务中，域名型的（DV）SSL证书是免费的，那么我们这次主要是申请这个证书，如需其他类型证书，也请付费申请。</p><p>进入SSL证书管理控制台，点击申请证书</p><p>&lt;!--more--&gt;</p><p>能看到如图所示的申请表单:</p><p><img src="http://img.yzl1030.com/510586EC-C2CF-49EF-988E-5AF9044B5BCF.png" alt=""></p><p>填上申请信息后，等待大概一个小时左右，证书就能申请下来。接着在云解析里配置上申请的二级域名:</p><p><img src="http://img.yzl1030.com/561179-20161123132020581-1776760709.png" alt=""></p><p>把二级域名解析好之后，待证书申请好。</p><p>在证书申请通过后，下载证书。</p><p><img src="http://img.yzl1030.com/55E31E55-8095-4A55-A273-D6DD71F0ADC1.png" alt=""></p><h2>上传SSL证书</h2><p>将下载好之后的证书，解压，可以看到里面有Apache, IIS, Nginx, Tomcat等证书，这里根据自己的服务器环境选择对应的证书。这里根据我使用的是Apache环境，使用FileZilla将证书文件上传到Apache目录下，我上传的路径是<code>/etc/apache2/ctr</code>，ctr是我自己创建存储证书的文件夹。</p><h2>添加HTTPS的Apache配置</h2><p>待证书上传完成后，我在路径<code>/etc/apache2/sites-available</code>下创建一个文件，名为<code>vhostssl.conf</code>，在这个文件里写我这个站点的https配置信息。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Listen 443</span><br><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerName www.example.com:443</span><br><span class="line">    DocumentRoot <span class="string">"/var/www/html/example"</span></span><br><span class="line">    ServerAlias www.example.com</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateFile <span class="string">"/etc/apache2/ctr/examplecom/Apache/2_example.com.crt"</span></span><br><span class="line">    SSLCertificateKeyFile <span class="string">"/etc/apache2/ctr/examplecom/Apache/3_example.com.key"</span></span><br><span class="line">    SSLCertificateChainFile <span class="string">"/etc/apache2/ctr/examplecom/Apache/1_root_bundle.crt"</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>vhostssl.conf</code>文件内写入上述的配置信息，其中注意将<code>example</code>替换为你自己的域名，并且修改成正确的证书路径。</p><p>配置文件完成后，进入<code>/etc/apache2/sites-enabled/</code>路径，</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s ../sites-available/vhostssl.conf</span><br></pre></td></tr></table></figure></p><p>执行这个命令，添加一个软链至<code>sites-available</code>目录。</p><p>在这些工作都做完后，执行</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service apache2 restart</span><br></pre></td></tr></table></figure></p><p>重启Apache服务器，然后在你配置的域名前输入https，就能看到一把小绿锁了，至此https的配置也就结束了。</p><p>在完成一遍配置后，会觉得特别简单是么？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写微信小程序的时候，微信小程序需要所有的请求接口都部署在https协议上，于是就研究了一下怎么在腾讯云上部署https环境，发现还是比较简单的，首先我的服务器环境是Ubuntu 16.04, LAMP的环境。&lt;/p&gt;
&lt;h2&gt;获取SSL证书&lt;/h2&gt;
&lt;p&gt;腾讯云的S
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="HTTPS" scheme="http://yoursite.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>CSS——实现元素的垂直居中</title>
    <link href="http://yoursite.com/2018/05/14/CSS%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/05/14/CSS——实现元素的垂直居中/</id>
    <published>2018-05-14T12:41:02.000Z</published>
    <updated>2018-05-14T12:41:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写CSS的过程中，我常常谷歌一个东西，就是如何实现元素的垂直居中，水平居中难度还不是很大，但是垂直居中我这个烂记性是写一次忘一次，于是本着好记性不如烂笔头的想法，写下一篇博客记录下来。那么今天就记录下三种垂直居中的方法，各位看官按需使用。</p><p>&lt;!-- more --&gt;</p><h2>通用情况</h2><p>首先我们先介绍一种通用情况下的垂直居中，这个方法不需要设置自己的高度，也不需要父容器设置高度，利用绝对定位只需要三行代码就能实现。</p><p>首先html代码长这个样子</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outter1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里的子元素自适应，不设置高度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么来看css代码如何完成垂直居中：</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#outter1</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#outter1</span> <span class="selector-class">.inner1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#outter1</span> <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2>父容器设置了高度，父容器下只有一个元素的情况</h2><p>若是父容器设置了高度，父容器里只有一个元素，那么使用相对定位即可完成垂直居中。</p><p>html代码:</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outter2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>父亲设置了高度，且只有我一个子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css代码:</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#outter2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:black;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#outter2</span> <span class="selector-class">.inner1</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#outter2</span> <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2>Flex布局搞定垂直居中</h2><p>如果不用考虑老式浏览器兼容的话，直接用flex布局来搞定就是非常简单的了，三行代码搞定垂直居中。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outter3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#outter3</span><span class="selector-class">.inner1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是三种CSS里垂直居中的方法了，希望写下这篇文章的我，在遇到垂直居中的问题时，再也不用谷歌了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写CSS的过程中，我常常谷歌一个东西，就是如何实现元素的垂直居中，水平居中难度还不是很大，但是垂直居中我这个烂记性是写一次忘一次，于是本着好记性不如烂笔头的想法，写下一篇博客记录下来。那么今天就记录下三种垂直居中的方法，各位看官按需使用。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- m
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在Ubunt16.04上安装LAMP</title>
    <link href="http://yoursite.com/2018/05/09/%E5%9C%A8Ubunt16-04%E4%B8%8A%E5%AE%89%E8%A3%85LAMP/"/>
    <id>http://yoursite.com/2018/05/09/在Ubunt16-04上安装LAMP/</id>
    <published>2018-05-09T13:47:54.000Z</published>
    <updated>2018-05-09T13:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近经常在自己的测试服务器上部署项目，也开了好几台测试服务器，都是用最简单的LAMP方案来建站的。毕竟是最简单易用的，LAMP即为 Linux、Web 服务器 (Apache)、 数据库服务器 (MySQL / MariaDB) 和 PHP (脚本语言)。由于我使用的都是Ubuntu 16.04的系统，所以我将记录基于Ubuntu16.04的系统中安装LAMP的过程。在这里我将默认你已经安装好Ubuntu 16.04的系统了。</p><p>&lt;!--more--&gt;</p><h2>Apache2 web服务器的安装:</h2><p>在 Ubuntu Linux 中，web服务器是Apache2，我们可以利用如下命令安装Apache2。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line">$ sudo apt install apache2 -y</span><br></pre></td></tr></table></figure></p><p>当安装完成Apache2的包之后，Apache2的相关服务是启动的，并在重启后自动运行。在某些情况下，如果你的Apache2的服务并没有自动运行和启用，你可以利用如下命令来启用它：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start apache2.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> apache2.service</span><br><span class="line">$ sudo systemctl status apache2.service</span><br></pre></td></tr></table></figure></p><p>如果你开启了Ubuntu的防火墙（ufw）,那么你可以使用如下命令来解除web服务器的端口（80和443）限制：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status</span><br><span class="line">Status: active</span><br><span class="line">$ sudo ufw allow <span class="keyword">in</span> <span class="string">'Apache Full'</span></span><br><span class="line">Rule added</span><br><span class="line">Rule added (v6)</span><br></pre></td></tr></table></figure></p><p>好了，这时候你已经可以输入你的服务器的IP地址来访问你的web服务器了，不出意外你会看到Apache2的欢迎页面。</p><h2>数据库服务器的安装(MySQL Server 5.7):</h2><p>MySQL 和 MariaDB 都是 Ubuntu 16.04 中的数据库服务器。 MySQL Server 和 MariaDB Server的安装包都可以在Ubuntu 的默认软件源中找到，我们可以选择其中的一个来安装。通过下面的命令来在终端中安装mysql服务器。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure></p><p>在安装的过程中，它会要求你设置mysql服务器的root账户的密码：</p><p><img src="https://dn-linuxcn.qbox.me/data/attachment/album/201606/14/203351wti8ttrbudtwb8io.jpg" alt=""></p><p>确认root账户的密码，并点击确定。</p><p>MySQL 服务器的安装到此已经结束了， MySQL 服务会自动启动并启用。我们可以通过如下的命令来校验 MySQL 服务的状态。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status mysql.service</span><br></pre></td></tr></table></figure></p><h2>PHP脚本语言的安装:</h2><p>由于PHP7已经存在于Ubuntu的软件源中了，在终端中执行如下的命令来安装PHP7</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install php7.0-mysql php7.0-curl php7.0-json php7.0-cgi php7.0 libapache2-mod-php7.0</span><br></pre></td></tr></table></figure></p><p>在<code>/var/www/html</code>的apache的根目录下创建一个简单的php页面。</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch info.php</span><br><span class="line">$ vi info.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>在vi中编辑之后保存并退出文件。</p><p>现在你可以从 web 浏览器中访问这个页面, 输入 : “http://&lt;Server_IP&gt;/info.php” ，你可以看到如下页面。</p><p>如果能看到紫色的PHPINFO页面，说明已经完全安装成功了。</p><h2>phpMyAdmin的安装：</h2><p>phpMyAdmin 可以让我们通过它的 web 界面来执行所有与数据库管理和其他数据库操作相关的任务，这个安装包已经存在于 Ubuntu 的软件源中。</p><p>利用如下的命令来在 Ubuntu server 16.04 LTS 中安装 phpMyAdmin。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install php-mbstring php7.0-mbstring php-gettext</span><br><span class="line">$ sudo systemctl restart apache2.service</span><br><span class="line">$ sudo apt install phpmyadmin</span><br></pre></td></tr></table></figure></p><p>在以下的安装过程中，它会提示我们选择 phpMyAdmin 运行的目标服务器。</p><p>选择 Apache2 并点击确定。</p><p>点击确定来配置 phpMyAdmin 管理的数据库。</p><p>指定 phpMyAdmin 向数据库服务器注册时所用的密码。</p><p>确认 phpMyAdmin 所需的密码，并点击确认。</p><p>现在可以开始尝试访问 phpMyAdmin，打开浏览器并输入 : “http://Server_IP_OR_Host_Name/phpmyadmin”</p><p>使用我们安装时设置的 root 帐户和密码。当我们点击“Go”的时候，将会重定向到如下所示的 ‘phpMyAdmin’ web界面。</p><p>如果这里出现了错误，那么记得给phpmyadmin加一个软链接，指向apache目录，</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br></pre></td></tr></table></figure></p><p>到现在，LAMP 方案已经被成功安装并可以使用了，欢迎分享你的反馈和评论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近经常在自己的测试服务器上部署项目，也开了好几台测试服务器，都是用最简单的LAMP方案来建站的。毕竟是最简单易用的，LAMP即为 Linux、Web 服务器 (Apache)、 数据库服务器 (MySQL / MariaDB) 和 PHP (脚本语言)。由于我使用的都是U
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu 16.04" scheme="http://yoursite.com/tags/Ubuntu-16-04/"/>
    
      <category term="LAMP" scheme="http://yoursite.com/tags/LAMP/"/>
    
  </entry>
  
  <entry>
    <title>在Mac上使用ssh-key免密码登录服务器</title>
    <link href="http://yoursite.com/2018/04/25/%E5%9C%A8Mac%E4%B8%8A%E4%BD%BF%E7%94%A8ssh-key%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/04/25/在Mac上使用ssh-key免密码登录服务器/</id>
    <published>2018-04-25T12:42:50.000Z</published>
    <updated>2018-04-25T12:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>从很早之前开始，在搭建测试服务器的时候，就不停的谷歌怎么免密登录服务器，每次配置好免密登录后，到搭建新的服务器时，又忘记了具体的命令，所以决定把这个方法记下来，方便之后日后查找。</p><p>通常的来说，我们会使用 <code>ssh user@host -p port</code>这个命令，之后输入密码来登录服务器，才能ssh登录到服务器进行操作。如果一天需要登录很多遍服务器，就会输入很多次密码，偷懒的我当然不愿意这么干。而今天我们就要偷懒的进行免密码登录服务器的操作。</p><p>&lt;!--more--&gt;</p><p>Unix系的操作系统提供了各种ssh支持，我们可以通过这些来实现ssh登录。</p><p>首先我们要在我们的mac上电脑上生成公钥和私钥，在终端中输入以下命令:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p><p>首先进入<code>~/.ssh</code>目录，之后:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>之后就可以一路回车，一般都不设置密码，即可在~/.ssh目录中生成私钥文件(id_rsa)和公钥文件（id_rsa.pub）。如果熟悉git ssh-key配置的朋友，可能已经很熟悉这个步骤了，所以我们只要把公钥上传到我们的服务器的~/.ssh目录就好了。</p><p>所以我们可以用接下来的命令上传我们的公钥文件:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub ssh foo@8.8.8.8 -p 2222:~/.ssh/</span><br></pre></td></tr></table></figure></p><p>接下来我们登录到服务器中，将~/.ssh目录下的id_rsa.pub文件改名为authorized_keys:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure></p><p>接着修改文件权限</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh/</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>现在，我们就可以正常的在mac 终端中使用ssh来登录服务器了，无需输入密码。</p><p>我们可以在<code>bash_profile</code>中设置一个<code>alias</code>，更能方便登录服务器的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从很早之前开始，在搭建测试服务器的时候，就不停的谷歌怎么免密登录服务器，每次配置好免密登录后，到搭建新的服务器时，又忘记了具体的命令，所以决定把这个方法记下来，方便之后日后查找。&lt;/p&gt;
&lt;p&gt;通常的来说，我们会使用 &lt;code&gt;ssh user@host -p port&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发——yii2多图上传组件的使用</title>
    <link href="http://yoursite.com/2018/04/17/PHP%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94yii2%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/17/PHP开发——yii2多图上传组件的使用/</id>
    <published>2018-04-17T13:29:50.000Z</published>
    <updated>2018-04-17T13:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用yii2开发一个表单页面的时候，有多图上传的需求，稍微找了找这方面的组件，基本都安利fileInput这个组件，于是就尝试着使用这个库来完成后端表单页面的多图上传功能。使用的过程中发现还是有不少小细节需要注意的，于是记录一下使用的过程。</p><p><a href="https://github.com/kartik-v/yii2-widget-fileinput" target="_blank" rel="noopener">yii2-widget-fileinput</a>这个库的github地址在这里，安装的部分就很常规了，按文档走就可以了。</p><p>&lt;!--more--&gt;</p><p>我们来看官方文档展示的几个常规操作：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">kartik</span>\<span class="title">widgets</span>\<span class="title">FileInput</span></span><br><span class="line">// <span class="title">or</span> '<span class="title">use</span> <span class="title">kartik</span><span class="title">ile</span>\<span class="title">FileInput</span>' <span class="title">if</span> <span class="title">you</span> <span class="title">have</span> <span class="title">only</span> <span class="title">installed</span> <span class="title">yii2</span>-<span class="title">widget</span>-<span class="title">fileinput</span> <span class="title">in</span> <span class="title">isolation</span></span><br><span class="line"> </span><br><span class="line">// 使用<span class="title">ActiveForm</span> 和 <span class="title">model</span>绑定的单张图片示例</span><br><span class="line"><span class="title">echo</span> $<span class="title">form</span>-&gt;<span class="title">field</span>($<span class="title">model</span>, '<span class="title">avatar</span>')-&gt;<span class="title">widget</span>(<span class="title">FileInput</span>::<span class="title">classname</span>(), [</span><br><span class="line">    '<span class="title">options</span>' =&gt; ['<span class="title">accept</span>' =&gt; '<span class="title">image</span>/*'],</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 多图上传示例</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;label class="control-label"&gt;Add Attachments&lt;/label&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> FileInput::widget([</span><br><span class="line">    <span class="string">'model'</span> =&gt; $model,</span><br><span class="line">    <span class="string">'attribute'</span> =&gt; <span class="string">'attachment_1[]'</span>,</span><br><span class="line">    <span class="string">'options'</span> =&gt; [<span class="string">'multiple'</span> =&gt; <span class="keyword">true</span>]</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不绑定model的使用方法</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;label class="control-label"&gt;Upload Document&lt;/label&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> FileInput::widget([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'attachment_3'</span>,</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不可点击的示例</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;label class="control-label"&gt;Select Attachment&lt;/label&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> FileInput::widget([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'attachment_4'</span>,</span><br><span class="line">    <span class="string">'disabled'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><p>而这些都是常规操作，我们来设想一下，我们要完成淘宝的商品添加，有个商品表，有着一对多关系的若干张图片，这时候就需要用到多图上传功能了。而且我们还希望上传图片是异步的，那么我们可以这么配置我们的fileInput组件</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= $form-&gt;field($model, <span class="string">'image[]'</span>)-&gt;label($label)-&gt;widget(FileInput::classname(), [</span><br><span class="line"><span class="comment">// 'name' =&gt; 'ImgSelect',</span></span><br><span class="line"><span class="string">'language'</span> =&gt; <span class="string">'zh-CN'</span>, </span><br><span class="line"><span class="string">'options'</span> =&gt; [<span class="string">'multiple'</span> =&gt; <span class="keyword">true</span>, <span class="string">'accept'</span> =&gt; <span class="string">'image/*'</span>],  </span><br><span class="line"><span class="string">'pluginOptions'</span> =&gt; [  </span><br><span class="line">    <span class="string">'initialPreview'</span> =&gt; $initialPreview,  </span><br><span class="line">    <span class="string">'initialPreviewConfig'</span> =&gt; $initialPreviewConfig,  </span><br><span class="line">    <span class="string">'allowedPreviewTypes'</span> =&gt; [<span class="string">'image'</span>],  </span><br><span class="line">    <span class="string">'allowedFileExtensions'</span> =&gt; [<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'png'</span>],  </span><br><span class="line">    <span class="string">'previewFileType'</span> =&gt; <span class="string">'image'</span>,  </span><br><span class="line">    <span class="string">'overwriteInitial'</span> =&gt; <span class="keyword">false</span>,  </span><br><span class="line">    <span class="string">'browseLabel'</span> =&gt; <span class="string">'选择图片'</span>,</span><br><span class="line">    <span class="string">'msgFilesTooMany'</span> =&gt; <span class="string">"选择上传的图片数量(&#123;n&#125;) 超过允许的最大图片数&#123;m&#125;！"</span>,  </span><br><span class="line">    <span class="string">'maxFileCount'</span> =&gt; <span class="number">5</span>,<span class="comment">//允许上传最多的图片5张  </span></span><br><span class="line">    <span class="string">'maxFileSize'</span> =&gt; <span class="number">2048</span>,<span class="comment">//限制图片最大200kB  </span></span><br><span class="line">    <span class="string">'uploadUrl'</span> =&gt; Url::to([<span class="string">'/upload/image'</span>]),</span><br><span class="line">    <span class="comment">//'uploadExtraData' =&gt; ['testid' =&gt; 'listimg'],  </span></span><br><span class="line">    <span class="string">'uploadAsync'</span> =&gt; <span class="keyword">true</span>,<span class="comment">//配置异步上传还是同步上传  </span></span><br><span class="line">],</span><br><span class="line"><span class="string">'pluginEvents'</span> =&gt; [  </span><br><span class="line">    <span class="string">'filepredelete'</span> =&gt; <span class="string">"function(event, key) &#123;  </span></span><br><span class="line"><span class="string">            return (!confirm('确认要删除'));  </span></span><br><span class="line"><span class="string">        &#125;"</span>,  </span><br><span class="line">    <span class="string">'fileuploaded'</span> =&gt; <span class="string">'function(event, data, previewId, index) &#123;  </span></span><br><span class="line"><span class="string">            $(event.currentTarget.closest("form")).append(data.response.imgfile);</span></span><br><span class="line"><span class="string">        &#125;'</span>,  </span><br><span class="line">    <span class="string">'filedeleted'</span> =&gt; <span class="string">'function(event, key) &#123;  </span></span><br><span class="line"><span class="string">            $(event.currentTarget.closest("form")).find("#"+key).remove();  </span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        &#125;'</span>,  </span><br><span class="line">]</span><br><span class="line">]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们在控制器配置好图片浏览的配置，传入进来。代码里的关键点我已经加上了配置，我们可以看到，这时异步上传的url已经配置到了<code>upload/image</code>这个控制器里，而我们也在删除，上传等操作完成时加上了js的回调。</p><p>如上所述，我们罗列了一些都是组件 FileInput的基本属性和设置，如有所需，可查看文档看属性的详细说明。</p><p>看下上传图片的控制器里，我们是怎么写<code>actionImage</code>这个函数的</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 上传图片到临时目录 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> \yii\base\Exception </span></span><br><span class="line"><span class="comment">   */</span>  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionImage</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">  </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (Yii::$app-&gt;request-&gt;isPost) &#123;  </span><br><span class="line">          $res = [];  </span><br><span class="line">          $initialPreview = [];  </span><br><span class="line">          $initialPreviewConfig = [];  </span><br><span class="line">          $images = UploadedFile::getInstancesByName(<span class="string">"UploadImage[image]"</span>);  </span><br><span class="line">          <span class="keyword">if</span> (count($images) &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">              <span class="keyword">foreach</span> ($images <span class="keyword">as</span> $key =&gt; $image) &#123;  </span><br><span class="line">                  <span class="keyword">if</span> ($image-&gt;size &gt; <span class="number">2048</span> * <span class="number">1024</span>) &#123;  </span><br><span class="line">                      $res = [<span class="string">'error'</span> =&gt; <span class="string">'图片最大不可超过2M'</span>];  </span><br><span class="line">                      <span class="keyword">return</span> json_encode($res);  </span><br><span class="line">                  &#125;  </span><br><span class="line">                  <span class="keyword">if</span> (!in_array(strtolower($image-&gt;extension), <span class="keyword">array</span>(<span class="string">'gif'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'png'</span>))) &#123;  </span><br><span class="line">                      $res = [<span class="string">'error'</span> =&gt; <span class="string">'请上传标准图片文件, 支持gif,jpg,png和jpeg.'</span>];  </span><br><span class="line">                      <span class="keyword">return</span> json_encode($res);  </span><br><span class="line">                  &#125;  </span><br><span class="line">                  $dir = <span class="string">'/uploads/temp/'</span>;  </span><br><span class="line">                  <span class="comment">//生成唯一uuid用来保存到服务器上图片名称  </span></span><br><span class="line">                  $pickey = ToolExtend::genuuid();  </span><br><span class="line">                  $filename = $pickey . <span class="string">'.'</span> . $image-&gt;getExtension();</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//如果文件夹不存在，则新建文件夹  </span></span><br><span class="line">                  <span class="keyword">if</span> (!file_exists(Yii::getAlias(<span class="string">'@backend'</span>) . <span class="string">'/web'</span> . $dir)) &#123;  </span><br><span class="line">                      FileHelper::createDirectory(Yii::getAlias(<span class="string">'@backend'</span>) . <span class="string">'/web'</span> . $dir, <span class="number">777</span>);  </span><br><span class="line">                  &#125;  </span><br><span class="line">                  $filepath = realpath(Yii::getAlias(<span class="string">'@backend'</span>) . <span class="string">'/web'</span> . $dir) . <span class="string">'/'</span>;  </span><br><span class="line">                  $file = $filepath . $filename;  </span><br><span class="line">    </span><br><span class="line">                  <span class="keyword">if</span> ($image-&gt;saveAs($file)) &#123;  </span><br><span class="line">                      $imgpath = $dir . $filename;  </span><br><span class="line">                      <span class="comment">/*Image::thumbnail($file, 100, 100) </span></span><br><span class="line"><span class="comment">                          -&gt;save($file . '_100x100.jpg', ['quality' =&gt; 80]); </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">                    <span class="comment">//   array_push($initialPreview, "&lt;img src='" . $imgpath . "' class='file-preview-image' alt='" . $filename . "' title='" . $filename . "'&gt;");  </span></span><br><span class="line">                      $config = [  </span><br><span class="line">                          <span class="string">'caption'</span> =&gt; $filename,  </span><br><span class="line">                          <span class="string">'width'</span> =&gt; <span class="string">'120px'</span>,  </span><br><span class="line">                          <span class="string">'url'</span> =&gt; <span class="string">'../upload/delete'</span>, <span class="comment">// server delete action  </span></span><br><span class="line">                          <span class="string">'key'</span> =&gt; $pickey,</span><br><span class="line">                          <span class="string">'extra'</span> =&gt; [<span class="string">'filename'</span> =&gt; $filename]  </span><br><span class="line">                      ];</span><br><span class="line">                      array_push($initialPreviewConfig, $config);  </span><br><span class="line">    </span><br><span class="line">                      $res = [  </span><br><span class="line">                          <span class="string">"initialPreview"</span> =&gt; $initialPreview,  </span><br><span class="line">                          <span class="string">"initialPreviewConfig"</span> =&gt; $initialPreviewConfig,  </span><br><span class="line">                          <span class="string">"imgfile"</span> =&gt; <span class="string">"&lt;input name='image[]' id='"</span> . $pickey . <span class="string">"' type='hidden' value='"</span> . $imgpath . <span class="string">"'/&gt;"</span>,</span><br><span class="line">                          <span class="string">'filename'</span> =&gt; $filename,</span><br><span class="line">                          <span class="string">'imagePath'</span> =&gt; $imgpath,</span><br><span class="line">                      ];  </span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> json_encode($res);  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>到此，多图上传的工作我们也就完美的实现了。</p><p>为了实现图片的删除效果，这里可以先上传两张图片。你可以单张上传也可以多张上传。</p><p>上传成功后你可以刷新当前页面，因为一开始我们就在controller中实现了图片的预览工作，所以理应会展示我们已经上传的两张图片。</p><p>至于删除函数就不讲了，只要在浏览里配置上删除的url，也是一样的操作咯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用yii2开发一个表单页面的时候，有多图上传的需求，稍微找了找这方面的组件，基本都安利fileInput这个组件，于是就尝试着使用这个库来完成后端表单页面的多图上传功能。使用的过程中发现还是有不少小细节需要注意的，于是记录一下使用的过程。&lt;/p&gt;
&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://yoursite.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>在create-react-app中使用sass</title>
    <link href="http://yoursite.com/2018/04/04/%E5%9C%A8create-react-app%E4%B8%AD%E4%BD%BF%E7%94%A8sass/"/>
    <id>http://yoursite.com/2018/04/04/在create-react-app中使用sass/</id>
    <published>2018-04-04T14:00:13.000Z</published>
    <updated>2018-04-04T14:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Sass（英文全称：Syntactically Awesome Stylesheets）是一个最初由Hampton Catlin设计并由Natalie Weizenbaum开发的层叠样式表语言。Sass是一个将脚本解析成CSS的脚本语言，即SassScript。Sass包括两套语法。最开始的语法叫做“缩进语法”，与Haml类似，使用缩进来区分代码块，并且用回车将不同规则分隔开。而较新的语法叫做“SCSS”，使用和CSS一样的块语法，即使用大括号将不同的规则分开，使用分号将具体的样式分开。通常情况下，这两套语法通过.sass和.scss两个文件扩展名区分开。相信每个前端开发者都对这种css预处理器有所耳闻。</p></blockquote><p>不管你是刚使用Reactjs或者是Reactjs的老司机，你们一定都听说过<code>create-react-app</code>这个脚手架，而从<code>create-react-app</code>的官方文档中，我们可以看到他们暂时还不支持直接导入LESS或者Sass。但是通过一些配置，我们还是可以从官方脚手架中使用sass/scss/less的。</p><p>&lt;!--more--&gt;</p><p>首先我们先安装<code>node-sass</code>这个组件，我推荐我们国内的coder使用下面的命令行安装</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mirror-config-china --registry=http://registry.npm.taobao.org</span><br><span class="line">npm install node-sass</span><br></pre></td></tr></table></figure></p><p>然后在自己项目的<code>package.json</code>中，将以下行添加到scripts中:</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"build-css": "node-sass-chokidar src/ -o src/",</span><br><span class="line">"watch-css": "npm run build-css &amp;&amp; node-sass-chokidar src/ -o src/ --watch --recursive",</span><br></pre></td></tr></table></figure></p><blockquote><p>Note:  在使用不同的预处理器时，请根据预处理的文档替换build-css和watch-css命令。</p></blockquote><p>现在，您可以将src/App.css重命名为src/App.scss并运行npm run watch-css。watch-css将在src子目录中找到每个Sass文件，并在其旁边创建一个相应的CSS文件，在我们的例子中覆盖src/App.css。由于src/app.js仍然 improt src/App.css，所以样式同样成为您的应用程序的一部分。您现在可以编辑src/App.scss，同时会生成相应的src/App.css。</p><p>为了能一边编译sass，一边运行我们的前端项目，我们还需要<code>npm-run-all</code>这个工具，这是一个并行运行多个npm脚本的脚手架工具，安装方式也非常简单。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install npm-run-all --save-dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn add npm-run-all --dev</span><br></pre></td></tr></table></figure></p><p>最后，在不使用<code>ejec</code>命令的情况下，更改<code>create-react-app</code>的<code>webpack</code>配置，我们使用<code>react-app-rewired</code>来处理，安装方式如下:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure></p><p>在完成这些步骤之后，我们修改<code>package.json</code>的<code>script</code>内容，让sass一边编译，一边跑着我们的前端项目，实现热更。</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">"build-css": "node-sass src/ -o src/",</span><br><span class="line">"watch-css": "npm run build-css &amp;&amp; node-sass src/ -o src/ --watch --recursive",</span><br><span class="line">"start-js": "node scripts/start.js",</span><br><span class="line">"start": "npm-run-all -p watch-css start-js",</span><br><span class="line">"build": "npm run build-css &amp;&amp; node scripts/build.js",</span><br><span class="line">"test": "node scripts/test.js --env=jsdom"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p><code>scripts</code>的命令如上所述，安装完之后，<code>npm start</code>就可以搞定sass的使用问题了。</p><p>现在运行run npm和npm run build同样构建了Sass文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Sass（英文全称：Syntactically Awesome Stylesheets）是一个最初由Hampton Catlin设计并由Natalie Weizenbaum开发的层叠样式表语言。Sass是一个将脚本解析成CSS的脚本语言，即Sass
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React.js" scheme="http://yoursite.com/tags/React-js/"/>
    
      <category term="Sass" scheme="http://yoursite.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>在Yii2框架中使用Redis</title>
    <link href="http://yoursite.com/2018/03/28/%E5%9C%A8Yii2%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8Redis/"/>
    <id>http://yoursite.com/2018/03/28/在Yii2框架中使用Redis/</id>
    <published>2018-03-28T12:56:16.000Z</published>
    <updated>2018-03-28T12:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>想要在Yii2这个PHP框架中很好的使用redis键值存储，那么首先就要推荐<a href="https://github.com/yiisoft/yii2-redis" target="_blank" rel="noopener">yii2-redis</a>这个官方的<a href="https://github.com/originalix" target="_blank" rel="noopener">Github</a>库。这个库能够很好的帮助我们在Yii2框架中使用redis，它提供缓存，Session以及ActiveRecord模式的支持。</p><h2>安装yii2-redis库</h2><p>推荐使用composer安装yii2-redis库，在你的项目根目录执行</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php composer.phar <span class="keyword">require</span> --prefer-dist yiisoft/yii2-redis:<span class="string">"~2.0.0"</span></span><br></pre></td></tr></table></figure></p><p>或者将</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"yiisoft/yii2-redis": "~2.0.0"</span><br></pre></td></tr></table></figure></p><p>加入你的<code>composer.json</code>文件里，之后运行<code>composer update</code>，墙内真的很慢，耐心等待即可。</p><p>&lt;!--more--&gt;</p><h2>配置redis</h2><p>要正确的使用这个扩展，你必须在你的应用程序的配置文件内，配置<code>Connection</code>类，一般来说，配置文件是<code>config\web.php</code>。</p><p>在你的组件里加入<code>redis</code>项目，如下:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Connection'</span>,</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>如此之后，你便能正常的在yii2框架中使用redis。</p><h2>示例</h2><h3>简单使用</h3><p>我们先来看一段最简单的使用redis的代码:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$redis = Yii::$app-&gt;redis;</span><br><span class="line">$key = <span class="string">'username'</span>;</span><br><span class="line"><span class="keyword">if</span> ($val = $redis-&gt;get($key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'redis'</span> =&gt; $val];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $redis-&gt;set($key, <span class="string">'Leon'</span>);</span><br><span class="line">    $redis-&gt;expire($key, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [<span class="string">'redis'</span> =&gt; <span class="string">'no data'</span>];</span><br></pre></td></tr></table></figure></p><p>没有一行注释，但是就是一目了然是不是。</p><p>寻找<code>username</code>这个key，如果找不到，设置键值存储，并且过期时间是5秒钟。</p><p>这就是一个完整的使用redis的例子。</p><h3>Cache</h3><p>那么接下来，我们来看看怎么样将redis用在缓存上。</p><p>同样的，作为缓存使用，我们需要去配置文件里修改缓存项:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'cache'</span> =&gt; [</span><br><span class="line">        <span class="comment">// 'class' =&gt; 'yii\caching\FileCache',</span></span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Cache'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>如果你没有配置过redis组件，那么还需要在cache下配置redis:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'cache'</span> =&gt; [</span><br><span class="line">        <span class="comment">// 'class' =&gt; 'yii\caching\FileCache',</span></span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Cache'</span>,</span><br><span class="line">        <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>示例代码如下，通俗易懂也就不过多解释了:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$cache = Yii::$app-&gt;cache;</span><br><span class="line">$key = <span class="string">'username'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($cache-&gt;exists($key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'cache'</span> =&gt; $cache-&gt;get($key)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $cache-&gt;set($key, <span class="string">'Leon'</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [<span class="string">'cache'</span> =&gt; <span class="string">'no cache'</span>];</span><br></pre></td></tr></table></figure></p><h3>Session</h3><p>最后是redis用作session。也是要在组件中配置:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'session'</span> =&gt; [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'advanced-frontend'</span>,</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Session'</span></span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>如果没有配置过redis，同样需要配置:</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'session'</span> =&gt; [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'advanced-frontend'</span>,</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Session'</span>,</span><br><span class="line">        <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>示例代码如下：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$session = Yii::$app-&gt;session;</span><br><span class="line">$key = <span class="string">'username'</span>;</span><br><span class="line"><span class="keyword">if</span> ($session-&gt;has($key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'session'</span> =&gt; $session-&gt;get($key)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $session-&gt;set($key, <span class="string">'Leon'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'session'</span> =&gt; <span class="string">'no session'</span>];</span><br></pre></td></tr></table></figure></p><p>在简单的示范下，如何将redis这个高效的工具用好，则是考验大家的能力了。加油吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想要在Yii2这个PHP框架中很好的使用redis键值存储，那么首先就要推荐&lt;a href=&quot;https://github.com/yiisoft/yii2-redis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yii2-redis&lt;/a&gt;这个官方的&lt;
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://yoursite.com/tags/Yii2/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>ES6——箭头函数</title>
    <link href="http://yoursite.com/2018/03/25/ES6%E2%80%94%E2%80%94%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/25/ES6——箭头函数/</id>
    <published>2018-03-25T13:28:13.000Z</published>
    <updated>2018-03-25T13:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6之后，允许使用箭头<code>=&gt;</code>来定义函数。首先我们来总结一下箭头函数存在的意义，之后再来细细的看它的使用方法。</p><p>箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this,arguments,super或者new.target。这些函数表达式最适合用于非方法函数，并且它们不能用作构造函数。</p><p>讲完了箭头函数的意义，那么我们总最基础的示例开始看，先看一个常规语法定义的函数:</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> params + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcName(<span class="number">2</span>);<span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>如果这个函数用箭头函数改写的话，仅仅需要一行代码就够了:</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcName = <span class="function">(<span class="params">params</span>) =&gt;</span> params + <span class="number">2</span>;</span><br><span class="line">funcName(<span class="number">2</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>&lt;!-- more --&gt;</p><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，如果有返回值，就要使用return语句返回。如果表达式是单一的，则可以只用小括号<code>()</code>。例如我上面的例子。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">number1, number2</span>) =&gt;</span> &#123; <span class="keyword">return</span> number1 + number2; &#125;</span><br></pre></td></tr></table></figure></p><p>而箭头函数的参数部分，可以用一个圆括号来代表参数部分。如果有多个参数则用<code>,</code>分隔。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数示例</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure></p><p>总结起来就是:</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; 表达式（单一）</span><br><span class="line"><span class="comment">//相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class="line">(单一参数) =&gt; &#123;函数声明&#125;</span><br><span class="line">单一参数 =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class="line">() =&gt; &#123;函数声明&#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数的一个用处就是简化回调函数。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> materials = [</span><br><span class="line">  <span class="string">'Hydrogen'</span>,</span><br><span class="line">  <span class="string">'Helium'</span>,</span><br><span class="line">  <span class="string">'Lithium'</span>,</span><br><span class="line">  <span class="string">'Beryllium'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是常规写法的话</span></span><br><span class="line">materials.map(<span class="function"><span class="keyword">function</span>(<span class="params">material</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> material.length; </span><br><span class="line">&#125;); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 而使用箭头函数简化的话</span></span><br><span class="line">materials.map(<span class="function"><span class="params">material</span> =&gt;</span> material.length); <span class="comment">// [8, 6, 7, 9]</span></span><br></pre></td></tr></table></figure></p><p>可以看到，如果用箭头函数，代码简化到了一行，并且清晰醒目。</p><p>在箭头函数出现之前，每个新定义的函数都有它自己的this值。而箭头函数体内的this值，就是定义时所在的对象，而不是使用时所在的对象。</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'id'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">50</span> &#125;);</span><br></pre></td></tr></table></figure></p><p>上面的代码中，<code>setTimeout</code>的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时的，而它的真正执行要等到100毫秒之后，如果是普通函数，执行时this应该指向全局函数window，这时应该输出21。但是箭头函数导致this总是指向函数定义生效时所在的对象，所以输出的是50。</p><p>通过call或者apply也可以调用箭头函数。</p><p>由于this已经在词法层面完成了绑定，通过call()或apply()方法调用一个函数时，只是传入了参数而已，对this并没有什么影响：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> adder = &#123;</span><br><span class="line">  base : <span class="number">1</span>,</span><br><span class="line">    </span><br><span class="line">  add : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v + <span class="keyword">this</span>.base;</span><br><span class="line">    <span class="keyword">return</span> f(a);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  addThruCall: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v + <span class="keyword">this</span>.base;</span><br><span class="line">    <span class="keyword">var</span> b = &#123;</span><br><span class="line">      base : <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> f.call(b, a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(adder.add(<span class="number">1</span>));         <span class="comment">// 输出 2</span></span><br><span class="line"><span class="built_in">console</span>.log(adder.addThruCall(<span class="number">1</span>)); <span class="comment">// 仍然输出 2（而不是3 ——译者注）</span></span><br></pre></td></tr></table></figure></p><p>箭头函数的用法还有很多种，我只是记录下初学的东西，还有很多深入用法的要在日常的编码中去思考。建议参考阮一峰老师的ES6的这本书。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6之后，允许使用箭头&lt;code&gt;=&amp;gt;&lt;/code&gt;来定义函数。首先我们来总结一下箭头函数存在的意义，之后再来细细的看它的使用方法。&lt;/p&gt;
&lt;p&gt;箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this,arguments,super或者new.target
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
