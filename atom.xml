<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Originalee的博客</title>
  <subtitle>打篮球的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-16T23:14:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Originalee</name>
    <email>xiao.liunit@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构——最短路径Dijkstra算法(C++和Java实现)</title>
    <link href="http://yoursite.com/2017/10/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Dijkstra%E7%AE%97%E6%B3%95(C++%E5%92%8CJava%E5%AE%9E%E7%8E%B0)/"/>
    <id>http://yoursite.com/2017/10/16/数据结构——最短路径Dijkstra算法(C++和Java实现)/</id>
    <published>2017-10-16T13:52:48.000Z</published>
    <updated>2017-10-16T23:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇博文里，我记录了最小生成树的算法实现，而在这篇里，我们来讲讲查找最短路径的算法，Dijkstra算法。</p>
<p>Dijkstra’s algorithm常用于路由算法或者作为其他图算法的一个子模块。距离来说，如果我们将图的顶点理解为每个城市，而边上的权重表示城市间开车行径的路径，该算法可以用来找到两个城市之间的最短路径。</p>
<a id="more"></a>
<p>Dijkstra算法是通过为每个顶点v保留目前为止所找到的从s到v的最短路径来工作的。初始时，原点s的路径权重被赋为0(d[s] = 0)。若对于顶点s存在能直接到达的边，则比较路径的长度，如果路径更短则更新存储的值，当算法结束时，d[v]中存储的便是从s到v的最短路径，或者如果路径不存在的话则是无法访问，用marked数组来记录从s到点v是否存在路径。下面我们来看Dijkstra算法的代码实现，首先是C++版本：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IndexMinHeap.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// Dijkstra算法求最短路径</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Graph, <span class="keyword">typename</span> Weight&gt;</div><div class="line"><span class="keyword">class</span> Dijkstra &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Graph &amp;G;                        <span class="comment">// 图的引用</span></div><div class="line">    <span class="keyword">int</span> s;                           <span class="comment">// 起始点</span></div><div class="line">    Weight *distTo;                  <span class="comment">// distTo[i]存储从起始点s到i的最短路径长度</span></div><div class="line">    <span class="keyword">bool</span> *marked;                    <span class="comment">// 标记数组，在算法运行过程中标记节点i是否被访问</span></div><div class="line">    <span class="built_in">vector</span>&lt;Edge&lt;Weight&gt; *&gt; from;     <span class="comment">// from[i]记录最短路径中，到达i点的边是哪一条</span></div><div class="line">                                     <span class="comment">// 可以用来恢复整个最短路径</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数，使用Dijkstra算法求最短路径</span></div><div class="line">    Dijkstra(Graph &amp;graph, <span class="keyword">int</span> s):G(graph) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 算法初始化</span></div><div class="line">        assert( s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.V() );</div><div class="line">        <span class="keyword">this</span>-&gt;s = s;</div><div class="line">        distTo = <span class="keyword">new</span> Weight[G.V()];</div><div class="line">        marked = <span class="keyword">new</span> <span class="keyword">bool</span>[G.V()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            distTo[i] = Weight();</div><div class="line">            marked[i] = <span class="literal">false</span>;</div><div class="line">            from.push_back(<span class="literal">NULL</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 使用索引堆记录当前找到的到达每个顶点的最短距离</span></div><div class="line">        IndexMinHeap&lt;Weight&gt; ipq(G.V());</div><div class="line"></div><div class="line">        <span class="comment">// 对于起始点s进行初始化</span></div><div class="line">        distTo[s] = Weight();</div><div class="line">        from[s] = <span class="keyword">new</span> Edge&lt;Weight&gt;(s, s, <span class="number">0</span>);</div><div class="line">        ipq.insert(s, distTo[s]);</div><div class="line">        marked[s] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span>( !ipq.isEmpty() ) &#123;</div><div class="line">            <span class="keyword">int</span> v = ipq.extractMinIndex();</div><div class="line">            <span class="comment">// distTo[v] 就是s到v的最短距离</span></div><div class="line">            marked[v] = <span class="literal">true</span>;</div><div class="line">            <span class="comment">// 对v的所有相邻节点进行更新</span></div><div class="line">            <span class="keyword">typename</span> Graph::<span class="function">adjIterator <span class="title">adj</span><span class="params">(G, v)</span></span>;</div><div class="line">            <span class="keyword">for</span> ( Edge&lt;Weight&gt; *e = adj.begin(); !adj.end(); e = adj.next() ) &#123;</div><div class="line">                <span class="keyword">int</span> w = e-&gt;other(v);</div><div class="line">                <span class="comment">// 如果从s点到w点的最短路径还没有找到</span></div><div class="line">                <span class="keyword">if</span> ( !marked[w] ) &#123;</div><div class="line">                    <span class="comment">// 如果w点以前没有访问过</span></div><div class="line">                    <span class="comment">// 或者访问过，但是通过当前的v点到w点距离更短，则进行更新</span></div><div class="line">                    <span class="keyword">if</span> ( from[w] == <span class="literal">NULL</span> || distTo[v] + e-&gt;wt() &lt; distTo[w] ) &#123;</div><div class="line">                        distTo[w] = distTo[v] + e-&gt;wt();</div><div class="line">                        from[w] = e;</div><div class="line">                        <span class="keyword">if</span> ( ipq.contain(w) )</div><div class="line">                            ipq.change( w, distTo[w] );</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            ipq.insert( w, distTo[w] );</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 析构函数</span></div><div class="line">    ~Dijkstra() &#123;</div><div class="line">        <span class="keyword">delete</span>[] distTo;</div><div class="line">        <span class="keyword">delete</span>[] marked;</div><div class="line">        <span class="keyword">delete</span> from[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回从s点到w点的最短路径长度</span></div><div class="line">    <span class="function">Weight <span class="title">shortestPathTo</span><span class="params">( <span class="keyword">int</span> w )</span> </span>&#123;</div><div class="line">        assert( w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V() );</div><div class="line">        assert( hasPathTo(w) );</div><div class="line">        <span class="keyword">return</span> distTo[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断从s点到w点是否联通</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathTo</span><span class="params">( <span class="keyword">int</span> w )</span> </span>&#123;</div><div class="line">        assert( w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V() );</div><div class="line">        <span class="keyword">return</span> marked[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 寻找从s到w的最短路径，将整个路径经过的边存放在vec中</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shortestPath</span><span class="params">( <span class="keyword">int</span> w, <span class="built_in">vector</span>&lt; Edge&lt;Weight&gt; &gt; &amp;vec )</span> </span>&#123;</div><div class="line">        assert( w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V() );</div><div class="line">        assert( hasPathTo(w) );</div><div class="line"></div><div class="line">        <span class="comment">// 通过from数组逆向查找到从s到w的路径，存放在栈中</span></div><div class="line">        <span class="built_in">stack</span>&lt;Edge&lt;Weight&gt;*&gt; s;</div><div class="line">        Edge&lt;Weight&gt; *e = from[w];</div><div class="line">        <span class="keyword">while</span>(e-&gt;v() != <span class="keyword">this</span>-&gt;s) &#123;</div><div class="line">            s.push(e);</div><div class="line">            e = from[e-&gt;v()];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        s.push(e);</div><div class="line"></div><div class="line">        <span class="comment">// 从栈中依次取出元素，获得顺序的从s到w的路径</span></div><div class="line">        <span class="keyword">while</span>( !s.empty() ) &#123;</div><div class="line">            e = s.top();</div><div class="line">            vec.push_back(*e);</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印从s点到w点的路径</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPath</span><span class="params">( <span class="keyword">int</span> w )</span> </span>&#123;</div><div class="line">        assert( w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V() );</div><div class="line">        assert( hasPathTo(w) );</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt; Edge&lt;Weight&gt; &gt; vec;</div><div class="line">        shortestPath( w, vec );</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i++) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; vec[i].v() &lt;&lt; <span class="string">" -&gt; "</span>;</div><div class="line">            <span class="keyword">if</span> ( i == vec.size() - <span class="number">1</span> ) &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; vec[i].w() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>之后是java版本的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dijkstra算法求最短路径</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span>&lt;<span class="title">Weight</span> <span class="keyword">extends</span> <span class="title">Number</span> &amp; <span class="title">Comparable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WeightedGraph G;      <span class="comment">// 图的引用</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> s;                <span class="comment">// 起始点</span></div><div class="line">    <span class="keyword">private</span> Number[] distTo;      <span class="comment">// distTo[i]存储从起始点s到点i的最短路径长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] marked;     <span class="comment">// 标记数组，在算法运行过程中标记节点是否被访问</span></div><div class="line">    <span class="keyword">private</span> Edge&lt;Weight&gt;[] from;  <span class="comment">// 可以用来恢复整个最短路径</span></div><div class="line"></div><div class="line">    <span class="comment">// 构造函数，使用Dijkstra算法求最短路径</span></div><div class="line">    Dijkstra(WeightedGraph graph, <span class="keyword">int</span> s) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 算法初始化</span></div><div class="line">        <span class="keyword">this</span>.G = graph;</div><div class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.V();</div><div class="line">        <span class="keyword">this</span>.s = s;</div><div class="line">        distTo = <span class="keyword">new</span> Number[G.V()];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            distTo[i] = <span class="number">0.0</span>;</div><div class="line">            marked[i] = <span class="keyword">false</span>;</div><div class="line">            from[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 使用索引堆记录当前找到的每个到达顶点的最短距离                                                                     iikkkkkk</span></div><div class="line">        IndexMinHeap&lt;Weight&gt; ipq = <span class="keyword">new</span> IndexMinHeap&lt;Weight&gt;(G.V());</div><div class="line"></div><div class="line">        <span class="comment">// 对于起始点s进行初始化</span></div><div class="line">        distTo[s] = <span class="number">0.0</span>;</div><div class="line">        from[s] = <span class="keyword">new</span> Edge&lt;Weight&gt;(s, s, (Weight)(Number)(<span class="number">0.0</span>));</div><div class="line">        ipq.insert(s, (Weight) distTo[s]);</div><div class="line">        marked[s] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (!ipq.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> v = ipq.extractMinIndex();</div><div class="line"></div><div class="line">            <span class="comment">// distTo[v]就是s到v的最短距离</span></div><div class="line">            marked[v] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 对v的所有相邻节点进行更新</span></div><div class="line">            <span class="keyword">for</span> (Object item : G.adj(v)) &#123;</div><div class="line">                Edge&lt;Weight&gt; e = (Edge&lt;Weight&gt;) item;</div><div class="line">                <span class="keyword">int</span> w = e.other(v);</div><div class="line"></div><div class="line">                <span class="comment">// 如果s点到w点的最短路径还没有找到</span></div><div class="line">                <span class="keyword">if</span> (!marked[w]) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// 如果w点以前没有访问过</span></div><div class="line">                    <span class="comment">// 或者访问过，但是通过当前v点到w点的距离g更短，则进行更新</span></div><div class="line">                    <span class="keyword">if</span> (from[w] == <span class="keyword">null</span> || distTo[v].doubleValue() + e.wt().doubleValue() &lt; distTo[w].doubleValue()) &#123;</div><div class="line">                        distTo[w] = distTo[v].doubleValue() + e.wt().doubleValue();</div><div class="line">                        from[w] = e;</div><div class="line">                        <span class="keyword">if</span> ( ipq.contain(w) ) &#123;</div><div class="line">                            ipq.change(w, (Weight) distTo[w]);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            ipq.insert(w, (Weight) distTo[w]);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回从s点到w点的最短路径长度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Number <span class="title">shortestPathTo</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V();</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPathTo</span><span class="params">(w)</span></span>;</div><div class="line">        <span class="keyword">return</span> distTo[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断从s点到w点是否联通</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathTo</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V();</div><div class="line">        <span class="keyword">return</span> marked[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 寻找从s点到w点的最短路径，将整个路径存放在vec中</span></div><div class="line">    <span class="keyword">private</span> Vector&lt;Edge&lt;Weight&gt;&gt; shortestPath(<span class="keyword">int</span> w) &#123;</div><div class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V();</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPathTo</span><span class="params">(w)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// 通过from数组逆向查找从s到w的路径，存放到栈中</span></div><div class="line">        Stack&lt;Edge&lt;Weight&gt;&gt; s = <span class="keyword">new</span> Stack&lt;Edge&lt;Weight&gt;&gt;();</div><div class="line">        Edge&lt;Weight&gt; e = from[w];</div><div class="line">        <span class="keyword">while</span> (e.v() != <span class="keyword">this</span>.s) &#123;</div><div class="line">            s.push(e);</div><div class="line">            e = from[e.v()];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        s.push(e);</div><div class="line"></div><div class="line">        <span class="comment">// 从栈中依次取出元素，获得顺序的从s到w的路径</span></div><div class="line">        Vector&lt;Edge&lt;Weight&gt;&gt; res = <span class="keyword">new</span> Vector&lt;Edge&lt;Weight&gt;&gt;();</div><div class="line">        <span class="keyword">while</span> (!s.isEmpty()) &#123;</div><div class="line">            e = s.pop();</div><div class="line">            res.add(e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印出从s点到w点的路径</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPath</span><span class="params">(<span class="keyword">int</span> w)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V();</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">hasPathTo</span><span class="params">(w)</span></span>;</div><div class="line"></div><div class="line">        Vector&lt;Edge&lt;Weight&gt;&gt; path =  shortestPath(w);</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; path.size() ; i ++ )&#123;</div><div class="line">            System.out.print( path.elementAt(i).v() + <span class="string">" -&gt; "</span>);</div><div class="line">            <span class="keyword">if</span>( i == path.size()-<span class="number">1</span> )</div><div class="line">                System.out.println(path.elementAt(i).w());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇博文里，我记录了最小生成树的算法实现，而在这篇里，我们来讲讲查找最短路径的算法，Dijkstra算法。&lt;/p&gt;
&lt;p&gt;Dijkstra’s algorithm常用于路由算法或者作为其他图算法的一个子模块。距离来说，如果我们将图的顶点理解为每个城市，而边上的权重表示城市间开车行径的路径，该算法可以用来找到两个城市之间的最短路径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——最小生成树(C++和Java实现)</title>
    <link href="http://yoursite.com/2017/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91(C++%E5%92%8CJava%E5%AE%9E%E7%8E%B0)/"/>
    <id>http://yoursite.com/2017/10/09/数据结构——最小生成树(C++和Java实现)/</id>
    <published>2017-10-09T13:30:33.000Z</published>
    <updated>2017-10-09T13:32:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>快要一整个月没有更新博客了，之前的几周每周都想着要写，但是最后时间还是排不开，最近的状态是一直在写代码，一直在怼工作的需求，顺便刷刷算法题，国庆则是没心没肺的玩了七八天，时间这么一分摊，写博客的时间总是挤不出来，罪过罪过。</p>
<p>其实数据结构的系列一直也没有写到头，之后还打算写一个<code>Leetcode</code>刷题系列，最近刷的题越多，越是感叹某些题目的解法精妙。</p>
<p>今天就接着上个月的来讲讲最小生成树的算法吧。</p>
<p>&lt;!--more--&gt;</p>
<p>最小生成树是一副连通加权无向图中一棵权值最小的生成树。最小生成树其实是最小权重生成树的简称。</p>
<p>一个连通图可能有多个生成树。当图中的边具有权值时，总会有一个生成树的边的权值之和小于或等于其他生成树的边的权值之和。广义上而言，对于非联通无向图来说，它的每一连通分量同样有最小生成树。</p>
<p>以有线电视电缆的架设为例，若只能沿着街道布线，则以街道为边，而路口为顶点，其中必然有意最小的生成树能使布线成本最低。</p>
<p>简单点说有几个城市你要设计一个线路，这个线路能走完所有的这几个城市，而且路程最短，这个线路就是最小生成树的含义。</p>
<p>所以从上面的例子可以看出来，最小生成树这个算法，对于解决生活实际问题，是一个很重要的存在。下面我们看看最小生成树的算法：</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IndexMinHeap.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用优化的Prim算法求图的最小生成树</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Graph, <span class="keyword">typename</span> Weight&gt;</div><div class="line"><span class="keyword">class</span> PrimMST &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Graph &amp;G;                         <span class="comment">// 图的引用</span></div><div class="line">    IndexMinHeap&lt;Weight&gt; ipq;         <span class="comment">// 最小索引堆，算法辅助数据结构</span></div><div class="line">    <span class="built_in">vector</span>&lt; Edge&lt;Weight&gt;* &gt; edgeTo;   <span class="comment">// 访问的点所对应的边，算法辅助数据结构</span></div><div class="line">    <span class="keyword">bool</span>* marked;                     <span class="comment">// 标记数组，在算法运行过程中标记节点i是否被访问</span></div><div class="line">    <span class="built_in">vector</span>&lt; Edge&lt;Weight&gt; &gt; mst;       <span class="comment">// 最小生成树所包含的所有边</span></div><div class="line">    Weight mstWeight;                 <span class="comment">// 最小生成树的权值</span></div><div class="line"></div><div class="line">    <span class="comment">// 访问节点v</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">( <span class="keyword">int</span> v )</span> </span>&#123;</div><div class="line">        assert( !marked[v] );</div><div class="line">        marked[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">typename</span> Graph::<span class="function">adjIterator <span class="title">adj</span><span class="params">(G, v)</span></span>;</div><div class="line">        <span class="keyword">for</span> (Edge&lt;Weight&gt;* e = adj.begin(); !adj.end(); e = adj.next()) &#123;</div><div class="line">            <span class="keyword">int</span> w = e-&gt;other(v);</div><div class="line">            <span class="comment">// 如果另一个端点未被访问</span></div><div class="line">            <span class="keyword">if</span> ( !marked[w] ) &#123;</div><div class="line">                <span class="comment">// 如果从没有考虑过这个端点，直接将这个端点和与之相连的边加入索引堆</span></div><div class="line">                <span class="keyword">if</span> ( !edgeTo[w] ) &#123;</div><div class="line">                    edgeTo[w] = e;</div><div class="line">                    ipq.insert(w, e-&gt;wt());</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果曾经考虑过这个端点，但现在的边比之前的边更短，则进行替换</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( e-&gt;wt() &lt; edgeTo[w]-&gt;wt() ) &#123;</div><div class="line">                    edgeTo[w] = e;</div><div class="line">                    ipq.change(w, e-&gt;wt());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数，使用Prim算法求图的最小生成树</span></div><div class="line">    PrimMST(Graph &amp;graph):G(graph), ipq(IndexMinHeap&lt;<span class="keyword">double</span>&gt;(graph.V())) &#123;</div><div class="line"></div><div class="line">        assert( graph.E() &gt;= <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="comment">// 算法初始化</span></div><div class="line">        marked = <span class="keyword">new</span> <span class="keyword">bool</span>[G.V()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            marked[i] = <span class="literal">false</span>;</div><div class="line">            edgeTo.push_back(<span class="literal">NULL</span>);</div><div class="line">        &#125;</div><div class="line">        mst.clear();</div><div class="line"></div><div class="line">        <span class="comment">// Prim</span></div><div class="line">        visit(<span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span>( !ipq.isEmpty() ) &#123;</div><div class="line">            <span class="comment">// 使用最小索引堆找出已经访问的边中权值最小的边</span></div><div class="line">            <span class="comment">// 最小索引堆中存储的是点的索引，通过点的索引找到相对应的边</span></div><div class="line">            <span class="keyword">int</span> v = ipq.extractMinIndex();</div><div class="line">            assert ( edgeTo[v] );</div><div class="line">            mst.push_back( *edgeTo[v] );</div><div class="line">            visit( v );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mstWeight = mst[<span class="number">0</span>].wt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mst.size(); i++) &#123;</div><div class="line">            mstWeight += mst[i].wt();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~PrimMST() &#123;</div><div class="line">        <span class="keyword">delete</span>[] marked;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt; Edge&lt;Weight&gt; &gt; mstEdges() &#123;</div><div class="line">        <span class="keyword">return</span> mst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Weight <span class="title">result</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mstWeight;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面的是C++版本的最小生成树Prim MST算法，其中我引进了<code>Edge</code>这个类的数据结构：</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EDGE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EDGE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 边</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Weight&gt;</div><div class="line"><span class="keyword">class</span> Edge &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> a, b;       <span class="comment">// 边的两个端点</span></div><div class="line">    Weight weight;  <span class="comment">// 边的权值</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数</span></div><div class="line">    Edge(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Weight weight) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;a = a;</div><div class="line">        <span class="keyword">this</span>-&gt;b = b;</div><div class="line">        <span class="keyword">this</span>-&gt;weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 空的构造函数，所有的成员变量都取默认值</span></div><div class="line">    Edge() &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 析构函数</span></div><div class="line">    ~Edge() &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">v</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125;  <span class="comment">// 返回第一个顶点</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">w</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> b; &#125;  <span class="comment">// 返回第二个顶点</span></div><div class="line">    <span class="function">Weight <span class="title">wt</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> weight; &#125;  <span class="comment">// 返回权值</span></div><div class="line"></div><div class="line">    <span class="comment">// 给定一个顶点，返回另一个顶点</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">other</span><span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</div><div class="line">        assert( x == a || x == b);</div><div class="line">        <span class="keyword">return</span> x == a ? b : a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 输出边的信息</span></div><div class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Edge &amp;e) &#123;</div><div class="line">        os &lt;&lt; e.a &lt;&lt; <span class="string">"-"</span> &lt;&lt; e.b &lt;&lt; <span class="string">": "</span> &lt;&lt; e.weight;</div><div class="line">        <span class="keyword">return</span> os;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 边的大小比较，是对边的权值的大小比较</span></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Edge&lt;Weight&gt;&amp; e) &#123;</div><div class="line">        <span class="keyword">return</span> weight &lt; e.wt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(Edge&lt;Weight&gt;&amp; e) &#123;</div><div class="line">        <span class="keyword">return</span> weight &lt;= e.wt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(Edge&lt;Weight&gt;&amp; e) &#123;</div><div class="line">        <span class="keyword">return</span> weight &gt; e.wt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(Edge&lt;Weight&gt;&amp; e) &#123;</div><div class="line">        <span class="keyword">return</span> weight &gt;= e.wt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(Edge&lt;Weight&gt;&amp; e) &#123;</div><div class="line">        <span class="keyword">return</span> weight == e.wt();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//EDGE_H</span></span></div></pre></td></tr></table></figure></p>
<p>接下来放上<code>Java</code>版本:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimMST</span>&lt;<span class="title">Weight</span> <span class="keyword">extends</span> <span class="title">Number</span> &amp; <span class="title">Comparable</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> WeightedGraph&lt;Weight&gt; G;        <span class="comment">// 图的引用</span></div><div class="line">    <span class="keyword">private</span> IndexMinHeap&lt;Weight&gt; ipq;       <span class="comment">// 最小索引堆，算法辅助数据结构</span></div><div class="line">    <span class="keyword">private</span> Edge&lt;Weight&gt;[] edgeTo;          <span class="comment">// 访问的点所对应的边，算法辅助数据结构</span></div><div class="line">    <span class="keyword">private</span> Vector&lt;Edge&lt;Weight&gt;&gt; mst;       <span class="comment">// 标记数组，在算法运行过程中标记节点i是否被访问</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] marked;               <span class="comment">// 最小生成树所包含的所有边</span></div><div class="line">    <span class="keyword">private</span> Number mstWeight;               <span class="comment">// 最小生成树的权值</span></div><div class="line"></div><div class="line">    <span class="comment">// 构造函数，使用Prim算法求图的最小生成树</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimMST</span><span class="params">(WeightedGraph graph)</span> </span>&#123;</div><div class="line">        G = graph;</div><div class="line">        <span class="keyword">assert</span> graph.E() &gt;= <span class="number">1</span>;</div><div class="line">        ipq = <span class="keyword">new</span> IndexMinHeap&lt;Weight&gt;(graph.V());</div><div class="line"></div><div class="line">        <span class="comment">// 算法初始化</span></div><div class="line">        marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.V()];</div><div class="line">        edgeTo = <span class="keyword">new</span> Edge[G.V()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            marked[i] = <span class="keyword">false</span>;</div><div class="line">            edgeTo[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        mst = <span class="keyword">new</span> Vector&lt;Edge&lt;Weight&gt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Prim</span></div><div class="line">        visit(<span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span> (!ipq.isEmpty()) &#123;</div><div class="line">            <span class="comment">// 使用最小索引堆找出已经访问的边中权值最小的边</span></div><div class="line">            <span class="comment">// 最小索引堆中存储的是点的索引，通过点的索引找到相对应的边</span></div><div class="line">            <span class="keyword">int</span> v = ipq.extractMinIndex();</div><div class="line">            <span class="keyword">assert</span> (edgeTo[v] != <span class="keyword">null</span>);</div><div class="line">            mst.add(edgeTo[v]);</div><div class="line">            visit(v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 计算最小生成树的权值</span></div><div class="line">        mstWeight = mst.elementAt(<span class="number">0</span>).wt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mst.size(); i++) &#123;</div><div class="line">            mstWeight = mstWeight.doubleValue() + mst.elementAt(i).wt().doubleValue();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 访问节点v</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (!marked[v]);</div><div class="line">        marked[v] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 将和节点v相连接的未访问的另一端点，和与之相连接的边，放入最小堆中</span></div><div class="line">        <span class="keyword">for</span> (Object item : G.adj(v)) &#123;</div><div class="line">            Edge&lt;Weight&gt; e = (Edge&lt;Weight&gt;)item;</div><div class="line">            <span class="keyword">int</span> w = e.other(v);</div><div class="line">            <span class="comment">// 如果边的另一个端点未被访问</span></div><div class="line">            <span class="keyword">if</span> (!marked[w]) &#123;</div><div class="line">                <span class="comment">// 如果从没有考虑过这个端点，直接将这个端点和与之相连接的边加入索引堆</span></div><div class="line">                <span class="keyword">if</span> (edgeTo[w] == <span class="keyword">null</span>) &#123;</div><div class="line">                    edgeTo[w] = e;</div><div class="line">                    ipq.insert(w, e.wt());</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果曾经考虑过这个端点，但现在的边比之前考虑的边更短，则进行替换</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e.wt().compareTo(edgeTo[w].wt()) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    edgeTo[w] = e;</div><div class="line">                    ipq.change(w, e.wt());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回最小生成树的边</span></div><div class="line">    Vector&lt;Edge&lt;Weight&gt;&gt; mstEdges() &#123;</div><div class="line">        <span class="keyword">return</span> mst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回最小生成树的权值</span></div><div class="line">    <span class="function">Number <span class="title">result</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mstWeight;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其中Edge的数据结构如下:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 边</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> &lt;<span class="title">Weight</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&lt;<span class="title">Weight</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;          <span class="comment">// 边的两个端点</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</div><div class="line">    <span class="keyword">private</span> Weight weight;  <span class="comment">// 边的权值</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Weight weight)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.a = a;</div><div class="line">        <span class="keyword">this</span>.b = b;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(Edge&lt;Weight&gt; e)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.a = e.a;</div><div class="line">        <span class="keyword">this</span>.b = e.b;</div><div class="line">        <span class="keyword">this</span>.weight = e.weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">v</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;  <span class="comment">// 返回第一个顶点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">    &#125;  <span class="comment">// 返回第二个顶点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Weight <span class="title">wt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125; <span class="comment">// 返回权值</span></div><div class="line"></div><div class="line">    <span class="comment">// 给定一个顶点，返回另一个顶点</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">other</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (x == a || x == b);</div><div class="line">        <span class="keyword">return</span> x == a ? b : a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 输出边的信息</div><div class="line">     * <span class="doctag">@return</span> String</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span> + a + <span class="string">"-"</span> + b + <span class="string">": "</span> + weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 边之间的比较</div><div class="line">     * <span class="doctag">@param</span> that 另一个边</div><div class="line">     * <span class="doctag">@return</span> Int</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge that)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (weight.compareTo(that.wt()) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weight.compareTo(that.wt()) &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> +<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后只要找到txt格式的测试用例，就能很轻易的测试出我们的最小生成树是否合格, 并且能很清晰的打印出最小成成树的路径，具体的测试用例可以去我的Github里找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快要一整个月没有更新博客了，之前的几周每周都想着要写，但是最后时间还是排不开，最近的状态是一直在写代码，一直在怼工作的需求，顺便刷刷算法题，国庆则是没心没肺的玩了七八天，时间这么一分摊，写博客的时间总是挤不出来，罪过罪过。&lt;/p&gt;
&lt;p&gt;其实数据结构的系列一直也没有写到头，
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——无权图的路径问题(C++和java实现)</title>
    <link href="http://yoursite.com/2017/09/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%97%A0%E6%9D%83%E5%9B%BE%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98(C++%E5%92%8Cjava%E5%AE%9E%E7%8E%B0)/"/>
    <id>http://yoursite.com/2017/09/11/数据结构——无权图的路径问题(C++和java实现)/</id>
    <published>2017-09-11T06:20:32.000Z</published>
    <updated>2017-09-11T06:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>好像又是接近半个月没有更新，这半个月忙着结婚的各项事情，本来预计的学习任务也拖拖拉拉，进度缓慢。吐槽一句，拍婚纱照真的是最非常非常累的一件事情，不想再有下次了。</p>
<p>好吧，言归正传，今天就在这周缓慢的学习进度中，抽取出来一个比较有代表性的知识点，记录一下吧。</p>
<p>首先，首次接触图这个类型的数据结构，我们先来看一下图的定义，了解一下到底什么是图。</p>
<p>图是由顶点的有穷非空集合和顶点之间的边的集合组成，通常表示为:G(V,E), 其中G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p>
<p>接下来我们把图的定义与线性表定义的进行一下对比，让我们来更好的体会一下图的各种定义与其他数据结构的差异:</p>
<ul>
<li>线性表中，我们把数据元素叫做元素，树种将数据元素叫结点，在图中的数据元素，我们则称之为顶点。</li>
<li>线性表中没有数据元素，称为空表。树种可以没有结点，叫做空树。但是在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调了顶点集合V是有穷非空的。</li>
<li>线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li>
</ul>
<p>图的定义我们就暂时讲到这里，更细致的定义希望大家自己在网络或者书籍中获取资料，毕竟我写的再多，也不如教科书详尽，今天我们就来讲一个图的应用，关于路径查找的问题。在这里我想先说明，我们的路径查找是一种针对无向图的路径查找，比如给出起始点A，查询顶点A至顶点B是否有路径，若是有路径，则打印出A至B的路径。而这个路径，我们寻找的不一定是最短路径。</p>
<p>其实分析这个问题就可以知道，这是对图的深度优先遍历(Depth-First-Search 简称DFS)的一个应用，若是我们能实现了图的深度优先遍历，那么查找路径的问题也就迎刃而解。</p>
<p>接下来就先给出C++的代码，来展示解决查询路径问题的思路：</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 路径查询</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Graph&gt;</div><div class="line"><span class="keyword">class</span> Path &#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Graph &amp;G; <span class="comment">// 图的引用</span></div><div class="line">    <span class="keyword">int</span> s;    <span class="comment">// 起始点</span></div><div class="line">    <span class="keyword">bool</span>* visited; <span class="comment">// 记录dfs的过程中节点是否被访问</span></div><div class="line">    <span class="keyword">int</span>* from; <span class="comment">// 记录路径，from[i]表示查找的路径上i的上一个节点</span></div><div class="line"></div><div class="line">    <span class="comment">// 图的深度优先遍历</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">( <span class="keyword">int</span> v )</span> </span>&#123;</div><div class="line">        visited[v] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">typename</span> Graph::<span class="function">adjIterator <span class="title">adj</span><span class="params">(G, v)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = adj.begin(); !adj.end(); i = adj.next()) &#123;</div><div class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</div><div class="line">                from[i] = v;</div><div class="line">                dfs(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数、寻路算法、寻找图graph从s点到其他点的路径</span></div><div class="line">    Path(Graph &amp;graph, <span class="keyword">int</span> s): G(graph) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 算法初始化</span></div><div class="line">        assert( s &gt;= <span class="number">0</span> &amp;&amp; s &lt; G.V() );</div><div class="line"></div><div class="line">        visited = <span class="keyword">new</span> <span class="keyword">bool</span>[G.V()];</div><div class="line">        from = <span class="keyword">new</span> <span class="keyword">int</span>[G.V()];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            visited[i] = <span class="literal">false</span>;</div><div class="line">            from[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>-&gt;s = s;</div><div class="line"></div><div class="line">        <span class="comment">// 寻路算法</span></div><div class="line">        dfs(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 析构函数</span></div><div class="line">    ~Path() &#123;</div><div class="line">        <span class="keyword">delete</span>[] visited;</div><div class="line">        <span class="keyword">delete</span>[] from;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 查询从s点到w点是否有路径</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPath</span><span class="params">( <span class="keyword">int</span> w )</span> </span>&#123;</div><div class="line">        assert( w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V() );</div><div class="line">        <span class="keyword">return</span> visited[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 查询s点到w点的路径，存放在vec中</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">path</span><span class="params">( <span class="keyword">int</span> w, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec )</span> </span>&#123;</div><div class="line">        assert( hasPath(w) );</div><div class="line"></div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</div><div class="line">        <span class="comment">// 通过from数组逆向查找到从s到w的路径，存放在栈中</span></div><div class="line">        <span class="keyword">int</span> p = w;</div><div class="line">        <span class="keyword">while</span> (p != <span class="number">-1</span>) &#123;</div><div class="line">            <span class="built_in">stack</span>.push(p);</div><div class="line">            p = from[p];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从栈中依次取出元素，获得顺序从s到w的路径</span></div><div class="line">        vec.clear();</div><div class="line">        <span class="keyword">while</span> ( !<span class="built_in">stack</span>.empty() ) &#123;</div><div class="line">            vec.push_back( <span class="built_in">stack</span>.top() );</div><div class="line">            <span class="built_in">stack</span>.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印从s点到w点的路径</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPath</span><span class="params">( <span class="keyword">int</span> w )</span> </span>&#123; </div><div class="line">        assert( hasPath(w) );</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">        path(w, vec);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i++) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; vec[i];</div><div class="line">            <span class="keyword">if</span> (i == vec.size() - <span class="number">1</span>)</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">" -&gt; "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>
通过上面的代码可以得知，我们首先在构造函数中传入我们的图数据结构graph，以及我们标记的起始点S。而通过<code>showPath()</code>函数我们能够展示起始点S至任意点的路径，测试代码就如下所示:</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> filename = <span class="string">"testG2.txt"</span>;</div><div class="line">    SparseGraph g = SparseGraph(<span class="number">7</span>, <span class="literal">false</span>);</div><div class="line">    ReadGraph&lt;SparseGraph&gt; readGraph(g, filename);</div><div class="line">    g.show();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 比较使用深度优先遍历和广度优先遍历获得路径的不同</span></div><div class="line">    <span class="comment">// 广度优先遍历获得的是无权图的最短路径</span></div><div class="line">    Path&lt;SparseGraph&gt; dfs(g, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"DFS : "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    dfs.showPath(<span class="number">6</span>);</div><div class="line"></div><div class="line">    ShortestPath&lt;SparseGraph&gt; bfs(g, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BFS : "</span>;</div><div class="line">    bfs.showPath(<span class="number">6</span>);    </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而Java版本的代码也是类似，只是某些函数的返回值变化了一点，代码如下:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Path</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Graph G;  <span class="comment">// 图的引用</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> s;  <span class="comment">// 起始点</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;  <span class="comment">// 记录dfs的过程中节点是否被访问</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] from;  <span class="comment">// 记录路径，from[i]表示查找的路径上i的上一个节点</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造函数，寻路算法，寻找图graph从点s到其他点的路径</div><div class="line">     * <span class="doctag">@param</span> graph graph</div><div class="line">     * <span class="doctag">@param</span> s 寻路起始点s</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Path</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">0</span> &amp;&amp; s &lt; graph.V();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.G = graph;</div><div class="line">        <span class="keyword">this</span>.s = s;</div><div class="line"></div><div class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.V()];</div><div class="line">        from = <span class="keyword">new</span> <span class="keyword">int</span>[G.V()];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.V(); i++) &#123;</div><div class="line">            visited[i] = <span class="keyword">false</span>;</div><div class="line">            from[i] = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dfs(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 深度优先遍历</div><div class="line">     * <span class="doctag">@param</span> v 从v点开始深度优先遍历</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        visited[v] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: G.adj(v)) &#123;</div><div class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</div><div class="line">                from[i] = v;</div><div class="line">                dfs(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 查询从s点到w点是否存在路径</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> w &gt;= <span class="number">0</span> &amp;&amp; w &lt; G.V();</div><div class="line">        <span class="keyword">return</span> visited[w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 查询点s到点w的路径，存放在vec中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Vector&lt;Integer&gt; <span class="title">path</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span>(hasPath(w));</div><div class="line"></div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> p = w;</div><div class="line">        <span class="keyword">while</span> (p != -<span class="number">1</span>) &#123;</div><div class="line">            stack.push(p);</div><div class="line">            p = from[p];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Vector&lt;Integer&gt; vec = <span class="keyword">new</span> Vector&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">            vec.add(stack.pop());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> vec;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印出从点s到点w的路径</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPath</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (hasPath(w));</div><div class="line"></div><div class="line">        Vector&lt;Integer&gt; vec = path(w);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i++) &#123;</div><div class="line">            System.out.print(vec.elementAt(i));</div><div class="line">            <span class="keyword">if</span> (i == vec.size() - <span class="number">1</span>) &#123;</div><div class="line">                System.out.println();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.print(<span class="string">" -&gt; "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>今天的无权图的路径问题就讲解到这里，之后的知识点等学习整理之后，再行记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好像又是接近半个月没有更新，这半个月忙着结婚的各项事情，本来预计的学习任务也拖拖拉拉，进度缓慢。吐槽一句，拍婚纱照真的是最非常非常累的一件事情，不想再有下次了。&lt;/p&gt;
&lt;p&gt;好吧，言归正传，今天就在这周缓慢的学习进度中，抽取出来一个比较有代表性的知识点，记录一下吧。&lt;/p
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——最大索引堆(C++和Java实现)</title>
    <link href="http://yoursite.com/2017/08/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%9C%80%E5%A4%A7%E7%B4%A2%E5%BC%95%E5%A0%86(C++%E5%92%8CJava%E5%AE%9E%E7%8E%B0)/"/>
    <id>http://yoursite.com/2017/08/27/数据结构——最大索引堆(C++和Java实现)/</id>
    <published>2017-08-27T13:17:46.000Z</published>
    <updated>2017-08-27T13:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇博客中，记录了优先队列——堆这个数据结构的实现，并且关于堆的性质我也在上文中介绍过，堆能用来进行排序，堆排序具有快速(复杂度O(NlogN))，稳定的特点，尤其是非常稳定，因此适用于某些需要排序稳定性的场合。</p>
<p>但是呢，普通的二叉堆有两个缺陷：</p>
<ul>
<li>在对的元素体积非常大的情况下，经常性的移动元素是低效的。</li>
<li>如果在堆的使用过程中，堆中的元素的值要改变，则普通堆对此无能为力，简单的说，如果一个元素如果进入堆之后，它的值就不能改变了，否则会影响堆的性质。</li>
</ul>
<p>第一个缺陷还能用类似于指针排序的技术解决，但是第二个缺陷不采用特殊的技术是没有办法解决的，然而在一些场合，堆中元素的值确实需要改变。于是乎，索引堆这个数据结构就在这里应运而生了。</p>
<p>&lt;!--more--&gt;</p>
<p>所谓索引堆，简单的说，就是在堆里头存放的不是数据，而是数据所在的数组的索引，也就是下标，根据数据的某种优先级来调整各个元素对应的下标在堆中的位置。本质上来说，索引堆也是堆，提供堆的接口。</p>
<p>那么接下来，我们就来尝试用<code>C++</code>和<code>Java</code>两种语言来实现索引堆，注释在代码中写的比较详细。</p>
<p>C++版如下:</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> IndexMaxHeap &#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item *data;</div><div class="line">    <span class="keyword">int</span> *indexes;</div><div class="line">    <span class="keyword">int</span> *reverse;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">( <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[ indexes[k/<span class="number">2</span>] ] &lt; data[ indexes[k] ]) &#123;</div><div class="line">            swap( indexes[k/<span class="number">2</span>], indexes[k] );</div><div class="line">            reverse[indexes[k / <span class="number">2</span>]] = k / <span class="number">2</span>;</div><div class="line">            reverse[indexes[k]] = k;</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">( <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="number">2</span>*k &lt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k; <span class="comment">// 在此轮循环中,data[k]和data[j]交换位置</span></div><div class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[ indexes[j] ] &lt; data[ indexes[j+<span class="number">1</span>] ])</div><div class="line">                <span class="comment">// data[j] 是 data[2*k]和data[2*k+1]中的最大值</span></div><div class="line">                j += <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (data[ indexes[k] ] &gt; data[ indexes[j] ])</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            swap( indexes[k], indexes[j] );</div><div class="line">            reverse[ indexes[k] ] = k;</div><div class="line">            reverse[ indexes[j] ] = j;</div><div class="line">            k = j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数, 构造一个空的索引堆, 可容纳capacity个元素</span></div><div class="line">    IndexMaxHeap(<span class="keyword">int</span> capacity) &#123;</div><div class="line">        data = <span class="keyword">new</span> Item[capacity + <span class="number">1</span>];</div><div class="line">        indexes = <span class="keyword">new</span> <span class="keyword">int</span>[capacity + <span class="number">1</span>];</div><div class="line">        reverse = <span class="keyword">new</span> <span class="keyword">int</span>[capacity + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= capacity; i++) &#123;</div><div class="line">            reverse[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IndexMaxHeap(Item arr[], <span class="keyword">int</span> n) &#123;</div><div class="line">        data = <span class="keyword">new</span> Item[n+<span class="number">1</span>];</div><div class="line">        capacity = n + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            data[i+<span class="number">1</span>] = arr[i];</div><div class="line">        count = n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</div><div class="line">            shiftDown(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~IndexMaxHeap() &#123;</div><div class="line">        <span class="keyword">delete</span>[] data;</div><div class="line">        <span class="keyword">delete</span>[] indexes;</div><div class="line">        <span class="keyword">delete</span>[] reverse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回堆中的元素个数</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回一个布尔值, 表示堆中是否为空</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 向最大索引堆中插入一个新的元素, 新元素的索引为i, 元素为item</span></div><div class="line">    <span class="comment">// 传入的i对用户而言,是从0索引的</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Item item)</span> </span>&#123;</div><div class="line">        assert(count + <span class="number">1</span> &lt;= capacity);</div><div class="line">        assert(i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity);</div><div class="line"></div><div class="line">        <span class="comment">// 再插入一个新元素前,还需要保证索引i所在的位置是没有元素的。</span></div><div class="line">        assert( !contain(i) );</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = item;</div><div class="line">        indexes[count+<span class="number">1</span>] = i;</div><div class="line">        reverse[i] = count + <span class="number">1</span>;</div><div class="line"></div><div class="line">        count++;</div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></div><div class="line">    <span class="function">Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        assert(count &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        Item ret = data[ indexes[<span class="number">1</span>] ];</div><div class="line"></div><div class="line">        swap( indexes[<span class="number">1</span>], indexes[count] );</div><div class="line">        reverse[ indexes[<span class="number">1</span>] ] = <span class="number">1</span>;</div><div class="line">        reverse[ indexes[count] ] = <span class="number">0</span>;</div><div class="line">        count--;</div><div class="line"></div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extractMaxIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">int</span> ret = indexes[<span class="number">1</span>] - <span class="number">1</span>;</div><div class="line">        swap( indexes[<span class="number">1</span>], indexes[count] );</div><div class="line">        reverse[ indexes[<span class="number">1</span>] ] = <span class="number">1</span>;</div><div class="line">        reverse[ indexes[count] ] = <span class="number">0</span>;</div><div class="line">        count--;</div><div class="line">        shiftDown(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">( <span class="keyword">int</span> i )</span> </span>&#123;</div><div class="line">        assert( i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity);</div><div class="line">        <span class="keyword">return</span> reverse[i+<span class="number">1</span>] != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">( <span class="keyword">int</span> i )</span> </span>&#123;</div><div class="line">        assert(contain(i));</div><div class="line">        <span class="keyword">return</span> data[i + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">( <span class="keyword">int</span> i, Item newItem )</span> </span>&#123;</div><div class="line"></div><div class="line">        assert(contain(i));</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = newItem;</div><div class="line"></div><div class="line">        <span class="comment">// 找到indexes[j] = i, j 表示 data[i]在堆中的位置</span></div><div class="line">        <span class="comment">// 之后shiftUp(j), 再shiftDown(j)</span></div><div class="line">        <span class="comment">// for ( int j = 1; j &lt;= count; j++ ) &#123;</span></div><div class="line">        <span class="comment">//     if (indexes[j] == i) &#123;</span></div><div class="line">        <span class="comment">//         shiftUp(j);</span></div><div class="line">        <span class="comment">//         shiftDown(j);</span></div><div class="line">        <span class="comment">//         return;</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">        <span class="comment">// 有了 reverse 之后,</span></div><div class="line">        <span class="comment">// 我们可以非常简单的通过reverse直接定位索引i在indexes中的位置</span></div><div class="line">        <span class="keyword">int</span> j = reverse[i];</div><div class="line">        shiftUp(j);</div><div class="line">        shiftDown(j);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取最大堆中的堆顶元素</span></div><div class="line">    <span class="function">Item <span class="title">getMax</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> data[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试索引堆中的索引数组index和反向数组reverse</span></div><div class="line">    <span class="comment">// 注意:这个测试在向堆中插入元素以后, 不进行extract操作有效</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">testIndexesAndReverseIndexes</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> *copyIndexes = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> *copyReverseIndexes = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= count ; i ++ )&#123;</div><div class="line">            copyIndexes[i] = indexes[i];</div><div class="line">            copyReverseIndexes[i] = reverse[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        copyIndexes[<span class="number">0</span>] = copyReverseIndexes[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::sort(copyIndexes, copyIndexes + count + <span class="number">1</span>);</div><div class="line">        <span class="built_in">std</span>::sort(copyReverseIndexes, copyReverseIndexes + count + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 在对索引堆中的索引和反向索引进行排序后,</span></div><div class="line">        <span class="comment">// 两个数组都应该正好是1...count这count个索引</span></div><div class="line">        <span class="keyword">bool</span> res = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= count ; i ++ )</div><div class="line">            <span class="keyword">if</span>( copyIndexes[i<span class="number">-1</span>] + <span class="number">1</span> != copyIndexes[i] ||</div><div class="line">                    copyReverseIndexes[i<span class="number">-1</span>] + <span class="number">1</span> != copyReverseIndexes[i] )&#123;</div><div class="line">                res = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">delete</span>[] copyIndexes;</div><div class="line">        <span class="keyword">delete</span>[] copyReverseIndexes;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>( !res )&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error!"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= count ; i ++ )</div><div class="line">            <span class="keyword">if</span>( reverse[ indexes[i] ] != i )&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error 2"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Java版本的代码如下:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最大索引堆</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexMaxHeap</span>&lt;<span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Item[] data;    <span class="comment">// 最大索引堆中的数据</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span>[] indexes;  <span class="comment">// 最大索引堆中的索引, indexes[x] = i 表示索引i在x的位置</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span>[] reverse;  <span class="comment">// 最大索引堆中的反向索引, reverse[i] = x 表示索引i在x的位置</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数, 构造一个空堆, 可容纳capacity个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IndexMaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        data = (Item[]) <span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</div><div class="line">        indexes = <span class="keyword">new</span> <span class="keyword">int</span>[capacity + <span class="number">1</span>];</div><div class="line">        reverse = <span class="keyword">new</span> <span class="keyword">int</span>[capacity + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= capacity; i++) &#123;</div><div class="line">            reverse[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.capacity = capacity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回索引堆中的元素个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回一个布尔值, 表示索引堆中是否为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 向最大索引堆中插入一个新的元素, 新元素的索引为i, 元素为item</span></div><div class="line">    <span class="comment">// 传入的i对用户而言,是从0索引的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Item item)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count + <span class="number">1</span> &lt;= capacity);</div><div class="line">        <span class="keyword">assert</span> (i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity);</div><div class="line"></div><div class="line">        <span class="comment">// 再插入一个新元素前,还需要保证索引i所在的位置是没有元素的。</span></div><div class="line">        <span class="keyword">assert</span> ( !contain(i) );</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = item;</div><div class="line">        indexes[count + <span class="number">1</span>] = i;</div><div class="line">        reverse[i] = count + <span class="number">1</span>;</div><div class="line"></div><div class="line">        count++;</div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从最大索引堆中取出堆顶元素, 即索引堆中所存储的最大数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        Item ret = data[ indexes[<span class="number">1</span>] ];</div><div class="line">        swap(indexes, <span class="number">1</span>, count);</div><div class="line">        reverse[ indexes[<span class="number">1</span>] ] = <span class="number">1</span>;</div><div class="line">        reverse[ indexes[count] ] = <span class="number">0</span>;</div><div class="line">        count--;</div><div class="line"></div><div class="line">        shiftDown(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从最大索引堆中取出堆顶元素的索引</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extractMaxIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = indexes[<span class="number">1</span>] - <span class="number">1</span>;</div><div class="line">        swap(indexes, <span class="number">1</span>, count);</div><div class="line">        reverse[ indexes[<span class="number">1</span>] ] = <span class="number">1</span>;</div><div class="line">        reverse[ indexes[count] ] = <span class="number">0</span>;</div><div class="line">        count--;</div><div class="line">        shiftDown(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 看索引i所在的位置是否存在元素</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (i + <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= capacity);</div><div class="line">        <span class="keyword">return</span> reverse[i+<span class="number">1</span>] != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[ indexes[k / <span class="number">2</span>] ].compareTo( data[ indexes[k] ] ) &lt; <span class="number">0</span>) &#123;</div><div class="line">            swap(indexes, k / <span class="number">2</span>, k);</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="number">2</span>*k &lt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</div><div class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[ indexes[j] ].compareTo( data[ indexes[j+<span class="number">1</span>] ] ) &lt; <span class="number">0</span>) &#123;</div><div class="line">                j += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (data[ indexes[k] ].compareTo(data[ indexes[j] ]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            swap(indexes, k, j);</div><div class="line">            k = j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 交换索引堆中的索引i和j</span></div><div class="line">    <span class="comment">// 由于有了反向索引reverse数组，</span></div><div class="line">    <span class="comment">// indexes数组发生改变以后， 相应的就需要维护reverse数组</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> t = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = t;</div><div class="line"></div><div class="line">        reverse[ indexes[i] ] = i;</div><div class="line">        reverse[ indexes[j] ] = j;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取最大索引堆中索引为i的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (contain(i));</div><div class="line">        <span class="keyword">return</span> data[i + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将最大索引堆中索引为i的元素修改为newItem</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i, Item newItem)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span>(contain(i));</div><div class="line"></div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        data[i] = newItem;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = reverse[i];</div><div class="line">        shiftUp(j);</div><div class="line">        shiftDown(j);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取最大索引堆中的堆顶元素</span></div><div class="line">    <span class="function">Item <span class="title">getMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count &gt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> data[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试索引堆中的索引数组index和反向数组reverse</span></div><div class="line">    <span class="comment">// 注意:这个测试在向堆中插入元素以后, 不进行extract操作有效</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testIndexes</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] copyIndexes = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span>[] copyReverseIndexes = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= count ; i ++ ) &#123;</div><div class="line">            copyIndexes[i] = indexes[i];</div><div class="line">            copyReverseIndexes[i] = reverse[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        copyIndexes[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        copyReverseIndexes[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        Arrays.sort(copyIndexes);</div><div class="line">        Arrays.sort(copyReverseIndexes);</div><div class="line"></div><div class="line">        <span class="comment">// 在对索引堆中的索引和反向索引进行排序后,</span></div><div class="line">        <span class="comment">// 两个数组都应该正好是1...count这count个索引</span></div><div class="line">        <span class="keyword">boolean</span> res = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= count ; i ++ )</div><div class="line">            <span class="keyword">if</span>( copyIndexes[i-<span class="number">1</span>] + <span class="number">1</span> != copyIndexes[i] ||</div><div class="line">                    copyReverseIndexes[i-<span class="number">1</span>] + <span class="number">1</span> != copyReverseIndexes[i] )&#123;</div><div class="line">                res = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>( !res )&#123;</div><div class="line">            System.out.println(<span class="string">"Error!"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> N = <span class="number">1000000</span>;</div><div class="line">        IndexMaxHeap&lt;Integer&gt; indexMaxHeap = <span class="keyword">new</span> IndexMaxHeap&lt;Integer&gt;(N);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            indexMaxHeap.insert(i, (<span class="keyword">int</span>) (Math.random() * N));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> indexMaxHeap.testIndexes();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇博客中，记录了优先队列——堆这个数据结构的实现，并且关于堆的性质我也在上文中介绍过，堆能用来进行排序，堆排序具有快速(复杂度O(NlogN))，稳定的特点，尤其是非常稳定，因此适用于某些需要排序稳定性的场合。&lt;/p&gt;
&lt;p&gt;但是呢，普通的二叉堆有两个缺陷：&lt;/p&gt;

    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="索引堆" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——优先队列(C++和Java实现)</title>
    <link href="http://yoursite.com/2017/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-C-%E5%92%8CJava%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/08/18/数据结构——优先队列-C-和Java实现/</id>
    <published>2017-08-18T13:10:11.000Z</published>
    <updated>2017-08-18T13:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>十几天没有更新自己的博客了，因为目前在算法和数据结构的学习中，碰到了一些问题，例如之前就在优先队列，堆这个数据结构面前，感觉到有点吃不透概念，而使用的那本书上写的实在太抽象了，所以又查找了很多资料，最终对优先队列这个数据结构有了一定的了解。花了点时间才啃下来的知识，当然要把它记录下来了，所以今天就来回顾一下优先队列。</p>
<p>&lt;!--more--&gt;</p>
<p>优先队列也是一种抽象数据类型。优先队列中的每个元素都有各自的优先级。这个概念其实打几个比方会理解的比较快一点。比如我们人人都用过的windows系统，当我们打开任务管理器的时候，每个任务的优先级别是不同的，而操作系统会选择优先级别最高的任务先执行，同时我们也能在选项里标记任务的优先级。再比如夜班的急诊大夫，如果之前来了两三个感冒发烧的病人正在排队看病，这时候，匆匆忙忙抬进来一个心脏病突发的病人，那我们的大夫当然要先去治疗心脏病突发的病人了。优先队列也是一个道理，优先处理优先级别高的数据或者任务。</p>
<p>优先级最高的元素最先得到服务，优先级别相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用堆来实现。</p>
<p>优先队列至少要支持这些操作：</p>
<ul>
<li>插入带优先级的元素。</li>
<li>取出具有最高优先级的元素。</li>
<li>查看最高优先级的元素。（O(1)的时间复杂度）</li>
</ul>
<p>出于性能的考虑，优先队列用堆来实现，具有O(log n)时间复杂度的插入元素性能，O(n)的初始化构造的时间复杂度。如果使用自平衡二叉查找树，插入与删除的时间复杂度为O(log n),构造二叉树的时间复杂度为O(nlogn)。</p>
<p>而从时间复杂度的角度，优先队列其实等价于排序算法。而接下来我们就要用C++和Java两种编程语言来实现优先队列。为什么现在要用两种语言呢，其实仅仅是我在使用了C++写完了数据结构之后，改换Java又实现了一遍，经过测试，代码是通过并满足优先队列的性质的，所以一起放出来了。</p>
<p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Item&gt;</div><div class="line"><span class="keyword">class</span> MaxHeap &#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Item *data;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">( <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>] &lt; data[k]) &#123;</div><div class="line">            swap( data[k/<span class="number">2</span>], data[k] );</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">( <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="number">2</span>*k &lt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k; <span class="comment">// 在此轮循环中,data[k]和data[j]交换位置</span></div><div class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[j] &lt; data[j+<span class="number">1</span>])</div><div class="line">                <span class="comment">// data[j] 是 data[2*k]和data[2*k+1]中的最大值</span></div><div class="line">                j += <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (data[k] &gt; data[j])</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            swap( data[k], data[j] );</div><div class="line">            k = j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 构造函数, 构造一个空堆, 可容纳capacity个元素</span></div><div class="line">    MaxHeap(<span class="keyword">int</span> capacity) &#123;</div><div class="line">        data = <span class="keyword">new</span> Item[capacity + <span class="number">1</span>];</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    MaxHeap(Item arr[], <span class="keyword">int</span> n) &#123;</div><div class="line">        data = <span class="keyword">new</span> Item[n+<span class="number">1</span>];</div><div class="line">        capacity = n + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            data[i+<span class="number">1</span>] = arr[i];</div><div class="line">        count = n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</div><div class="line">            shiftDown(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~MaxHeap() &#123;</div><div class="line">        <span class="keyword">delete</span>[] data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回堆中的元素个数</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回一个布尔值, 表示堆中是否为空</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 像最大堆中插入一个新的元素 item</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">        assert(count + <span class="number">1</span> &lt;= capacity);</div><div class="line">        data[ count + <span class="number">1</span> ] = item;</div><div class="line">        count++;</div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></div><div class="line">    <span class="function">Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        assert(count &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        Item ret = data[<span class="number">1</span>];</div><div class="line"></div><div class="line">        swap( data[<span class="number">1</span>], data[count] );</div><div class="line">        count--;</div><div class="line"></div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取最大堆中的堆顶元素</span></div><div class="line">    <span class="function">Item <span class="title">getMax</span><span class="params">()</span></span>&#123;</div><div class="line">        assert( count &gt; <span class="number">0</span> );</div><div class="line">        <span class="keyword">return</span> data[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>以上是C++版本的实现，接下来是Java版本的实现，测试代码写在java里面，C++的测试也是一样的用例。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span>&lt;<span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Item[] data;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数，构造一个空堆，可容纳capacity个元素</span></div><div class="line">    MaxHeap(<span class="keyword">int</span> capacity) &#123;</div><div class="line">        data = (Item[])<span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.capacity = capacity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回堆中的元素个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回一个布尔值，表示堆中是否为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 向最大堆中插入一个新元素 item</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count + <span class="number">1</span> &lt;= capacity);</div><div class="line">        data[count + <span class="number">1</span>] = item;</div><div class="line">        <span class="keyword">this</span>.count++;</div><div class="line">        shiftUp( count );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从最大堆中取出堆顶元素，即堆中所存储的最大数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count &gt; <span class="number">0</span>);</div><div class="line">        Item ret = data[<span class="number">1</span>];</div><div class="line">        swap(<span class="number">1</span>, count);</div><div class="line">        count--;</div><div class="line">        shiftDown( <span class="number">1</span> );</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取最大堆中的堆顶元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> (count &gt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> data[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 交换堆中索引为i和j的两个元素</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        Item item = data[i];</div><div class="line">        data[i] = data[j];</div><div class="line">        data[j] = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//********************</span></div><div class="line">    <span class="comment">//* 最大堆核心辅助函数</span></div><div class="line">    <span class="comment">//********************</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>].compareTo(data[k]) &lt; <span class="number">0</span>) &#123;</div><div class="line">            swap(k/<span class="number">2</span>, k);</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= count) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</div><div class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= count &amp;&amp; data[j].compareTo(data[j+<span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</div><div class="line">                j += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (data[k].compareTo(data[j]) &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            swap(k, j);</div><div class="line">            k = j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//测试MaxHeap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MaxHeap&lt;Integer&gt; maxHeap = <span class="keyword">new</span> MaxHeap&lt;Integer&gt;(<span class="number">50</span>);</div><div class="line">        <span class="keyword">int</span> N = <span class="number">50</span>;</div><div class="line">        <span class="keyword">int</span> M = <span class="number">100</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            maxHeap.insert( <span class="keyword">new</span> Integer((<span class="keyword">int</span>) (Math.random() * M)) );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Integer[] arr = <span class="keyword">new</span> Integer[N];</div><div class="line">        <span class="comment">// 将maxHeap中的数据使用extractMax()取出来</span></div><div class="line">        <span class="comment">// 取出来的顺序应该是从大到小排序的</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            arr[i] = maxHeap.extractMax();</div><div class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        <span class="comment">// 确保arr数组是从大到小排序的</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">assert</span> arr[i-<span class="number">1</span>] &gt;= arr[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十几天没有更新自己的博客了，因为目前在算法和数据结构的学习中，碰到了一些问题，例如之前就在优先队列，堆这个数据结构面前，感觉到有点吃不透概念，而使用的那本书上写的实在太抽象了，所以又查找了很多资料，最终对优先队列这个数据结构有了一定的了解。花了点时间才啃下来的知识，当然要把
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="优先队列" scheme="http://yoursite.com/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——AVL树(C语言)</title>
    <link href="http://yoursite.com/2017/08/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94AVL%E6%A0%91/"/>
    <id>http://yoursite.com/2017/08/06/数据结构——AVL树/</id>
    <published>2017-08-06T01:30:12.000Z</published>
    <updated>2017-08-06T01:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>AVL(Adelson-Velskii 和 Landis)树是带有平衡条件的二叉查找树。在计算机科学中，AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(lngn)。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。</p>
<p>节点的平衡因子是它的左子树的高度减去它的右子树的高度（有时相反）。带有平衡因子1、0或-1的结点被认为是平衡的。带有平衡因子-2或2的节点被认为是不平衡的，并需要重新平衡这个树。平衡因子可以直接存储在每个节点中，或从可能存储在节点中的子树高度计算出来。</p>
<p>&lt;!--more--&gt;</p>
<p>AVL树的基本操作一般涉及运作同在不平衡的二叉查找树所运作的同样的算法。但是要进行预先或随后做一次或多次所谓的&quot;AVL旋转&quot;。</p>
<p>以下图标表示的四种情况，就是AVL旋转中常见的四种。（图片用了维基百科的，不确定不开vpn图是否会挂）。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c7/Tree_Rebalancing.png" alt=""></p>
<p>下面来看AVL树的操作有哪些:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AvlTree_H</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> AvlNode;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AvlNode *Position;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AvlNode *AvlTree;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</div><div class="line"></div><div class="line"><span class="function">AvlTree <span class="title">MakeEmpty</span><span class="params">( AvlTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">( ElementType X, AvlTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">( AvlTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">( AvlTree T )</span></span>;</div><div class="line"><span class="function">AvlTree <span class="title">Insert</span><span class="params">( ElementType X, AvlTree T )</span></span>;</div><div class="line"><span class="function">AvlTree <span class="title">Delete</span><span class="params">( ElementType X, AvlTree T )</span></span>;</div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">( Position P )</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _AvlTree_H */</span></span></div></pre></td></tr></table></figure></p>
<p>下面是对于上面操作定义的实现:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AvlTree.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> AvlNode</div><div class="line">&#123;</div><div class="line">    ElementType Element;</div><div class="line">    AvlTree Left;</div><div class="line">    AvlTree Right;</div><div class="line">    <span class="keyword">int</span> Height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">AvlTree <span class="title">MakeEmpty</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        MakeEmpty(T-&gt;Left);</div><div class="line">        MakeEmpty(T-&gt;Right);</div><div class="line">        <span class="built_in">free</span>(T);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 计算Avl节点高度</div><div class="line"> * @param  P 节点P</div><div class="line"> * @return 树高</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Height</span><span class="params">(Position P)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (P == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> P-&gt;Height;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 向左单旋 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithLeft</span><span class="params">(Position K2)</span></span></div><div class="line">&#123;</div><div class="line">    Position K1;</div><div class="line"></div><div class="line">    K1 = K2-&gt;Left;</div><div class="line">    K2-&gt;Left = K1-&gt;Right;</div><div class="line">    K1-&gt;Right = K2;</div><div class="line"></div><div class="line">    K2-&gt;Height = Max(Height(K2-&gt;Left), Height(K2-&gt;Right)) + <span class="number">1</span>;</div><div class="line">    K1-&gt;Height = Max(Height(K1-&gt;Left), K2-&gt;Height) + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> K1; <span class="comment">/* New Root */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 向右单旋  */</span></div><div class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithRight</span><span class="params">(Position K2)</span></span></div><div class="line">&#123;</div><div class="line">    Position K1;</div><div class="line"></div><div class="line">    K1 = K2-&gt;Right;</div><div class="line">    K2-&gt;Right = K1-&gt;Left;</div><div class="line">    K1-&gt;Left = K2;</div><div class="line"></div><div class="line">    K2-&gt;Height = Max(Height(K2-&gt;Left), Height(K2-&gt;Right)) + <span class="number">1</span>;</div><div class="line">    K1-&gt;Height = Max(K2-&gt;Height, Height(K1-&gt;Right)) + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> K1; <span class="comment">/*New root */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 向左双旋 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithLeft</span><span class="params">(Position K3)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* Rotate between K1 and K2 */</span></div><div class="line">    K3-&gt;Left = SingleRotateWithRight(K3-&gt;Left);</div><div class="line"></div><div class="line">    <span class="comment">/* Rotate between K3 and K2 */</span></div><div class="line">    <span class="keyword">return</span> SingleRotateWithLeft(K3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 向右双旋 */</span></div><div class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithRight</span><span class="params">(Position K3)</span></span></div><div class="line">&#123;</div><div class="line">    K3-&gt;Right = SingleRotateWithLeft(K3-&gt;Right);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> SingleRotateWithRight(K3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AvlTree <span class="title">Insert</span><span class="params">(ElementType X, AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        T = <span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="keyword">struct</span> AvlNode ) );</div><div class="line">        <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Out of space!!!\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            T-&gt;Element = X;</div><div class="line">            T-&gt;Height = <span class="number">0</span>;</div><div class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; T-&gt;Element) <span class="comment">/* 左子树插入新节点 */</span></div><div class="line">    &#123;</div><div class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</div><div class="line">        <span class="keyword">if</span> (Height(T-&gt;Left) - Height(T-&gt;Right) == <span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> (X &lt; T-&gt;Left-&gt;Element)</div><div class="line">                T = SingleRotateWithLeft(T);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                T = DoubleRotateWithLeft(T);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element) <span class="comment">/* 右子树插入新节点 */</span></div><div class="line">    &#123;</div><div class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</div><div class="line">        <span class="keyword">if</span> (Height(T-&gt;Right) - Height(T-&gt;Left) == <span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> (X &gt; T-&gt;Right-&gt;Element)</div><div class="line">                T = SingleRotateWithRight(T);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                T = DoubleRotateWithRight(T);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Else X is in the tree alredy; we'll do nothing */</span></div><div class="line">    T-&gt;Height = Max(Height(T-&gt;Left), Height(T-&gt;Right)) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">AvlTree <span class="title">Delete</span><span class="params">(ElementType X, AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    Position TmpCell;</div><div class="line">     <span class="keyword">if</span>(T == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"没找到该元素，无法删除！\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; T-&gt;Element)</div><div class="line">         T-&gt;Left = Delete(X, T-&gt;Left);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</div><div class="line">         T-&gt;Right = Delete(X, T-&gt;Right);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right) &#123; <span class="comment">//要删除的树左右都有儿子</span></div><div class="line">         TmpCell = FindMin(T-&gt;Right);   <span class="comment">//用该结点右儿子上最小结点替换该结点，然后与只有一个儿子的操作方法相同</span></div><div class="line">         T-&gt;Element = TmpCell-&gt;Element;</div><div class="line">         T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         TmpCell = T;        <span class="comment">//要删除的结点只有一个儿子</span></div><div class="line">         <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</div><div class="line">             T = T-&gt;Right;</div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</div><div class="line">             T = T-&gt;Left;</div><div class="line">         <span class="built_in">free</span>(TmpCell);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 查找X元素所在的位置 */</span></div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (X &lt; T-&gt;Element)</div><div class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</div><div class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* search the min element in AvlTree*/</span></div><div class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;Left == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> T;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FindMin(T-&gt;Left);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* search the max element in AvlTree */</span></div><div class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;Right == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> T;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FindMax(T-&gt;Right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(P != <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> P-&gt;Element;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 前序遍历"二叉树"</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTravel</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">        PreorderTravel(T-&gt;Left);</div><div class="line">        PreorderTravel(T-&gt;Right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中序遍历"二叉树"</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTravel</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        InorderTravel(T-&gt;Left);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">        InorderTravel(T-&gt;Right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 后序遍历二叉树</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostorderTravel</span><span class="params">(AvlTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        PostorderTravel(T-&gt;Left);</div><div class="line">        PostorderTravel(T-&gt;Right);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 打印二叉树信息 */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(AvlTree T, ElementType Element, <span class="keyword">int</span> direction)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (direction == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%2d is root\n"</span>, T-&gt;Element);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%2d is %2d's %6s child\n"</span>, T-&gt;Element, Element, direction == <span class="number">1</span> ? <span class="string">"right"</span> : <span class="string">"left"</span>);</div><div class="line"></div><div class="line">        PrintTree(T-&gt;Left, T-&gt;Element, <span class="number">-1</span>);</div><div class="line">        PrintTree(T-&gt;Right, T-&gt;Element, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在实现完成这些函数后，我们在<code>main</code>函数中对AVL树进行测试:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line"></div><div class="line">    AvlTree T;</div><div class="line">    Position P;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    T = MakeEmpty(<span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    T = Insert(<span class="number">21</span>, T);</div><div class="line">    T = Insert(<span class="number">2150</span>, T);</div><div class="line">    T = Insert(<span class="number">50</span>, T);</div><div class="line">    T = Insert(<span class="number">12</span>, T);</div><div class="line">    T = Insert(<span class="number">1201</span>, T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Root: %d\n"</span>, T-&gt;Element);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"树的详细信息: \n"</span>);</div><div class="line">    PrintTree(T, T-&gt;Element, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"前序遍历二叉树: \n"</span>);</div><div class="line">    PreorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"中序遍历二叉树: \n"</span>);</div><div class="line">    InorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"后序遍历二叉树: \n"</span>);</div><div class="line">    PostorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"最大值: %d\n"</span>, FindMax(T)-&gt;Element);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"最小值: %d\n"</span>, FindMin(T)-&gt;Element);</div><div class="line"></div><div class="line">    Delete(<span class="number">50</span>, T);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"树的详细信息: \n"</span>);</div><div class="line">    PrintTree(T, T-&gt;Element, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AVL(Adelson-Velskii 和 Landis)树是带有平衡条件的二叉查找树。在计算机科学中，AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(l
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="AVL树" scheme="http://yoursite.com/tags/AVL%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——二叉查找树(C语言)</title>
    <link href="http://yoursite.com/2017/07/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://yoursite.com/2017/07/29/数据结构——二叉查找树(C语言)/</id>
    <published>2017-07-29T13:08:33.000Z</published>
    <updated>2017-07-29T13:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>二叉查找树，也称作二叉搜索树，有序二叉树，排序二叉树，而当一棵空树或者具有下列性质的二叉树，就可以被定义为二叉查找树：</p>
<ul>
<li>
<p>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值。</p>
</li>
<li>
<p>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值。</p>
</li>
<li>
<p>任意节点的左、右子树也分别为二叉查找树。</p>
</li>
<li>
<p>没有键值相等的节点。</p>
</li>
</ul>
<p>二叉查找树相比于其他数据结构的优势在查找、插入的时间复杂度较低，为O(log n)。二叉查找树是基础性数据结构，用于构建更为抽象的数据结构,如集合、multiset、关联数组等。对于大量的输入数据，链表的线性访问时间太慢，不宜使用。</p>
<p>&lt;!--more--&gt;</p>
<p>下面来看我们为二叉查找树定义的抽象行为：</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Tree_H</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> TreeNode;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> TreeNode *Position;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> TreeNode *SearchTree;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</div><div class="line"></div><div class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">( SearchTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">( ElementType X, SearchTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">( SearchTree T )</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">( SearchTree T )</span></span>;</div><div class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">( ElementType X, SearchTree T )</span></span>;</div><div class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">( ElementType X, SearchTree T )</span></span>;</div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">( Position P )</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>而对于上述抽象行为的实现，我们先来给出实现代码:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tree.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> TreeNode</div><div class="line">&#123;</div><div class="line">    ElementType Element;</div><div class="line">    SearchTree Left;</div><div class="line">    SearchTree Right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        MakeEmpty(T-&gt;Left);</div><div class="line">        MakeEmpty(T-&gt;Right);</div><div class="line">        <span class="built_in">free</span>(T);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>( T == <span class="literal">NULL</span> )</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (X &lt; T-&gt;Element )</div><div class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> (X &gt; T-&gt;Element)</div><div class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ( T == <span class="literal">NULL</span> )</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> ( T-&gt; Left == <span class="literal">NULL</span> )</div><div class="line">        <span class="keyword">return</span> T;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FindMin( T-&gt;Left );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ( T != <span class="literal">NULL</span> )</div><div class="line">        <span class="keyword">while</span>(T-&gt;Right != <span class="literal">NULL</span>)</div><div class="line">            T = T-&gt;Right;</div><div class="line">    <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="comment">/* Create and return a one-node tree */</span></div><div class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>( <span class="keyword">struct</span> TreeNode ));</div><div class="line">        <span class="keyword">if</span> ( T == <span class="literal">NULL</span> )</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Out of space!!!\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            T-&gt;Element = X;</div><div class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; T-&gt;Element)</div><div class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</div><div class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</div><div class="line">    <span class="comment">/* Else X is in the tree already; we'll do nothing */</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    Position TmpCell;</div><div class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Element not found\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &lt; T-&gt;Element) <span class="comment">/* Go left */</span></div><div class="line">        T-&gt;Right = Delete(X, T-&gt;Left);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element) <span class="comment">/* Go Right */</span></div><div class="line">        T-&gt;Right = Delete(X, T-&gt;Left);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;Left &amp;&amp; T-&gt;Right) <span class="comment">/* Two Children */</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Replace with smallest in right subtree */</span></div><div class="line">        TmpCell = FindMin(T-&gt;Right);</div><div class="line">        T-&gt;Element = TmpCell-&gt;Element;</div><div class="line">        T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="comment">/* One or zero children */</span></div><div class="line">    &#123;</div><div class="line">        TmpCell = T;</div><div class="line">        <span class="keyword">if</span> (T-&gt;Left == <span class="literal">NULL</span>) <span class="comment">/* Also handles 0 children */</span></div><div class="line">            T = T-&gt;Right;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;Right == <span class="literal">NULL</span>)</div><div class="line">            T = T-&gt;Left;</div><div class="line">        <span class="built_in">free</span>( TmpCell );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> P-&gt;Element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 前序遍历"二叉树"</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTravel</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">        PreorderTravel(T-&gt;Left);</div><div class="line">        PreorderTravel(T-&gt;Right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中序遍历"二叉树"</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTravel</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        InorderTravel(T-&gt;Left);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">        InorderTravel(T-&gt;Right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 后序遍历二叉树</div><div class="line"> * @param T Tree</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostorderTravel</span><span class="params">(SearchTree T)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        PostorderTravel(T-&gt;Left);</div><div class="line">        PostorderTravel(T-&gt;Right);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T-&gt;Element);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(SearchTree T, ElementType Element, <span class="keyword">int</span> direction)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (direction == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%2d is root\n"</span>, T-&gt;Element);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%2d is %2d's %6s child\n"</span>, T-&gt;Element, Element, direction == <span class="number">1</span> ? <span class="string">"right"</span> : <span class="string">"left"</span>);</div><div class="line"></div><div class="line">        PrintTree(T-&gt;Left, T-&gt;Element, <span class="number">-1</span>);</div><div class="line">        PrintTree(T-&gt;Right, T-&gt;Element, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们对我们的实现代码，在<code>main</code>函数中进行测试:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello Leon\n"</span>);</div><div class="line">    SearchTree T;</div><div class="line">    MakeEmpty(T);</div><div class="line"></div><div class="line">    T = Insert(<span class="number">21</span>, T);</div><div class="line">    T = Insert(<span class="number">2150</span>, T);</div><div class="line">    T = Insert(<span class="number">127</span>, T);</div><div class="line">    T = Insert(<span class="number">121</span>, T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"树的详细信息: \n"</span>);</div><div class="line">    PrintTree(T, T-&gt;Element, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"前序遍历二叉树: \n"</span>);</div><div class="line">    PreorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"中序遍历二叉树: \n"</span>);</div><div class="line">    InorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"后序遍历二叉树: \n"</span>);</div><div class="line">    PostorderTravel(T);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"最大值: %d\n"</span>, FindMax(T)-&gt;Element);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"最小值: %d\n"</span>, FindMin(T)-&gt;Element);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译运行这个C文件，控制台打印的信息如下:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Hello wsx</div><div class="line">树的详细信息:</div><div class="line"><span class="number">21</span> is root</div><div class="line"><span class="number">2150</span> is <span class="number">21'</span>s  right child</div><div class="line"><span class="number">127</span> is <span class="number">2150'</span>s   left child</div><div class="line"><span class="number">121</span> is <span class="number">127'</span>s   left child</div><div class="line">前序遍历二叉树:</div><div class="line"><span class="number">21</span></div><div class="line"><span class="number">2150</span></div><div class="line"><span class="number">127</span></div><div class="line"><span class="number">121</span></div><div class="line">中序遍历二叉树:</div><div class="line"><span class="number">21</span></div><div class="line"><span class="number">121</span></div><div class="line"><span class="number">127</span></div><div class="line"><span class="number">2150</span></div><div class="line">后序遍历二叉树:</div><div class="line"><span class="number">121</span></div><div class="line"><span class="number">127</span></div><div class="line"><span class="number">2150</span></div><div class="line"><span class="number">21</span></div><div class="line">最大值: <span class="number">2150</span></div><div class="line">最小值: <span class="number">21</span></div></pre></td></tr></table></figure></p>
<p>测试成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉查找树，也称作二叉搜索树，有序二叉树，排序二叉树，而当一棵空树或者具有下列性质的二叉树，就可以被定义为二叉查找树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若任意节点的右
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉查找树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——链表的游标实现(C语言)</title>
    <link href="http://yoursite.com/2017/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0-C%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2017/07/20/数据结构——链表的游标实现-C语言/</id>
    <published>2017-07-20T00:14:12.000Z</published>
    <updated>2017-07-20T00:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文我们用指针实现了链表，但是诸如BASIC和FORTRAN等许多语言都不支持指针。如果需要链表而又不能使用指针，这时我们可以使用游标（cursor）实现法来实现链表。</p>
<p>在链表的实现中有两个重要的特点：</p>
<ul>
<li>
<p>数据存储在一组结构体中。每一个结构体包含有数据以及指向下一个结构体的指针。</p>
</li>
<li>
<p>一个新的结构体可以通过调用malloc而从系统全局内存（global memory）得到，并可以通过free而被释放。</p>
</li>
</ul>
<p>游标法必须能够模仿实现这两条特性 。 下面给出实现代码:</p>
<p>&lt;!--more--&gt;</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CursorList_H</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> PtrToNode;</div><div class="line"><span class="keyword">typedef</span> PtrToNode List;</div><div class="line"><span class="keyword">typedef</span> PtrToNode Position;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeCursorSpace</span><span class="params">( <span class="keyword">void</span> )</span></span>;</div><div class="line"></div><div class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">( List L )</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">( <span class="keyword">const</span> List L )</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">( <span class="keyword">const</span> Position P, <span class="keyword">const</span> List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">( ElementType X, <span class="keyword">const</span> List L )</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">( ElementType X, List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindPrevious</span><span class="params">( ElementType X, <span class="keyword">const</span> List L)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">( ElementType X, List L, Position P )</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">( <span class="keyword">const</span> List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">Header</span><span class="params">( <span class="keyword">const</span> List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">First</span><span class="params">( <span class="keyword">const</span> List L)</span></span>;</div><div class="line"><span class="function">Position <span class="title">Advance</span><span class="params">( <span class="keyword">const</span> Position P )</span></span>;</div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">( <span class="keyword">const</span> Position P )</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_CUrsor_H */</span></span></div></pre></td></tr></table></figure></p>
<p>可以从上面的代码上看到，链表的游标实现跟链表的接口定义几乎是一样的。</p>
<p>下面放上实现代码:</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CursorList.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SpaceSize 10</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    ElementType Element;</div><div class="line">    Position Next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node CursorSpace[ SpaceSize ];</div><div class="line"></div><div class="line"><span class="comment">/* initialize the CursorSpace */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitCursorSpace</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; SpaceSize; i++)</div><div class="line">        CursorSpace[i].Next = i == SpaceSize<span class="number">-1</span> ? <span class="number">0</span> : i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">CursorAlloc</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    Position P;</div><div class="line"></div><div class="line">    P = CursorSpace[<span class="number">0</span>].Next;</div><div class="line">    CursorSpace[<span class="number">0</span>].Next = CursorSpace[P].Next;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CursorFree</span><span class="params">(Position P)</span></span></div><div class="line">&#123;</div><div class="line">    CursorSpace[P].Next = CursorSpace[<span class="number">0</span>].Next;</div><div class="line">    CursorSpace[<span class="number">0</span>].Next = P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Return true if L is empty */</span></div><div class="line"><span class="function">Status <span class="title">IsEmpty</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (CursorSpace[L].Next == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> TRUE;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Return true if P is the last position in list L */</span></div><div class="line"><span class="comment">/* Parameter L is unused in this implementation */</span></div><div class="line"><span class="function">Status <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (CursorSpace[P].Next == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> TRUE;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Return Position of X in L; 0 if not found */</span></div><div class="line"><span class="comment">/* Uses a header node */</span></div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P;</div><div class="line"></div><div class="line">    P = CursorSpace[L].Next;</div><div class="line">    <span class="keyword">while</span>(P &amp;&amp; CursorSpace[P].Element != X) &#123;</div><div class="line">        P = CursorSpace[P].Next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Delete first occurrence of X from a list */</span></div><div class="line"><span class="comment">/* Assume use of a header node */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(ElementType X, List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P, TmpCell;</div><div class="line"></div><div class="line">    P = FindPrevious(X, L);</div><div class="line">    <span class="keyword">if</span> (!IsLast(P, L))</div><div class="line">        TmpCell = CursorSpace[P].Next;</div><div class="line">        CursorSpace[P].Next = CursorSpace[TmpCell].Next;</div><div class="line">        CursorFree(TmpCell);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Find the front of the first X of The list */</span></div><div class="line"><span class="comment">/* Return 0 if not found */</span></div><div class="line"><span class="function">Position <span class="title">FindPrevious</span><span class="params">(ElementType X, <span class="keyword">const</span> List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P;</div><div class="line">    P = L;</div><div class="line">    <span class="keyword">while</span>(P &amp;&amp; CursorSpace[CursorSpace[P].Next].Element != X)</div><div class="line">    &#123;</div><div class="line">        P = CursorSpace[P].Next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Insert(after legal position P) */</span></div><div class="line"><span class="comment">/* Header implementation assumed */</span></div><div class="line"><span class="comment">/* Parameter L is unused in this implemention */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X, List L, Position P)</span></span></div><div class="line">&#123;</div><div class="line">    Position TmpCell;</div><div class="line"></div><div class="line">    TmpCell = CursorAlloc();</div><div class="line">    <span class="keyword">if</span> (TmpCell == <span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Out of space!\n"</span>);</div><div class="line">    CursorSpace[TmpCell].Element = X;</div><div class="line">    CursorSpace[TmpCell].Next = CursorSpace[P].Next;</div><div class="line">    CursorSpace[P].Next = TmpCell;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    List p = L;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"print_list: 链表为空!\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Position P;</div><div class="line"></div><div class="line">    P = CursorSpace[L].Next;</div><div class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d, \n"</span>, CursorSpace[P].Element);</div><div class="line">        P = CursorSpace[P].Next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    InitCursorSpace();</div><div class="line">    List L = CursorAlloc();</div><div class="line">    CursorSpace[L].Next = <span class="literal">NULL</span>;</div><div class="line">    Insert(<span class="number">1</span>, L, L);</div><div class="line">    Insert(<span class="number">0</span>, L, L);</div><div class="line">    Insert(<span class="number">21</span>, L, L);</div><div class="line">    Insert(<span class="number">1201</span>, L, L);</div><div class="line">    Position P;</div><div class="line">    P = Find(<span class="number">21</span>, L);</div><div class="line">    <span class="keyword">if</span> (P)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"找到元素: %d\n"</span>, CursorSpace[P].Element);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"未找到21元素\n"</span>);</div><div class="line">    Delete(<span class="number">0</span>, L);</div><div class="line">    Delete(<span class="number">1</span>, L);</div><div class="line">    print_list(L);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"检查链表是否为空: %d\n"</span>, IsEmpty(L));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现过程比较简单，最后的main函数是对游标链表的测试。代码直接开箱即用，可以看到测试过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博文我们用指针实现了链表，但是诸如BASIC和FORTRAN等许多语言都不支持指针。如果需要链表而又不能使用指针，这时我们可以使用游标（cursor）实现法来实现链表。&lt;/p&gt;
&lt;p&gt;在链表的实现中有两个重要的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据存储在一组结
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——链表(C语言实现)</title>
    <link href="http://yoursite.com/2017/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0)/"/>
    <id>http://yoursite.com/2017/07/16/数据结构——链表(C语言实现)/</id>
    <published>2017-07-16T13:25:01.000Z</published>
    <updated>2017-07-16T13:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>提起链表，我们每个人都不会陌生，不管对数据结构的掌握如何，都或多或少的听过与用过链表这样的常见的数据结构。链表是线性表的一种，最基础的线性表，在插入与删除数据时，我们需要对表的整体或部分做移动，为了允许表可以不按照线性的顺序存储数据结构，于是链表就应运而生。链表最大的特点就是在每个节点里存储了到下一个节点的指针。由于不必按照顺序存储，链表在插入的时候可以达到O(1)的复杂度，比我们学习的最基本的线性表要快得多。但是在查找一个节点，或者访问特定编号的结点则需要O(N)的时间。</p>
<p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的有点，同时由于增加了指针域，空间开销较大。不过这在算法与数据结构领域是很常见的，用空间换时间，毕竟鱼和熊掌不可兼得。</p>
<p>我的链表数据结构是使用C语言来实现的，那么下面来看一下链表的头文件定义了哪些操作。</p>
<p>&lt;!--more--&gt;</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _List_H</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node *PtrToNode;</div><div class="line"><span class="keyword">typedef</span> PtrToNode List;</div><div class="line"><span class="keyword">typedef</span> PtrToNode Position;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</div><div class="line"></div><div class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">(List L)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span>;</div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, List L)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">( ElementType X, List L)</span></span>;</div><div class="line"><span class="function">Position <span class="title">FindPrevious</span><span class="params">( ElementType X, List L)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">( ElementType X, List L, Position P)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">( List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">Header</span><span class="params">( List L )</span></span>;</div><div class="line"><span class="function">Position <span class="title">First</span><span class="params">( List L)</span></span>;</div><div class="line"><span class="function">Position <span class="title">Advance</span><span class="params">( Position P )</span></span>;</div><div class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">( Position P )</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _List_H */</span></span></div></pre></td></tr></table></figure></p>
<p>下面是对于头结点的实现文件，末尾的<code>main</code>函数中还有针对各类函数的测试方法。</p>
<p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    ElementType Element;</div><div class="line">    Position Next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_list</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    L = <span class="literal">NULL</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表成功\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">List <span class="title">create_list</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    List L = <span class="literal">NULL</span>;</div><div class="line">    List p1, p2;</div><div class="line">    p1 = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    p2 = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    <span class="keyword">if</span> (p1 == <span class="literal">NULL</span> || p2 == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败!\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        system(<span class="string">"pause"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(p1, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表元素的值: \n"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(p1-&gt;Element));</div><div class="line">    p1-&gt;Next = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(p1-&gt;Element &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (L == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            L = p1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            p2-&gt;Next = p1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        p2 = p1;</div><div class="line"></div><div class="line">        p1 = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">        <span class="keyword">if</span> (p1 == <span class="literal">NULL</span> || p2 == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">            system(<span class="string">"pause"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(p1, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入链表的值: \n"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(p1-&gt;Element));</div><div class="line">        p1-&gt;Next = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"创建链表成功\n"</span>);</div><div class="line">    <span class="keyword">return</span> L;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    List p = L;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"print_list: 链表为空!\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"打印链表如下: \n"</span>);</div><div class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d, \n"</span>, p-&gt;Element);</div><div class="line">        p = p-&gt;Next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Status <span class="title">IsEmpty</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> TRUE;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Status <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> P-&gt;Next == <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P;</div><div class="line">    P = L-&gt;Next;</div><div class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span> &amp;&amp; P-&gt;Element != X)</div><div class="line">    &#123;</div><div class="line">        P = P-&gt;Next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(ElementType X, List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P, TmpCell;</div><div class="line"></div><div class="line">    P = FindPrevious(X, L);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!IsLast(P, L))</div><div class="line">        TmpCell = P-&gt;Next;</div><div class="line">        P-&gt;Next = TmpCell-&gt;Next;</div><div class="line">        <span class="built_in">free</span>(TmpCell);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Position <span class="title">FindPrevious</span><span class="params">(ElementType X, List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P;</div><div class="line"></div><div class="line">    P = L;</div><div class="line">    <span class="keyword">while</span>(P-&gt;Next != <span class="literal">NULL</span> &amp;&amp; P-&gt;Next-&gt;Element != X)</div><div class="line">    &#123;</div><div class="line">        P = P-&gt;Next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X, List L, Position P)</span></span></div><div class="line">&#123;</div><div class="line">    Position TmpCell;</div><div class="line"></div><div class="line">    TmpCell = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</div><div class="line">    <span class="keyword">if</span> (TmpCell == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Out of space!!!\n"</span>);</div><div class="line">    TmpCell-&gt;Element = X;</div><div class="line">    TmpCell-&gt;Next = P-&gt;Next;</div><div class="line">    P-&gt;Next = TmpCell;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span></div><div class="line">&#123;</div><div class="line">    Position P, Tmp;</div><div class="line"></div><div class="line">    P = L-&gt;Next;</div><div class="line">    L-&gt;Next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        Tmp = P-&gt;Next;</div><div class="line">        <span class="built_in">free</span>(P);</div><div class="line">        P = Tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    List L;</div><div class="line">    init_list(L);</div><div class="line">    L = create_list();</div><div class="line">    print_list(L);</div><div class="line">    <span class="keyword">int</span> isEmpty = IsEmpty(L);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"链表是否为空: %d\n"</span>, isEmpty);</div><div class="line">    Position p = Find(<span class="number">21</span>, L);</div><div class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"没有找到21元素\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"查找21结果: %d\n"</span>, p-&gt;Element);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">    &#123;</div><div class="line">        Insert(i, L, p);</div><div class="line">    &#125;</div><div class="line">    Delete(<span class="number">21</span>, L);</div><div class="line">    DeleteList(L);</div><div class="line">    print_list(L);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提起链表，我们每个人都不会陌生，不管对数据结构的掌握如何，都或多或少的听过与用过链表这样的常见的数据结构。链表是线性表的一种，最基础的线性表，在插入与删除数据时，我们需要对表的整体或部分做移动，为了允许表可以不按照线性的顺序存储数据结构，于是链表就应运而生。链表最大的特点就
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——十六进制字符串与NSData的转化</title>
    <link href="http://yoursite.com/2017/07/07/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8ENSData%E7%9A%84%E8%BD%AC%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/07/iOS开发——十六进制字符串与NSData的转化/</id>
    <published>2017-07-07T06:58:42.000Z</published>
    <updated>2017-07-07T06:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在完成一个需求时，遇到了<code>NSData</code>类型转换为十六进制的字符串这个需求的函数，在<code>stackoverflow</code>中翻找的时候，给出的答案基本上是如下的:</p>
<p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span>* newStr = [[<span class="built_in">NSString</span> alloc] initWithData:theData encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"></div><div class="line"><span class="comment">// If the data is null-terminated, you should instead use -stringWithUTF8String: to avoid the extra \0 at the end.</span></div><div class="line"></div><div class="line"><span class="built_in">NSString</span>* newStr = [<span class="built_in">NSString</span> stringWithUTF8String:[theData bytes]];</div><div class="line"></div><div class="line"><span class="comment">// (Note that if the input is not properly UTF-8-encoded, you will get nil.)</span></div></pre></td></tr></table></figure></p>
<p>&lt;!--more--&gt;</p>
<p>Swift的写法</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> newStr = <span class="type">String</span>(data: data, encoding: .utf8)</div><div class="line"><span class="comment">// note that `newStr` is a `String?`, not a `String`.</span></div><div class="line"><span class="comment">// If the data is null-terminated, you could go though the safe way which is remove the that null character, or the unsafe way similar to the Objective-C version above.</span></div><div class="line"></div><div class="line"><span class="comment">// safe way, provided data is \0-terminated</span></div><div class="line"><span class="keyword">let</span> newStr1 = <span class="type">String</span>(data: data.subdata(<span class="keyword">in</span>: <span class="number">0</span> ..&lt; data.<span class="built_in">count</span> - <span class="number">1</span>), encoding: .utf8)</div><div class="line"><span class="comment">// unsafe way, provided data is \0-terminated</span></div><div class="line"><span class="keyword">let</span> newStr2 = data.withUnsafeBytes(<span class="type">String</span>.<span class="keyword">init</span>(utf8String:))</div></pre></td></tr></table></figure></p>
<p>但是在实际的测试中，并不能完成将NSData转换为NSData中存储的十六进制字符串的功能，所以在最终找到答案之后，决定记录下来，以便下次使用可以快速查找。</p>
<p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSData</span> *)convertHexStrToData:(<span class="built_in">NSString</span> *)str &#123;</div><div class="line">    <span class="keyword">if</span> (!str || [str length] == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableData</span> *hexData = [[<span class="built_in">NSMutableData</span> alloc] initWithCapacity:<span class="number">8</span>];</div><div class="line">    <span class="built_in">NSRange</span> range;</div><div class="line">    <span class="keyword">if</span> ([str length] % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">        range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = range.location; i &lt; [str length]; i += <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> anInt;</div><div class="line">        <span class="built_in">NSString</span> *hexCharStr = [str substringWithRange:range];</div><div class="line">        <span class="built_in">NSScanner</span> *scanner = [[<span class="built_in">NSScanner</span> alloc] initWithString:hexCharStr];</div><div class="line">        </div><div class="line">        [scanner scanHexInt:&amp;anInt];</div><div class="line">        <span class="built_in">NSData</span> *entity = [[<span class="built_in">NSData</span> alloc] initWithBytes:&amp;anInt length:<span class="number">1</span>];</div><div class="line">        [hexData appendData:entity];</div><div class="line">        </div><div class="line">        range.location += range.length;</div><div class="line">        range.length = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hexdata: %@"</span>, hexData);</div><div class="line">    <span class="keyword">return</span> hexData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>传入参数字符串<code>@&quot;400&quot;</code>时，打印出来的是 <code>hexdata: &lt;0400&gt;</code>。十六进制的400就是10进制的1024。</p>
<p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)convertDataToHexStr:(<span class="built_in">NSData</span> *)data &#123;</div><div class="line">    <span class="keyword">if</span> (!data || [data length] == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSMutableString</span> *string = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:[data length]];</div><div class="line">    </div><div class="line">    [data enumerateByteRangesUsingBlock:^(<span class="keyword">const</span> <span class="keyword">void</span> *bytes, <span class="built_in">NSRange</span> byteRange, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *dataBytes = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)bytes;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; byteRange.length; i++) &#123;</div><div class="line">            <span class="built_in">NSString</span> *hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%x"</span>, (dataBytes[i]) &amp; <span class="number">0xff</span>];</div><div class="line">            <span class="keyword">if</span> ([hexStr length] == <span class="number">2</span>) &#123;</div><div class="line">                [string appendString:hexStr];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                [string appendFormat:<span class="string">@"0%@"</span>, hexStr];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将上一个🌰的NSData作为参数传入时，返回的字符串为<code>400</code>。转换完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在完成一个需求时，遇到了&lt;code&gt;NSData&lt;/code&gt;类型转换为十六进制的字符串这个需求的函数，在&lt;code&gt;stackoverflow&lt;/code&gt;中翻找的时候，给出的答案基本上是如下的:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight obj
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——自主设计日志系统</title>
    <link href="http://yoursite.com/2017/06/28/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E8%87%AA%E4%B8%BB%E8%AE%BE%E8%AE%A1%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/06/28/iOS开发——自主设计日志系统/</id>
    <published>2017-06-28T09:37:01.000Z</published>
    <updated>2017-06-28T09:37:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>好像很久没有写有关iOS的文章了，其实iOS的开发一直都是在进行的，但是最近有需求拓宽知识的宽度，所以一直在接触别的知识，当然啦，移动端开发并不能丢下。</p>
<p>我平时开发的项目监测bug和崩溃的模块都是集成了鹅厂的<code>Bugly</code>系统，毕竟是谁用谁说好的第三方系统。而<code>Bugly</code>主要还是返回的还是崩溃之后的日志，所以如果想在平时的运行中，就能拿到客户手机中的日志怎么办呢。在这个需求的驱使下，便开始着手设计一个日志系统。</p>
<p>需求还是不难的，记录手机操作的内容，如</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">时间|日志级别|类名_函数名_行数|分类|Log内容</div></pre></td></tr></table></figure></p>
<p>这样的一种日志形式。</p>
<p>因为不希望频繁的读写，所以希望每十条Log生成之后，读写一次。而未写入硬盘的Log保存在内存中。按照天数，每天都有一份日志，并且在客户的手机异常之后，可以将所有日志压缩上传到服务器。需求介绍完了，并不难对不对。</p>
<p>&lt;!--more--&gt;</p>
<p>在Log的生成方面，我的设计是枚举出日志的级别，之后利用Swift的 <code>#function</code> 和 <code>#line</code>等定义，方便的获取函数名和行数，类名我是利用一个对于<code>NSObject</code>的<code>extension</code>来完成的，类似这样：</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> className: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">String</span>(describing: type(of: <span class="keyword">self</span>)).components(separatedBy: <span class="string">"."</span>).last!</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">className</span>: <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">String</span>(describing: <span class="keyword">self</span>).components(separatedBy: <span class="string">"."</span>).last!</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开箱可用，准确获取类名。</p>
<p>生成log的核心函数例如如下这样：</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createLog</span><span class="params">(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  <span class="number">_</span> line: Int = #line, <span class="number">_</span> function: String = #function)</span></span></div><div class="line">-&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> lineStr = <span class="type">String</span>.<span class="keyword">init</span>(format: <span class="string">"line:%d"</span>, line)</div><div class="line">    <span class="keyword">let</span> levelStr = levelToString(level: level)</div><div class="line">    <span class="keyword">let</span> separator = <span class="string">"|"</span></div><div class="line">    <span class="keyword">let</span> classSeparator = <span class="string">"_"</span></div><div class="line">    <span class="keyword">let</span> log: <span class="type">String</span> = <span class="type">Date</span>().<span class="built_in">toString</span>() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + <span class="string">"\n"</span></div><div class="line">    <span class="built_in">print</span>(log)</div><div class="line">    <span class="keyword">return</span> log</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而基于这个函数做一些封装，就能封装出很简便的打印各级别日志的API了。</p>
<p>至此，介绍完Log的生成类： <code>LogGenerator</code>。</p>
<p>之后是对日志的读写，需要有一个文件读写的类，暂定名为<code>LogStorage</code>。</p>
<p>因为文件的读写都是常规的操作，所以代码就不贴出来了。我在这里只是贴出我在<code>LogStorage</code>类里暴露的接口方法</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LogStorageProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/// 获取日志缓存地址</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Returns: String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getCachePath</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">/// 删除文件</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameter fileName: String</span></div><div class="line">    <span class="comment">/// - Returns: Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteFile</span><span class="params">(fileName: String)</span></span> -&gt; <span class="type">Bool</span></div><div class="line"></div><div class="line">    <span class="comment">/// 清除全部日志缓存</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Returns: Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanCache</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></div><div class="line"></div><div class="line">    <span class="comment">/// 读取日志文件</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameter fileName: String</span></div><div class="line">    <span class="comment">/// - Returns: Data</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(fileName: String)</span></span> -&gt; <span class="type">Data</span>?</div><div class="line"></div><div class="line">    <span class="comment">/// 更新写入Log数据</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameters:</span></div><div class="line">    <span class="comment">///   - fileName: String</span></div><div class="line">    <span class="comment">///   - data: Data</span></div><div class="line">    <span class="comment">/// - Returns: Data</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateFile</span><span class="params">(fileName: String, data: Data)</span></span> -&gt; <span class="type">Bool</span></div><div class="line"></div><div class="line">    <span class="comment">/// 自动根据天数创建文件名</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Returns: String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createFileName</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数组，容量是11个元素，还有一个充当哨兵。</p>
<p>循环队列的数据结构是队列的数据结构里最基础的</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">QueueProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createQueue</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">traverseQueue</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isFullQueue</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmptyQueue</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">Enqueue</span><span class="params">(log: String)</span></span> -&gt; <span class="type">Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">Dequeue</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在内部增加了一个遍历队列写入日志的函数</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private func updateFileWhenTranverse() &#123;</div><div class="line">    var i = queue.front</div><div class="line">    while (i != queue.rear) &#123;</div><div class="line">        let fileName = LogStorage.share.createFileName()</div><div class="line">        let data = queue.logData[i].data(using: .utf8)</div><div class="line">        if (LogStorage.share.updateFile(fileName: fileName, data: data!)) &#123;</div><div class="line">            let _ = Dequeue()</div><div class="line">        &#125;</div><div class="line">        i += 1</div><div class="line">        i = i % queue.maxsize</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而最后一个需求就是压缩上传了，在这里使用了<code>SSZipArchive</code>这个第三方库来压缩文件成zip格式。封装成<code>LogArchive</code>类。是不是三言两语间，整个日志系统就设计完成了，但是我是用<code>Swift</code>来写的，若是<code>Objective-C</code>调用怎么办呢。答案当然是用Objc强大的宏定义来搞定咯，几个宏定义，轻松的一行代码就调用了Log输出。</p>
<p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define Cute_Debug(log) [[LogGenerator new] debugWithTargetClass:self.classForCoder content:[NSString stringWithFormat:@<span class="meta-string">"%@"</span>, log] :(NSInteger)__LINE__ :[NSString stringWithFormat:@<span class="meta-string">"%s"</span>, __FUNCTION__]];</span></div><div class="line"></div><div class="line"><span class="meta">#define Cute_Warning(log) [[LogGenerator new] warningWithTargetClass:self.classForCoder content:[NSString stringWithFormat:@<span class="meta-string">"%@"</span>, log] :(NSInteger)__LINE__ :[NSString stringWithFormat:@<span class="meta-string">"%s"</span>, __FUNCTION__]];</span></div><div class="line"></div><div class="line"><span class="meta">#define Cute_Info(log) [[LogGenerator new] infoWithTargetClass:self.classForCoder content:[NSString stringWithFormat:@<span class="meta-string">"%@"</span>, log] :(NSInteger)__LINE__ :[NSString stringWithFormat:@<span class="meta-string">"%s"</span>, __FUNCTION__]];</span></div><div class="line"></div><div class="line"><span class="meta">#define Cute_Error(log) [[LogGenerator new] errorWithTargetClass:self.classForCoder content:[NSString stringWithFormat:@<span class="meta-string">"%@"</span>, log] :(NSInteger)__LINE__ :[NSString stringWithFormat:@<span class="meta-string">"%s"</span>, __FUNCTION__]];</span></div></pre></td></tr></table></figure></p>
<p>整个日志系统，我已经开源放在了我的<a href="https://github.com/originalix/CuteLogger" target="_blank" rel="external">github</a>上，具体的代码可以去github上看。
欢迎提issue，如果有用，请点个star谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好像很久没有写有关iOS的文章了，其实iOS的开发一直都是在进行的，但是最近有需求拓宽知识的宽度，所以一直在接触别的知识，当然啦，移动端开发并不能丢下。&lt;/p&gt;
&lt;p&gt;我平时开发的项目监测bug和崩溃的模块都是集成了鹅厂的&lt;code&gt;Bugly&lt;/code&gt;系统，毕竟是谁用
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Cute-Logger" scheme="http://yoursite.com/tags/Cute-Logger/"/>
    
      <category term="日志系统" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux的用户管理(二)</title>
    <link href="http://yoursite.com/2017/06/21/Linux%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/06/21/Linux的用户管理(二)/</id>
    <published>2017-06-21T09:45:39.000Z</published>
    <updated>2017-06-21T09:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次的博客我们讲了关于Linux的用户管理的内容，现在我们来讲第二部分——系统用户组的管理。</p>
<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于它同名的用户组，这个用户组在创建用户的同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p>
<h3>增加用户组</h3>
<p>添加一个新的用户组，使用<code>groupadd</code>命令。 格式如下</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">groupadd [options] [group]</div><div class="line"></div><div class="line">可以使用的选项有： </div><div class="line">-g GID 指定新用户组的组标识号（GID）。</div><div class="line">-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</div></pre></td></tr></table></figure></p>
<p>&lt;!--more--&gt;</p>
<p>举个🌰：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">groupadd group1</div><div class="line"></div><div class="line">此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。 </div><div class="line"></div><div class="line">groupadd -g 101 group2</div><div class="line"></div><div class="line">此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</div></pre></td></tr></table></figure></p>
<h3>删除用户组</h3>
<p>如果要删除一个存在的用户组，使用<code>groupdel</code>命令,格式如下</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupdel [用户组]</div></pre></td></tr></table></figure></p>
<p>举个🌰：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># groupdel group1</div><div class="line"></div><div class="line">此命令从系统中删除组group1</div></pre></td></tr></table></figure></p>
<h3>修改用户组属性</h3>
<p>修改用户组的属性使用<code>groupmod</code>命令。其语法如下</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">groupmod 选项 用户组</div><div class="line"></div><div class="line">常用的选项有： </div><div class="line"></div><div class="line">-g GID 为用户组指定新的组标识号。</div><div class="line"></div><div class="line">-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</div><div class="line"></div><div class="line">-n新用户组 将用户组的名字改为新名字</div></pre></td></tr></table></figure></p>
<p>举个🌰:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># groupmod -g 102 group2</div><div class="line"></div><div class="line">此命令将组group2的组标识号修改为102。 </div><div class="line"></div><div class="line">groupmod –g 10000 -n group3 group2</div><div class="line"></div><div class="line">此命令将组group2的标识号改为10000，组名修改为group3</div></pre></td></tr></table></figure></p>
<h3>切换用户组</h3>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。用户可以在登录后，使用命令<code>newgrp</code>切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ newgrp root</div></pre></td></tr></table></figure></p>
<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
<h3>账号相关的系统文件</h3>
<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括<code>/etc/passwd</code>, <code>/etc/shadow</code>, <code>/etc/group</code>等。下面分别介绍这些文件的内容。</p>
<p><code>/etc/passwd</code>文件是用户管理工作涉及的最重要的一个文件。Linux系统中的每个用户都在<code>/etc/passwd</code>文件中有一个对应的记录行，它记录了这个用户的一些基本属性。这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">　　＃ cat /etc/passwd</div><div class="line">　　</div><div class="line"></div><div class="line">　　root:x:0:0:Superuser:/:</div><div class="line"></div><div class="line">　　daemon:x:1:1:System daemons:/etc:</div><div class="line"></div><div class="line">　　bin:x:2:2:Owner of system commands:/bin:</div><div class="line"></div><div class="line">　　sys:x:3:3:Owner of system files:/usr/sys:</div><div class="line"></div><div class="line">　　adm:x:4:4:System accounting:/usr/adm:</div><div class="line"></div><div class="line">　　uucp:x:5:5:UUCP administrator:/usr/lib/uucp:</div><div class="line"></div><div class="line">　　auth:x:7:21:Authentication administrator:/tcb/files/auth:</div><div class="line"></div><div class="line">　　cron:x:9:16:Cron daemon:/usr/spool/cron:</div><div class="line"></div><div class="line">　　listen:x:37:4:Network daemon:/usr/net/nls:</div><div class="line"></div><div class="line">　　lp:x:71:18:Printer administrator:/usr/spool/lp:</div><div class="line"></div><div class="line">　　sam:x:200:50:Sam san:/usr/sam:/bin/sh</div></pre></td></tr></table></figure></p>
<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</div></pre></td></tr></table></figure></p>
<ul>
<li>
<p>“用户名”是代表用户账号的字符串。通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
</li>
<li>
<p>“口令”一些系统中，存放着加密后的用户口令字。。虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
</li>
<li>
<p>“用户标识号”是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>
</li>
</ul>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
<ul>
<li>
<p>“组标识号”字段记录的是用户所属的用户组。它对应着/etc/group文件中的一条记录。</p>
</li>
<li>
<p>“注释性描述”字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p>
</li>
<li>
<p>“主目录”，也就是用户的起始工作目录，它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
</li>
<li>
<p>用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p>
</li>
</ul>
<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
<p>用户组的所有信息都存放在/etc/group文件中。</p>
<p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">组名:口令:组标识号:组内用户列表</div></pre></td></tr></table></figure></p>
<ul>
<li>
<p>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</p>
</li>
<li>
<p>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</p>
</li>
<li>
<p>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</p>
</li>
<li>
<p>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p>
</li>
</ul>
<p>举个🌰:</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">　　/etc/group文件的一个例子如下： </div><div class="line"></div><div class="line">　　# cat /etc/group </div><div class="line"></div><div class="line">　　root::0:root</div><div class="line"></div><div class="line">　　bin::2:root,bin</div><div class="line"></div><div class="line">　　sys::3:root,uucp</div><div class="line"></div><div class="line">　　adm::4:root,adm</div><div class="line"></div><div class="line">　　daemon::5:root,daemon</div><div class="line"></div><div class="line">　　lp::7:root,lp</div><div class="line"></div><div class="line">　　users::20:root,sam</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次的博客我们讲了关于Linux的用户管理的内容，现在我们来讲第二部分——系统用户组的管理。&lt;/p&gt;
&lt;p&gt;每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于它同名的用户组，这个用户组在创
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的用户管理(一)</title>
    <link href="http://yoursite.com/2017/06/12/Linux%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/06/12/Linux的用户管理(一)/</id>
    <published>2017-06-12T08:25:53.000Z</published>
    <updated>2017-06-12T12:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在看《鸟哥的Linux私房菜》的第四章之前，我操作Linux系统时，习惯性的使用<code>root</code>账号，为什么呢？无非图一个方便，没有那么多权限设置，对当时我这个<code>Linux</code>小白来说，再好不过了。但是看完了鸟哥的书，我才意识到当时的操作是有多大的问题，所以在此书写一下以便日后回顾。</p>
<p><code>Linux</code>系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。每个用户账号都拥有一个惟一的用户名和各自的口令。用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>&lt;!--more--&gt;</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：
- 用户账号的添加、删除与修改。
- 用户口令的管理。
- 用户组的管理。</p>
<h2>Linux系统用户账号的管理</h2>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p>
<h3>添加账号</h3>
<p>** 添加新的用户账号使用useradd命令，其语法如下：  **</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">useradd 选项 用户名</div><div class="line"></div><div class="line"></div><div class="line">其中各选项含义如下：</div><div class="line"></div><div class="line">-c comment 指定一段注释性描述。</div><div class="line"></div><div class="line"><span class="_">-d</span> 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</div><div class="line"></div><div class="line">-g 用户组 指定用户所属的用户组。</div><div class="line"></div><div class="line">-G 用户组，用户组 指定用户所属的附加组。</div><div class="line"></div><div class="line"><span class="_">-s</span> Shell文件 指定用户的登录Shell。</div><div class="line"></div><div class="line">-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</div><div class="line"></div><div class="line">用户名 指定新账号的登录名。</div></pre></td></tr></table></figure></p>
<p>举个🌰子</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># useradd –d /usr/lix -m lix</div><div class="line"></div><div class="line">此命令创建了一个用户lix，</div><div class="line">其中-d和-m选项用来为登录名lix产生一个主目录/usr/lix（/usr为默认的用户主目录所在的父目录）。</div></pre></td></tr></table></figure></p>
<h3>删除账号</h3>
<p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。删除一个已有的用户账号使用userdel命令，其格式如下</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">userdel 选项 用户名</div><div class="line"></div><div class="line">常用的选项是-r，它的作用是把用户的主目录一起删除。</div></pre></td></tr></table></figure></p>
<p>例如：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># userdel lix</span></div></pre></td></tr></table></figure></p>
<p>此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<h3>修改账号</h3>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用usermod命令，其格式如下：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">usermod 选项 用户名</div><div class="line"></div><div class="line"></div><div class="line">常用的选项包括-c, <span class="_">-d</span>, -m, -g, -G, <span class="_">-s</span>, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。另外，有些系统可以使用如下选项：</div><div class="line"></div><div class="line">　　</div><div class="line"> <span class="_">-l</span> 新用户名</div><div class="line"></div><div class="line"></div><div class="line">这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</div></pre></td></tr></table></figure></p>
<p>🌰子：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod <span class="_">-s</span> /bin/ksh <span class="_">-d</span> /home/z –g developer lix</div></pre></td></tr></table></figure></p>
<p>此命令将用户lix的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<h3>用户口令管理</h3>
<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">passwd 选项 用户名</div><div class="line"></div><div class="line"></div><div class="line">可使用的选项：</div><div class="line"></div><div class="line"><span class="_">-l</span> 锁定口令，即禁用账号。</div><div class="line"></div><div class="line">-u 口令解锁。</div><div class="line"></div><div class="line"><span class="_">-d</span> 使账号无口令。</div><div class="line"></div><div class="line"><span class="_">-f</span> 强迫用户下次登录时修改口令。</div><div class="line"></div><div class="line">如果默认用户名，则修改当前用户的口令。</div></pre></td></tr></table></figure></p>
<p>例如，假设当前用户是lix，则下面的命令修改该用户自己的口令：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　$ passwd</div><div class="line"></div><div class="line">　　Old password:******</div><div class="line"></div><div class="line">　　New password:*******</div><div class="line"></div><div class="line">　　Re-enter new password:*******</div></pre></td></tr></table></figure></p>
<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　# passwd lix</div><div class="line"></div><div class="line">　　New password:*******</div><div class="line"></div><div class="line">　　Re-enter new password:*******</div></pre></td></tr></table></figure></p>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd -d lix</div></pre></td></tr></table></figure></p>
<p>此命令将用户lix的口令删除，这样用户lix下一次登录时，系统就不再询问口令。</p>
<p>passwd命令还可以用-l(lock)选项锁定某一用户，使其不能登录，例如：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd -l lix</div></pre></td></tr></table></figure></p>
<p>关于用户操作账户操作的 今天先讲到这里，用户组的操作下章接着记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看《鸟哥的Linux私房菜》的第四章之前，我操作Linux系统时，习惯性的使用&lt;code&gt;root&lt;/code&gt;账号，为什么呢？无非图一个方便，没有那么多权限设置，对当时我这个&lt;code&gt;Linux&lt;/code&gt;小白来说，再好不过了。但是看完了鸟哥的书，我才意识到当时的操
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Liunx的文件权限</title>
    <link href="http://yoursite.com/2017/06/02/Liunx%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/06/02/Liunx的文件权限/</id>
    <published>2017-06-02T02:37:39.000Z</published>
    <updated>2017-06-02T02:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前讲过为了统一开发环境生产环境以及更换开发机器的情况，我把环境统一由<code>Vagrant</code>部署在<code>Linux</code>的虚拟机中，但是由于我对<code>Linux</code>系统没有系统的学习过，对于环境的部署也仅仅通过谷歌等刚刚入门，所以在具体的开发中我还是经常在<code>Linux</code>中遇到问题，经常求教老大。看着老大熟练的把玩<code>Linux</code>，我也下定决心要把<code>Linux</code>掌握好。</p>
<p>经自己了解，《鸟哥的Linux私房菜》一书备受推崇，于是于半个月前购入，开始拜读学习。在日常的工作时间之外，断断续续的学习着，确实受益匪浅，厚厚的一本书现在才看了四分之一左右，决定还是抽出时间记录一下自己曾经对于<code>Linux</code>感到困惑的一些事情。</p>
<p>今天就来说说<code>Linux</code>中文件权限的一些门门道道。</p>
<p>&lt;!--more--&gt;</p>
<p>当初我在部署第一个<code>Laravel</code>项目到阿里云的时候，在部署完成后，看到教程中要给<code>storage</code>文件设置权限，当时这个777 775等这种数字简直把我弄迷糊了。只能对照着命令乖乖的敲进去，神奇的是敲进去之后，果然问题解决了，站点能访问了。感觉甚是困惑。看完书中的文件权限一章之后，才发觉<code>Linux</code>中文件权限的神奇。</p>
<p>查看文件权限的语句：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在终端输入:</span></div><div class="line">ls <span class="_">-l</span> xxx.xxx （xxx.xxx是文件名）</div><div class="line"><span class="comment"># 那么就会出现相类似的信息，主要都是这些：</span></div><div class="line">-rw-rw-r--</div></pre></td></tr></table></figure></p>
<p>一共有10位数</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">其中： 最前面那个 - 代表的是类型</div><div class="line">中间那三个 rw- 代表的是所有者（user）</div><div class="line">然后那三个 rw- 代表的是组群（group）</div><div class="line">最后那三个 r-- 代表的是其他人（other）</div><div class="line">然后我再解释一下后面那9位数：</div><div class="line">r 表示文件可以被读（<span class="built_in">read</span>）</div><div class="line">w 表示文件可以被写（write）</div><div class="line">x 表示文件可以被执行（如果它是程序的话）</div><div class="line">- 表示相应的权限还没有被授予</div><div class="line"></div><div class="line">现在该说说修改文件权限了</div><div class="line">在终端输入：</div><div class="line">chmod o w xxx.xxx</div><div class="line">表示给其他人授予写xxx.xxx这个文件的权限</div><div class="line">chmod go-rw xxx.xxx</div><div class="line">表示删除xxx.xxx中组群和其他人的读和写的权限</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">其中：</div><div class="line">　　u 代表所有者（user）</div><div class="line">　　g 代表所有者所在的组群（group）</div><div class="line">　　o 代表其他人，但不是u和g （other）</div><div class="line">　　a 代表全部的人，也就是包括u，g和o</div><div class="line">　　r 表示文件可以被读（<span class="built_in">read</span>）</div><div class="line">　　w 表示文件可以被写（write）</div><div class="line">　　x 表示文件可以被执行（如果它是程序的话）</div><div class="line">　　其中：rwx也可以用数字来代替</div><div class="line">　　r ------------4</div><div class="line">　　w -----------2</div><div class="line">　　x ------------1</div><div class="line">　　- ------------0</div></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">行动：</div><div class="line">　　 表示添加权限</div><div class="line">　　- 表示删除权限</div><div class="line">　　= 表示使之成为唯一的权限</div><div class="line">　　当大家都明白了上面的东西之后，那么我们常见的以下的一些权限就很容易都明白了：</div><div class="line">　　-rw------- (600) 只有所有者才有读和写的权限</div><div class="line">　　-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限</div><div class="line">　　-rwx------ (700) 只有所有者才有读，写，执行的权限</div><div class="line">　　-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限</div><div class="line">　　-rwx--x--x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限</div><div class="line">　　-rw-rw-rw- (666) 每个人都有读写的权限</div><div class="line">　　-rwxrwxrwx (777) 每个人都有读写和执行的权限</div></pre></td></tr></table></figure></p>
<p>常用的权限修改命令:</p>
<ul>
<li>chgrp ：改变文件所属群组</li>
<li>chown ：改变文件拥有者</li>
<li>chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性</li>
</ul>
<p>改变权限, chmod</p>
<p>文件权限的改变使用的是chmod这个指令，但是，权限的设定方法有两种， 分别可以使用数字或者是符号来进行权限的变更。我们就来谈一谈：</p>
<p>数字类型改变文件权限</p>
<p>各权限的分数对照表如下：
r:4
w:2
x:1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：
owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0</p>
<p>在讲解清楚了这种权限分值的累加之后，再去体会自己当初敲入命令行中的数字，是不是恍然大悟了呢。不知道你们是不是，反正我是这样的。今天小小的知识点就记录到这里，下次有时间再更新咯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前讲过为了统一开发环境生产环境以及更换开发机器的情况，我把环境统一由&lt;code&gt;Vagrant&lt;/code&gt;部署在&lt;code&gt;Linux&lt;/code&gt;的虚拟机中，但是由于我对&lt;code&gt;Linux&lt;/code&gt;系统没有系统的学习过，对于环境的部署也仅仅通过谷歌等刚刚入门，
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Vagrant来搭建开发环境</title>
    <link href="http://yoursite.com/2017/05/15/%E4%BD%BF%E7%94%A8Vagrant%E6%9D%A5%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/05/15/使用Vagrant来搭建开发环境/</id>
    <published>2017-05-15T08:36:31.000Z</published>
    <updated>2017-05-15T08:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在大半年前刚刚接触PHP的时候，因为那时候只想先熟悉PHP的语法，并且对配置服务器、Mysql等一干事情不想花费太多时间，于是在网上找到了XAMPP这个解决方案。当时那是惊为天人，感觉虚拟主机很是方便。但是随着后来自己的慢慢深入，并且也在云服务器上陆续的部署自己的小项目，这才感觉到一个很恶心的事情，就是本地和线上的开发环境不同意，导致自己在频繁的修改配置文件，并且主力开发机器是用mac，家里还有win10的台式机，线上是Liunx系统，各种不一样的环境让我想寻求一个解决方案，统一线上和线下的开发环境。</p>
<p>在这种想法的指引下，很快有一个解决方案进入我的视线。通过搭建Liunx虚拟机，解决线上线下开发环境不统一的情况。这个解决方案，就是<code>VirtualBox</code> + <code>Vagrant</code>。目前他能完成我的所有需求，并且提供了很快捷的打包，来实现开发环境的迁移及统一部署，非常好用。本文就来记录如何使用Vagrant这个工具，好让我在日后部署环境的时候，能够把这些命令翻出来再看看。</p>
<p>&lt;!--more--&gt;</p>
<h2>安装</h2>
<blockquote>
<p>实际上Vagrant只是一个让你可以方便设置你想要的虚拟机的便携式工具，它底层支持VirtualBox、VMware甚至AWS作为虚拟机系统，本书中我们将使用VirtualBox来进行说明，所以第一步需要先安裝Vagrant和VirtualBox。</p>
</blockquote>
<p>安装环境：mac
注：windows环境下，基本一致</p>
<h3>安装VirtualBox</h3>
<p>直接来到官网 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">https://www.virtualbox.org/wiki/Downloads</a> 点击下载最新的virtualbox，双击安装，一路傻瓜化完成。</p>
<h3>安装Vagrant</h3>
<p>在进行完上一个步骤后，我们就要考虑我们的虚拟机需要使用什么操作系统了。因为我线上使用了<code>Ubuntu16.04</code>的操作系统，所以我线下也选择了16.04的<code>Ubuntu</code>操作系统。在以前使用vm的过程中，我们需要自己去下载镜像，然后进行相关的安装，设置系统等等操作。而vagrant的开源社区，提供了很多已经打包好的操作系统，在vagrant的世界里被称为box。在 <a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a> 这里你可以找到你想要的操作系统box，当然你也可以自己制作一个。后续教程会讲到，这里就不多说。</p>
<p>我的开发机是Mac，所以我建立了如下的开发环境目录：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /Users/vagrant</div><div class="line">$ cd /Users/vagrant</div></pre></td></tr></table></figure></p>
<p>这里注意，vagrant提供的在线安装，有可能因为天朝的网络原因，很慢或者下载失败，所以我会找到box的下载链接，用迅雷等工具下载好这个盒子。之后执行安装设置</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vagrant box add &#123;title&#125; &#123;url&#125;</div><div class="line">$ vagrant init &#123;title&#125;</div><div class="line">$ vagrant up</div></pre></td></tr></table></figure></p>
<p><code>vagrant box add</code> 是添加box的命令
其中｛title｝可以自行设置，我这里使用的是 <code>Ubuntu</code> ，｛url｝是下载到本地box路径。我的路径是：/Users/vagrant/ubuntu.box</p>
<p>box中的镜像文件被放到了：/Users/.vagrant.d/boxes/，如果在window系统中应该是放到了： C:\Users\当前用户名.vagrant.d\boxes\目录下。</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 如果是才add 的box，就必须执行本步骤，初始化一次后，以后启动系统，就不需要执行本步骤。</div><div class="line">$ vagrant init Ubuntu</div></pre></td></tr></table></figure></p>
<p>输出如下 :</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A `Vagrantfile` has been placed in this directory.</div><div class="line">You are now ready to `vagrant up` your first virtual environment!</div><div class="line">Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant.</div></pre></td></tr></table></figure></p>
<p>这样就会在当前目录生成一个 Vagrantfile的文件，里面有很多配置信息，后面我在慢慢说，默认不做任何配置改动，也是可以启动系统的。</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动系统</div><div class="line">$ vagrant up</div></pre></td></tr></table></figure></p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...</div><div class="line">[default] Importing base box &apos;base&apos;...</div><div class="line">[default] Matching MAC address for NAT networking...</div><div class="line">[default] Setting the name of the VM...</div><div class="line">[default] Clearing any previously set forwarded ports...</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2>ssh链接到虚拟机</h2>
<p>经过以上操作后，完成了虚拟机的安装，现在需要登录上虚拟机，进行操作。链接很简单，可以使用第三方（xshell等）shell工具或系统自带的，进行登录
在系统中，如mac，可直接使用 vagrant ssh 来完成链接。或者使用第三方如xshell，ip地址是：localhost，端口，需要观察，映射的22端口是多少。一般是2200 或者2222
用户名与密码均是： vagrant</p>
<h2>vagrant的命令详解</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>vagrant box add</td>
<td>添加box的操作</td>
</tr>
<tr>
<td>vagrant init</td>
<td>初始化box的操作，会生成vagrant的配置文件Vagrantfile</td>
</tr>
<tr>
<td>vagrant up</td>
<td>启动本地环境</td>
</tr>
<tr>
<td>vagrant ssh</td>
<td>通过 ssh 登录本地环境所在虚拟机</td>
</tr>
<tr>
<td>vagrant halt</td>
<td>关闭本地环境</td>
</tr>
<tr>
<td>vagrant suspend</td>
<td>暂停本地环境</td>
</tr>
<tr>
<td>vagrant resume</td>
<td>恢复本地环境</td>
</tr>
<tr>
<td>vagrant reload</td>
<td>修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）</td>
</tr>
<tr>
<td>vagrant destroy</td>
<td>彻底移除本地环境</td>
</tr>
<tr>
<td>vagrant box list</td>
<td>显示当前已经添加的box列表</td>
</tr>
<tr>
<td>vagrant box remove</td>
<td>删除相应的box</td>
</tr>
<tr>
<td>vagrant package</td>
<td>打包命令，可以把当前的运行的虚拟机环境进行打包</td>
</tr>
<tr>
<td>vagrant plugin</td>
<td>用于安装卸载插件</td>
</tr>
<tr>
<td>vagrant status</td>
<td>获取当前虚拟机的状态</td>
</tr>
<tr>
<td>vagrant global-status</td>
<td>显示当前用户Vagrant的所有环境状态</td>
</tr>
</tbody>
</table>
<h2>后记</h2>
<p>配置好Vagrant只是开始，而之后在Linux配置环境，可以参考我之前的一篇文章，在《云服务器上部署Laravel》这篇文章，来配置自己的<code>LNMP</code>环境。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大半年前刚刚接触PHP的时候，因为那时候只想先熟悉PHP的语法，并且对配置服务器、Mysql等一干事情不想花费太多时间，于是在网上找到了XAMPP这个解决方案。当时那是惊为天人，感觉虚拟主机很是方便。但是随着后来自己的慢慢深入，并且也在云服务器上陆续的部署自己的小项目，这
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Vagrant" scheme="http://yoursite.com/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置二级域名</title>
    <link href="http://yoursite.com/2017/05/05/nginx%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/05/05/nginx配置二级域名/</id>
    <published>2017-05-05T09:23:29.000Z</published>
    <updated>2017-05-15T08:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近为了练手Vue框架，写了一个博客项目，昨天刚刚把个人博客部署上线，因为前后端分离，所以使用Ajax来请求后端api接口获取数据，部署的过程中碰到了一个坑。我只有一个域名，所以想让一级域名<code>originalix.com</code>来访问博客，而使用二级域名<code>demo.originalix.com</code>来访问后端页面并且请求api。</p>
<p>怎么做呢，在查阅了资料以后发现，首先应该在域名供应商中添加一条二级域名的记录，比如我想使用的是<strong>demo</strong>。</p>
<p><img src="http://originalix.github.io/assets/img/nginxdomain.png" alt=""></p>
<p>设置好域名后，在本地<strong>ping</strong>一下看看能不能<strong>ping</strong>通过 <code>demo.originalix.com</code></p>
<p>&lt;!--more--&gt;</p>
<p>接下来，ssh进服务器，找到你安装的nginx，启动并且配置。</p>
<ul>
<li>安装nginx</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<ul>
<li>重启nginx</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx start</div></pre></td></tr></table></figure></p>
<ul>
<li>进入nginx配置文件</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure></p>
<p>在配置文件中可以这样写</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">server &#123;  </div><div class="line">    listen 80;</div><div class="line">    server_name originalix.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header   X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header   Host      $http_host;</div><div class="line">        proxy_pass         http://127.0.0.1:2368;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">server &#123;  </div><div class="line">    listen 80;</div><div class="line">    server_name demo.originalix.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header   X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header   Host      $http_host;</div><div class="line">        proxy_pass         http://127.0.0.1:8000;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而我具体是因为后端是<code>Laravel</code>框架的项目，所以我得配置文件是这样写的</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server;</div><div class="line"></div><div class="line">    root /var/www/;</div><div class="line"></div><div class="line">    index index.html index.htm index.nginx-debian.html;</div><div class="line"></div><div class="line">    # server_name 110.223.38.82;</div><div class="line">    server_name http://originalix.xyz;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">            try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">            try_files $uri /index.php =404;</div><div class="line">            fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">            fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class="line">            fastcgi_index index.php;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">            include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name demo.originalix.com;</div><div class="line">    root /var/www/originalix/public;</div><div class="line">    index index.php index.html index.htm;</div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">      try_files $uri /index.php =404;</div><div class="line">      fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">      fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class="line">      fastcgi_index index.php;</div><div class="line">      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">      include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后重启nginx，并且打开浏览器，输入 <code>demo.originalix.com</code> 就ok了</p>
<p>ps:在整个过程中如果遇到什么问题，比如 nginx启动失败。可以看一下这里：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//这个命令可以看一下你的nginx配置文件有没有问题，</div><div class="line">//如果有问题它会指出，做相应的修改，直到没报错</div><div class="line">nginx -t </div><div class="line"></div><div class="line"></div><div class="line">//查看日志。比如我nginx -t明明没问题，老是启动失败，</div><div class="line">//看了日志才知道 Address already in use，端口被占用o(╯□╰)o</div><div class="line">cat /var/log/nginx/error.log</div></pre></td></tr></table></figure></p>
<p>还是那句话，失败了一定要学会看日志！！！看日志！！！看日志！！！</p>
<p>很简单的事情，我也是摸索了一会儿，崩溃ing。</p>
<p>所以写个博客记录下来，希望能帮助到大家。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近为了练手Vue框架，写了一个博客项目，昨天刚刚把个人博客部署上线，因为前后端分离，所以使用Ajax来请求后端api接口获取数据，部署的过程中碰到了一个坑。我只有一个域名，所以想让一级域名&lt;code&gt;originalix.com&lt;/code&gt;来访问博客，而使用二级域名&lt;c
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="Domin" scheme="http://yoursite.com/tags/Domin/"/>
    
  </entry>
  
  <entry>
    <title>简单的编程体会</title>
    <link href="http://yoursite.com/2017/04/26/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BC%96%E7%A8%8B%E4%BD%93%E4%BC%9A/"/>
    <id>http://yoursite.com/2017/04/26/简单的编程体会/</id>
    <published>2017-04-26T09:09:52.000Z</published>
    <updated>2017-04-26T09:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的这篇博文，我不谈及具体的编程技术，只想从这段时间的学习以及写代码的过程中，分享一下自己的编程体会。</p>
<p>&lt;!--more--&gt;</p>
<p>上周呢，项目中碰到了一个新的任务，要接入一个第三方外设厂商的蓝牙设备，对方公司提供了一个sdk。其实接入一个sdk这个小事情呢，每个从业者都会碰到，合理的选用第三方的sdk服务能大大缩短我们的开发时间，让我们把目光都放到自己的核心业务上去。而碰巧这个sdk是对方公司新写出来的，于是，本着怀疑的态度，我开始了对这个sdk包的接入工作。</p>
<p>由于这个sdk包是新版，为了预防后面的升级，为了松耦合，我在这个第三方库上加了一层完整的封装。仔细的整理好项目的需求，封装了一层适用于项目的API接口，并且提供给团队的小伙伴使用。而既然是要提供给团队的小伙伴使用的API，我在编写代码的过程中慎之又慎，单元测试覆盖率基本达到了95%以上。很早以前我有一篇博文，是专门讲TDD模式和一款Kiwi的测试框架，其实那个阶段的我，更多的是停留在对那款单元测试的框架使用和摸索上，并没有极大程度的重视TDD的思想。而在又重读《Clean Code》这本书之后，单元测试的这根弦又在我脑子里绷紧了。</p>
<p>于是在这次的编码过程中，没有经过单元测试的代码，坚决不能放在生产环境里成了我坚持的原则，每一行代码都必须跑过，在各种条件下测试过，才会成为放心的代码，才能在之后放心的重构。不然小伙伴调用API的时候如果产生了一堆bug，你让我这张脸往哪搁。在这样的实践之下，我逐渐尝到了测试驱动开发这个思想的甜头，之前我还有接入其他设备的经验，但是当时赶工期，缺乏系统的单元测试，使得上线后bug不断，有时候debug时定位都要花费一些功夫，但是当你的每行代码都跑过单元测试时，你会对你的代码很有信心，并且能梳理的逻辑更清楚。况且，你要进行单元测试，那么以最小单元模块为单位的代码块或者函数，也必然是一段短小的代码，符合短函数的要求，最近苛刻的要求自己绝对不写超过20行的代码。只为函数的单一职责和逻辑清晰。</p>
<p>通过近期补充自己的数据结构和算法知识，我在敲代码的过程中，对这个方面，也多了一层考虑。从一些细节方面来思考怎么把代码写的更好，除了表层的代码风格，在组织数据时，考虑是否有合适的数据结构类型可以使用，并且哪怕小到一个排序算法，或者查找算法，也会想怎么写才能更有效率，平衡时间复杂度和空间复杂度的关系。这些意识都是之前所不具备的，所以感觉到最近自己在编程方面通过学习还是有一些提升的。而同时也很后悔自己对于这方面知识的学习来的太晚，回顾以前写的代码，还是生产了不小量的脏代码。检索一组规律数据，使用从头遍历这样时间复杂度底下的方式，实在不应该。</p>
<p>其他的一些编码细节也慢慢注意了起来，比如命名的更合理规范明确，比如函数在类里的摆放位置，一切其实都是为了一个事情，就是代码的可读性。写出来的代码20%的时间在开发，80%的时间在维护，可读性是非常重要的一件事情，而最近不断培养的也正是这个意识，只希望写出能让人读的舒服的代码。仅此而已。</p>
<p>近期敲得代码比较杂，写过前端三件套，HTML+CSS+JavaScript,并且系统的学习了Vue框架，也用了stylus这个css预处理器写过css，算法数据结构用Java写，后端的处理是php，框架使用了Laravel，iOS端Swift Objective-C混写，慢慢的有种感受就是，其实用什么框架用什么语言真的无所谓，早先时候，自己还是太过于追求框架，有时候学习的路线反而是不正确是，是要去深刻的理解一门语言，以及这个语言主要解决问题的场景，而非如何使用一个趁手的框架去完成任务，轮子是永远造不完的，旧的框架以后一定会被新的取代，而语言特性这种小细节，是需要去细细体会，花时间琢磨的。</p>
<p>今天随便说说的一些体会，也只是为了写出更好的代码，仅此而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的这篇博文，我不谈及具体的编程技术，只想从这段时间的学习以及写代码的过程中，分享一下自己的编程体会。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;上周呢，项目中碰到了一个新的任务，要接入一个第三方外设厂商的蓝牙设备，对方公司提供了一个sdk。其实接
    
    </summary>
    
    
      <category term="编程体会" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>最大子列和问题</title>
    <link href="http://yoursite.com/2017/04/22/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/04/22/最大子列和问题/</id>
    <published>2017-04-22T09:39:12.000Z</published>
    <updated>2017-04-22T09:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来讨论一个很基础的算法问题，数列的最大子列和问题。这道题我是在看浙大陈姥姥的Mooc的时候看到的，算是陈越老师作为算法与数据结构开篇讲解的第一道算法实例题。</p>
<p>那么今天我就来记录一下分析这道题的过程。</p>
<h2>常用方法</h2>
<p>首先，最大子列和这个问题有一个众所周知的办法，即为每次从数列的开头i，往结尾N累加，当加至结尾时，由i+1再次累加，直到N-N。这样的算法用三个变量三层循环来分别代表从头至尾的遍历，以及从i - N的前进继续累加，最后一层是累加的和。算法可以写成下面这样：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubseqSum1</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> ThisSum, MaxSum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> i, j, k;</div><div class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (j = i; j &lt; N; j++) &#123;</div><div class="line">               ThisSum = <span class="number">0</span>;</div><div class="line">               <span class="keyword">for</span> (k = i; k &lt;= j; k++) &#123;</div><div class="line">                   ThisSum += A[k];</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (ThisSum &gt; MaxSum) &#123;</div><div class="line">                   MaxSum = ThisSum;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> MaxSum;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>&lt;!--more--&gt;</p>
<p>上面的第一种方法应该非常好理解，而由于是三层循环，所以，这个算法的时间复杂度是T(N) = O(N^3)。这种时间复杂度的算法，是非常的低效的，并且我们作为一个有追求的程序员，看到一个时间复杂度上有平方以上指数的，必须要考虑的是降次。</p>
<p>那么其实，第一种算法，如果我们仔细思考，那么可以发现它最里面的一层，k循环是一个很愚蠢的行为，因为我们可以直接在第二层循环里完成累加，于是，我们可以写一个稍微简单的算法。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubseqSum2</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> ThisSum;</div><div class="line">       <span class="keyword">int</span> MaxSum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> i, j;</div><div class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">           ThisSum = <span class="number">0</span>;</div><div class="line">           <span class="keyword">for</span> (j = i; j &lt; N; j++) &#123;</div><div class="line">               ThisSum += A[j];</div><div class="line">               <span class="keyword">if</span> (ThisSum &gt; MaxSum) &#123;</div><div class="line">                   MaxSum = ThisSum;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> MaxSum;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>而这个去了一个循环的算法，时间复杂度也一目了然，T(N) = O(N^2),但是时间复杂度依旧还有2次方。接下来还有什么更好的办法么？</p>
<h2>分治法</h2>
<p>在这里我们介绍一种方法叫分治法，分而治之。这个方法的思想是，先把数列切割成左右两个部分，接下来，递归的把数列不断切割为两份，直到最小单位为一个元素。而这时，分别去求他们的子列和，并且在求算左半边和右半边的子列和之后，把跨越二分边界的子列和也求解出来。比较左半边的最大子列和，以及右半边的最大子列和，以及跨越边界的最大子列和。取出最大的那个数，即为整个数列的最大子列和。</p>
<p>这是一种很常用的算法思想，可以先看代码来理解一下。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 分治法，保持API一致</div><div class="line">    * <span class="doctag">@param</span> A 求解数列</div><div class="line">    * <span class="doctag">@param</span> N 元素总数</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubseqSum3</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> DivideAndConquer(A, <span class="number">0</span>, N-<span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * 分治法主体</div><div class="line">    * <span class="doctag">@param</span> List 求解数列</div><div class="line">    * <span class="doctag">@param</span> left 左半边的下标</div><div class="line">    * <span class="doctag">@param</span> right 右半边的下标</div><div class="line">    * <span class="doctag">@return</span> 所求数列的最大子列和</div><div class="line">    */	</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DivideAndConquer</span><span class="params">(<span class="keyword">int</span>[] List, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> MaxLeftSum, MaxRightSum;</div><div class="line">       <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum;</div><div class="line">       <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</div><div class="line">       <span class="keyword">int</span> center, i;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (left == right) &#123;</div><div class="line">           <span class="keyword">if</span> (List[left] &gt; <span class="number">0</span>) &#123;</div><div class="line">               <span class="keyword">return</span> List[left];</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       center = (left + right) / <span class="number">2</span>;</div><div class="line">       </div><div class="line">	<span class="comment">//分解数列 不断递归调用</span></div><div class="line">       MaxLeftSum = DivideAndConquer(List, left, center);</div><div class="line">       MaxRightSum = DivideAndConquer(List, center + <span class="number">1</span>, right);</div><div class="line">	</div><div class="line">	<span class="comment">//分别结算左右两边的跨越边界的和</span></div><div class="line">       MaxLeftBorderSum = <span class="number">0</span>; LeftBorderSum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (i = center; i &gt;= left; i--) &#123;</div><div class="line">           LeftBorderSum += List[i];</div><div class="line">           <span class="keyword">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</div><div class="line">               MaxLeftBorderSum = LeftBorderSum;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       MaxRightBorderSum = <span class="number">0</span>; RightBorderSum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (i = center + <span class="number">1</span>; i &lt;= right; i++) &#123;</div><div class="line">           RightBorderSum += List[i];</div><div class="line">           <span class="keyword">if</span> (RightBorderSum &gt; MaxLeftBorderSum) &#123;</div><div class="line">               MaxRightBorderSum = RightBorderSum;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> Max3(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line"> <span class="comment">/**</span></div><div class="line">    * 取三个数中的最大值</div><div class="line">    * <span class="doctag">@return</span> int</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max3</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> A &gt; B ? A &gt; C ? A : C : B &gt; C ? B : C;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>而分治法的时间复杂度，是</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">T(1) = O(1)</div><div class="line">T (N) = 2T(N/2) + cN</div><div class="line">= 2 [2T( N/22 ) + cN/2] + cN</div><div class="line">= 2kO(1) + ckN </div><div class="line">= O(NlogN )</div></pre></td></tr></table></figure></p>
<p>现在我们可以看到，这个问题我们已经完成我们的降次目标了。那么还有更好的算法么？</p>
<h2>在线处理</h2>
<p>这个问题有个最简单的算法，叫在线处理法，遍历数列的时候，顺便累加，每次累加的和若是小于0，那么我们可以认为最大子列和为负数时，一定不会让后面的部分增大了，所以就可以把它丢弃，重新置当前的<code>sum = 0</code>。</p>
<p>代码如下:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubseqSum4</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> ThisSum, MaxSum;</div><div class="line">       <span class="keyword">int</span> i;</div><div class="line">       ThisSum = MaxSum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">           ThisSum += A[i];</div><div class="line">           <span class="keyword">if</span> (ThisSum &gt; MaxSum) &#123;</div><div class="line">               MaxSum = ThisSum;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ThisSum &lt; <span class="number">0</span>) &#123;</div><div class="line">               ThisSum = <span class="number">0</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> MaxSum;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在线处理的时间复杂度，因为是只遍历一遍，所以为T(N) = O(N)。
那么说了这么多，我们需要让事实来说话，我们现在准备一个30个元素的队列，让每个算法跑100000次来观察所需时间。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = <span class="number">31</span>;</div><div class="line">    <span class="keyword">int</span>[] testArr = &#123;<span class="number">3</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, -<span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, -<span class="number">5</span>, -<span class="number">6</span>, <span class="number">3</span>, -<span class="number">8</span>, -<span class="number">10</span>,</div><div class="line">            <span class="number">10</span>, -<span class="number">20</span>, -<span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, -<span class="number">9</span>, -<span class="number">10</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, -<span class="number">8</span>, <span class="number">10</span>, -<span class="number">4</span>, <span class="number">10</span>, -<span class="number">7</span>&#125;;</div><div class="line">    <span class="keyword">int</span> runCount = <span class="number">100000</span>;</div><div class="line">    testFunction1(testArr, size, runCount);</div><div class="line">    testFunction2(testArr, size, runCount);</div><div class="line">    testFunction3(testArr, size, runCount);</div><div class="line">    testFunction4(testArr, size, runCount);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后的log输出是这样的:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Max Subsequence Sum <span class="number">1</span> is <span class="number">23</span></div><div class="line">function1 run time is  <span class="number">738</span>ms</div><div class="line">Max Subsequence Sum <span class="number">2</span> is <span class="number">23</span></div><div class="line">function2 run time is  <span class="number">44</span>ms</div><div class="line">Max Subsequence Sum <span class="number">3</span> is <span class="number">17</span></div><div class="line">function3 run time is  <span class="number">110</span>ms</div><div class="line">Max Subsequence Sum <span class="number">4</span> is <span class="number">17</span></div><div class="line">function4 run time is  <span class="number">54</span>ms</div></pre></td></tr></table></figure></p>
<p>上面的function的标号，对应上面的4种方法，可以看到，如果我们真的用了第一种笨办法，那么他和高效算法之间的效率差距，实在是太大了。</p>
<p>算法的学习还要继续，多看书，多做题。那么我们下次再分享了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来讨论一个很基础的算法问题，数列的最大子列和问题。这道题我是在看浙大陈姥姥的Mooc的时候看到的，算是陈越老师作为算法与数据结构开篇讲解的第一道算法实例题。&lt;/p&gt;
&lt;p&gt;那么今天我就来记录一下分析这道题的过程。&lt;/p&gt;
&lt;h2&gt;常用方法&lt;/h2&gt;
&lt;p&gt;首先，最大子列
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>牛顿迭代法与二分法计算平方根</title>
    <link href="http://yoursite.com/2017/04/11/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E4%B8%8E%E4%BA%8C%E5%88%86%E6%B3%95%E8%AE%A1%E7%AE%97%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>http://yoursite.com/2017/04/11/牛顿迭代法与二分法计算平方根/</id>
    <published>2017-04-11T08:37:33.000Z</published>
    <updated>2017-04-11T08:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为不是科班出身，所以即使编程一段时间也时常感觉自身基础知识非常不扎实，于是在最近开始补习算法和计算机理论的基础知识。</p>
<p>目前看的算法书籍是《算法》（第四版），由<strong>Robert Sedgewick</strong>以及<strong>Kevin Wayne</strong>编写的，由于不可能把所有的练习都写成博客记录下来，于是就在学习过程中，挑选一些有意思的写成笔记，以便日后参考以及与同行互相交流。</p>
<p>今天要准备写的就是非常经典的牛顿迭代法求平方根，事实上现在的绝大部分编程语言中，标准库中都已经为我们准备好了计算平方根的函数，但是本着学习的精神，今天我们也要写出一个求平方根的函数。</p>
<p>&lt;!--more--&gt;</p>
<p>牛顿法是一种在实数域和复数域上近似求解方程的方法。方法使用函数 <strong>f(x)<strong>的泰勒级数的前面几项来寻找方程</strong>f(x)=0</strong>的根。首先我们先来看函数图像。
<img src="http://img.blog.csdn.net/20151223235920481" alt=""></p>
<p>首先，选择一个接近函数<strong>f(x)<strong>零点的</strong>x0</strong>,计算相应的<strong>f(x0)<strong>和切线斜率</strong>f'(x0)</strong>（这里<strong>f'<strong>表示函数</strong>f</strong>的导数)。
也就是求如下方程的解：</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/547ee85ecabac97a25778a6e336f6b3325ac07d1" alt=""></p>
<p>我们将新求得的点 x坐标命名为x1，通常x1会比x0更接近方程f(x)=0的解。因此我们现在可以利用x1开始下一轮迭代。迭代公式可化简为如下所示：</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6929060731e351c465426e37567abe5ee13d65d9" alt=""></p>
<p>而求平方根的方程我们可以看成<strong>f(x) = x^2 - a</strong>,a即为我们要求平方根的常数。</p>
<p>于是在算法代码的编写上，我们也可以用这种猜的思想，来近似求解这个平方根，我们需要定义一个精度，若<strong>Xn+1-Xn</strong>的值小于我们的精度值，那么我们即可以认为Xn为我们要求的解。</p>
<p>所以算法代码编写如下(采用Java示例)。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 牛顿迭代法求平方根</div><div class="line"> * <span class="doctag">@param</span>  number   求值的数</div><div class="line"> * <span class="doctag">@param</span>  accuracy 精度</div><div class="line"> * <span class="doctag">@return</span>          Double</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">NewtonSqrt</span><span class="params">(<span class="keyword">double</span> number, <span class="keyword">double</span> accuracy)</span> </span>&#123;</div><div class="line">		 <span class="comment">//第一个猜测值</span></div><div class="line">        <span class="keyword">double</span> guess = number / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Double.NaN;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//当两个猜测的差值大于精度即return</span></div><div class="line">        <span class="keyword">while</span> (Math.abs(guess - (number / guess)) &gt; accuracy) &#123;</div><div class="line">        	<span class="comment">//迭代公式推导而成</span></div><div class="line">            guess = (guess + (number / guess)) / <span class="number">2</span>;</div><div class="line">            count++;</div><div class="line">            System.out.printf(<span class="string">"try count = %d, guess = %f\n"</span>, count, guess);</div><div class="line">        &#125;</div><div class="line">        System.out.printf(<span class="string">"final result = %f\n"</span>, guess);</div><div class="line">        <span class="keyword">return</span> guess;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>牛顿迭代法求平方根的代码就如上面所示，而接下来为了体现牛顿迭代法的优势，我们再写一个二分法计算平方根的算法，来对比：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">DichotomySqrt</span><span class="params">(<span class="keyword">double</span> number, <span class="keyword">double</span> accuracy)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> higher = number;</div><div class="line">    <span class="keyword">double</span> lower = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">double</span> middle = (lower + higher) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">double</span> last_middle = <span class="number">0.00</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Double.NaN;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (Math.abs(middle - last_middle) &gt; accuracy) &#123;</div><div class="line">        <span class="keyword">if</span> (middle * middle &gt; number) &#123;</div><div class="line">            higher = middle;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lower = middle;</div><div class="line">        &#125;</div><div class="line">        last_middle = middle;</div><div class="line">        middle = (lower + higher) / <span class="number">2</span>;</div><div class="line">        count++;</div><div class="line">        System.out.printf(<span class="string">"Dichotomy try count = %d, guess = %f\n"</span>, count, last_middle);</div><div class="line">    &#125;</div><div class="line">    System.out.printf(<span class="string">"Dichotomy final result = %f\n"</span>, last_middle);</div><div class="line">    <span class="keyword">return</span> last_middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>二分法的讲解就不多说了，跟牛顿迭代法的验证结果相似，看精度差是否在定义范围内。</p>
<p>那么接下来我们来测试二分法和牛顿迭代法求值的效率。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> result = NewtonSqrt(<span class="number">2</span>,<span class="number">1e-3</span>);</div><div class="line">    <span class="keyword">double</span> dichotomyRes = DichotomySqrt(<span class="number">2</span>,<span class="number">1e-3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先看小精度情况下，求2的平方根</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.5</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.4166666666666665</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.4142156862745097</span></div><div class="line"><span class="keyword">final</span> result = <span class="number">1.4142156862745097</span></div><div class="line"></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.0</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.5</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.25</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.4375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">6</span> guess = <span class="number">1.40625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">7</span> guess = <span class="number">1.421875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">8</span> guess = <span class="number">1.4140625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">9</span> guess = <span class="number">1.41796875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">10</span> guess = <span class="number">1.416015625</span></div><div class="line">Dichotomy <span class="keyword">final</span> result = <span class="number">1.416015625</span></div></pre></td></tr></table></figure></p>
<p>可以看到牛顿迭代法计算了3次，二分法计算了10次。</p>
<p>而精度稍大的时候</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> result = NewtonSqrt(<span class="number">2</span>,<span class="number">1e-15</span>);</div><div class="line">    <span class="keyword">double</span> dichotomyRes = DichotomySqrt(<span class="number">2</span>,<span class="number">1e-15</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.5</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.4166666666666665</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.4142156862745097</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.4142135623746899</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.414213562373095</span></div><div class="line"><span class="keyword">final</span> result = <span class="number">1.414213562373095</span></div><div class="line"></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.0</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.5</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.25</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.4375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">6</span> guess = <span class="number">1.40625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">7</span> guess = <span class="number">1.421875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">8</span> guess = <span class="number">1.4140625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">9</span> guess = <span class="number">1.41796875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">10</span> guess = <span class="number">1.416015625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">11</span> guess = <span class="number">1.4150390625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">12</span> guess = <span class="number">1.41455078125</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">13</span> guess = <span class="number">1.414306640625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">14</span> guess = <span class="number">1.4141845703125</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">15</span> guess = <span class="number">1.41424560546875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">16</span> guess = <span class="number">1.414215087890625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">17</span> guess = <span class="number">1.4141998291015625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">18</span> guess = <span class="number">1.4142074584960938</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">19</span> guess = <span class="number">1.4142112731933594</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">20</span> guess = <span class="number">1.4142131805419922</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">21</span> guess = <span class="number">1.4142141342163086</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">22</span> guess = <span class="number">1.4142136573791504</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">23</span> guess = <span class="number">1.4142134189605713</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">24</span> guess = <span class="number">1.4142135381698608</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">25</span> guess = <span class="number">1.4142135977745056</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">26</span> guess = <span class="number">1.4142135679721832</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">27</span> guess = <span class="number">1.414213553071022</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">28</span> guess = <span class="number">1.4142135605216026</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">29</span> guess = <span class="number">1.414213564246893</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">30</span> guess = <span class="number">1.4142135623842478</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">31</span> guess = <span class="number">1.4142135614529252</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">32</span> guess = <span class="number">1.4142135619185865</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">33</span> guess = <span class="number">1.4142135621514171</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">34</span> guess = <span class="number">1.4142135622678325</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">35</span> guess = <span class="number">1.4142135623260401</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">36</span> guess = <span class="number">1.414213562355144</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">37</span> guess = <span class="number">1.4142135623696959</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">38</span> guess = <span class="number">1.4142135623769718</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">39</span> guess = <span class="number">1.4142135623733338</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">40</span> guess = <span class="number">1.4142135623715149</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">41</span> guess = <span class="number">1.4142135623724243</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">42</span> guess = <span class="number">1.414213562372879</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">43</span> guess = <span class="number">1.4142135623731065</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">44</span> guess = <span class="number">1.4142135623729928</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">45</span> guess = <span class="number">1.4142135623730496</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">46</span> guess = <span class="number">1.414213562373078</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">47</span> guess = <span class="number">1.4142135623730923</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">48</span> guess = <span class="number">1.4142135623730994</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">49</span> guess = <span class="number">1.4142135623730958</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">50</span> guess = <span class="number">1.414213562373094</span></div><div class="line">Dichotomy <span class="keyword">final</span> result = <span class="number">1.414213562373094</span></div></pre></td></tr></table></figure></p>
<p>这里就一目了然了，所以有时候，写代码一定不能想着功能实现了就好，在算法的效率上一定要多多思考。</p>
<p>不再举栗子了，免得有凑字数的嫌疑。下次再讨论咯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为不是科班出身，所以即使编程一段时间也时常感觉自身基础知识非常不扎实，于是在最近开始补习算法和计算机理论的基础知识。&lt;/p&gt;
&lt;p&gt;目前看的算法书籍是《算法》（第四版），由&lt;strong&gt;Robert Sedgewick&lt;/strong&gt;以及&lt;strong&gt;Kevin W
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="牛顿迭代法" scheme="http://yoursite.com/tags/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《Clean Code》 读书小节（二）</title>
    <link href="http://yoursite.com/2017/04/02/%E3%80%8AClean-Code%E3%80%8B-%E8%AF%BB%E4%B9%A6%E5%B0%8F%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/02/《Clean-Code》-读书小节（二）/</id>
    <published>2017-04-02T11:03:40.000Z</published>
    <updated>2017-04-02T11:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在看了《Clean Code》这本书的前两章时，就写下了第一篇读书小节，而随着读书的深入，便决定再总结一下后面一部分的读书心得。</p>
<h1>那些多余的注释</h1>
<p>相信每一个程序员都经历过一个坑，那就是去阅读甚至修改没有注释的代码。如果这些代码风格糟糕，命名不遵循规则，毫无疑问这是一段你永远都不想回忆的时光，而若是这些代码命名准确，设计模式使用的恰到好处，函数拆分合理，说不定你有一种怎么读别人的代码比回顾我自己写的代码还清晰的错觉。</p>
<p>是的，毫无疑问我一直是代码是最好的注释这个说法的拥护者之一。但是，这里有个前提，就是你必须有能力写出优秀的代码，你才有资格去不写注释。我们要一直明白一个问题，我们的代码写出来是为了给别人看的，而不是仅仅给自己看的，如果你的团队有严谨的<strong>Code Review</strong>那你好意思写出脏乱不堪的代码被投影仪放到幕布上给所有部门同事看么？对于一个新手程序员来说，请老老实实的写好每一个关键函数的注释，也请在修改函数的时候，不吝时间的修改对应的注释。若是项目的目的是为了公开API给第三方开发者使用，那么请在开放api上写好注释，这是应该完善的工作。</p>
<p>而上述说的类型您都不是，那么我想该强调一下谈这个话题的主题了，去除那些多余的注释吧。有时候，在一些明显目的的函数上，加注释，会给阅读你代码的开发者一种错觉，你的水平很低，不足以理解代码，所以需要在简单的语句上加上注释。打个比方，你是我的面试官，有一道面试题，我在写完之后交给你，你看到的是如下格式的面试题：</p>
<p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$arr = $User-&gt;where($where)-&gt;find(); <span class="comment">// 读取数据</span></div><div class="line"></div><div class="line">$list = [];</div><div class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $val) &#123; <span class="comment">// 遍历数组</span></div><div class="line">  $list[$key] = [</div><div class="line">    <span class="string">'name'</span> =&gt; $val[<span class="string">'name'</span>],</div><div class="line">    <span class="string">'age'</span> =&gt; $val[<span class="string">'age'</span>],</div><div class="line">  ];</div><div class="line">&#125;</div><div class="line"></div><div class="line">$list[<span class="string">'count'</span>] = count($arr); <span class="comment">// 其他属性</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> json_encode($list); <span class="comment">// 输出 json</span></div></pre></td></tr></table></figure></p>
<p>&lt;!--more--&gt;</p>
<p>这是随手找的一个php的栗子，显而易见他不足以成为一道面试题，但是假设您今天就问我这道题，如何输出一串json格式的数据。我提交了这样一段代码给您看，那么您来体会下你看到这样一段代码的心情。不知道你会不会觉得我是认为您水平不够，才写这样的代码给你看，难道读取数据和遍历数组都需要写一个注释么？所以，请把那些自以为能让代码很易懂的注释去掉吧。大胆的去掉，假设你去了这些注释，我相信这段代码依然会一眼就明白它将执行什么任务。</p>
<p>其实最不应该随意加注释的原因是，我们往往勤于修改代码，而疏于及时变更注释。扪心自问一下，当有个紧急bug需要你修复的时候，你匆匆开电脑修改好了bug，会顺便把注释修改了么？所以，注释有时候是带有欺骗性质的，尤其是当版本迭代的越来越频繁的时候，注释的时效性就越来越差。往往会误导你理解代码。而永远不会欺骗你的，就是代码。</p>
<h1>格式</h1>
<p>今天的格式我们不去讨论变量名、函数名以及缩进大小写等等代码风格的范畴，我们就来讨论一个很小的点——函数摆放的位置。</p>
<p>在IDE越来越强大的今天，如果我们看到了函数里调用的方法，会怎么查看呢，直接按着Commond键就去查看了吧。其实很多程序员，在敲代码的大部分实际都在按着commond跳来跳去的看代码，而这时候，不起眼的函数的摆放位置就显得作用很大了。</p>
<p>函数的格式，应该是由上至下，从最顶层的代码，逐步的向最下层靠拢。被调用的代码都排在调用他的代码之下，这样在你看到主函数里有不清楚的函数时，眼睛向下扫一扫就知道下一个函数的大致了。而当你始终保持这样的排版，那么阅读你代码的程序员，应该是非常的享受的。</p>
<p>而我们定义的变量，亦是如此，变量的定义尽量靠近使用它的函数，而一些公共变量，请你始终保持放在同一个位置，可以是类的头部，也可以是尾部。</p>
<h1>净化数据结构</h1>
<p>在如今面向对象的思想下，大部分人都把东西想象成一个对象来处理，而这样的思想确实是被广为接受的，因为那样会让我们的代码更具有可读性以及践行某些设计模式，但是与之而来的就是我们该怎么处理对象内部的数据结构。有些不必让人了解的数据结构，我们应该充分的封装，做好读写属性的定义，在暴露的api中思考好命名和可读性。而继承、封装又是我们编程的必修课，在这里也就不再赘述，我还想讨论的一个现象，是暴露那些明确的数据结构，牺牲一些面向对象的思想，采取过程式编程来提高效率及可读性。举个例子：</p>
<p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">CGPoint</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> x: <span class="type">CGFloat</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> y: <span class="type">CGFloat</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>()</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(x: <span class="type">CGFloat</span>, y: <span class="type">CGFloat</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是Swift对于<code>CGPoint</code>这个结构体的定义，我们平时在使用<code>CGPoint</code>的过程中，直接使用构造器方法创建一个CGPoint实例。而这里对于x,y这两个属性是直接暴露的。而这也是我们众所周知的平面坐标系，所以适当的暴露你的数据结构换取可读性也是可取的。</p>
<p>面向对象，和过程式编程本是一个冲突的思想，作为一个有思想的程序员，需要做出选择，目的是为了写出可读性更好的代码。</p>
<p>继续看书了，下次再聊，希望可以评论交流对于编码的思考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在看了《Clean Code》这本书的前两章时，就写下了第一篇读书小节，而随着读书的深入，便决定再总结一下后面一部分的读书心得。&lt;/p&gt;
&lt;h1&gt;那些多余的注释&lt;/h1&gt;
&lt;p&gt;相信每一个程序员都经历过一个坑，那就是去阅读甚至修改没有注释的代码。如果这些代码风格糟糕，命
    
    </summary>
    
    
      <category term="编码思考" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E6%80%9D%E8%80%83/"/>
    
      <category term="代码风格" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="clean code" scheme="http://yoursite.com/tags/clean-code/"/>
    
  </entry>
  
</feed>
