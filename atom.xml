<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Originalee的博客</title>
  <subtitle>打篮球的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-11T08:39:14.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Originalee</name>
    <email>xiao.liunit@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>牛顿迭代法与二分法计算平方根</title>
    <link href="http://yoursite.com/2017/04/11/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E4%B8%8E%E4%BA%8C%E5%88%86%E6%B3%95%E8%AE%A1%E7%AE%97%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>http://yoursite.com/2017/04/11/牛顿迭代法与二分法计算平方根/</id>
    <published>2017-04-11T08:37:33.000Z</published>
    <updated>2017-04-11T08:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为不是科班出身，所以即使编程一段时间也时常感觉自身基础知识非常不扎实，于是在最近开始补习算法和计算机理论的基础知识。</p>
<p>目前看的算法书籍是《算法》（第四版），由<strong>Robert Sedgewick</strong>以及<strong>Kevin Wayne</strong>编写的，由于不可能把所有的练习都写成博客记录下来，于是就在学习过程中，挑选一些有意思的写成笔记，以便日后参考以及与同行互相交流。</p>
<p>今天要准备写的就是非常经典的牛顿迭代法求平方根，事实上现在的绝大部分编程语言中，标准库中都已经为我们准备好了计算平方根的函数，但是本着学习的精神，今天我们也要写出一个求平方根的函数。</p>
<a id="more"></a>
<p>牛顿法是一种在实数域和复数域上近似求解方程的方法。方法使用函数 <strong>f(x)</strong>的泰勒级数的前面几项来寻找方程<strong>f(x)=0</strong>的根。首先我们先来看函数图像。<br><img src="http://img.blog.csdn.net/20151223235920481" alt=""></p>
<p>首先，选择一个接近函数<strong>f(x)</strong>零点的<strong>x0</strong>,计算相应的<strong>f(x0)</strong>和切线斜率<strong>f’(x0)</strong>（这里<strong>f’</strong>表示函数<strong>f</strong>的导数)。<br>也就是求如下方程的解：</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/547ee85ecabac97a25778a6e336f6b3325ac07d1" alt=""></p>
<p>我们将新求得的点 x坐标命名为x1，通常x1会比x0更接近方程f(x)=0的解。因此我们现在可以利用x1开始下一轮迭代。迭代公式可化简为如下所示：</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6929060731e351c465426e37567abe5ee13d65d9" alt=""></p>
<p>而求平方根的方程我们可以看成<strong>f(x) = x^2 - a</strong>,a即为我们要求平方根的常数。</p>
<p>于是在算法代码的编写上，我们也可以用这种猜的思想，来近似求解这个平方根，我们需要定义一个精度，若<strong>Xn+1-Xn</strong>的值小于我们的精度值，那么我们即可以认为Xn为我们要求的解。</p>
<p>所以算法代码编写如下(采用Java示例)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 牛顿迭代法求平方根</div><div class="line"> * <span class="doctag">@param</span>  number   求值的数</div><div class="line"> * <span class="doctag">@param</span>  accuracy 精度</div><div class="line"> * <span class="doctag">@return</span>          Double</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">NewtonSqrt</span><span class="params">(<span class="keyword">double</span> number, <span class="keyword">double</span> accuracy)</span> </span>&#123;</div><div class="line">		 <span class="comment">//第一个猜测值</span></div><div class="line">        <span class="keyword">double</span> guess = number / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Double.NaN;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//当两个猜测的差值大于精度即return</span></div><div class="line">        <span class="keyword">while</span> (Math.abs(guess - (number / guess)) &gt; accuracy) &#123;</div><div class="line">        	<span class="comment">//迭代公式推导而成</span></div><div class="line">            guess = (guess + (number / guess)) / <span class="number">2</span>;</div><div class="line">            count++;</div><div class="line">            System.out.printf(<span class="string">"try count = %d, guess = %f\n"</span>, count, guess);</div><div class="line">        &#125;</div><div class="line">        System.out.printf(<span class="string">"final result = %f\n"</span>, guess);</div><div class="line">        <span class="keyword">return</span> guess;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>牛顿迭代法求平方根的代码就如上面所示，而接下来为了体现牛顿迭代法的优势，我们再写一个二分法计算平方根的算法，来对比：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">DichotomySqrt</span><span class="params">(<span class="keyword">double</span> number, <span class="keyword">double</span> accuracy)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> higher = number;</div><div class="line">    <span class="keyword">double</span> lower = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">double</span> middle = (lower + higher) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">double</span> last_middle = <span class="number">0.00</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Double.NaN;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (Math.abs(middle - last_middle) &gt; accuracy) &#123;</div><div class="line">        <span class="keyword">if</span> (middle * middle &gt; number) &#123;</div><div class="line">            higher = middle;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lower = middle;</div><div class="line">        &#125;</div><div class="line">        last_middle = middle;</div><div class="line">        middle = (lower + higher) / <span class="number">2</span>;</div><div class="line">        count++;</div><div class="line">        System.out.printf(<span class="string">"Dichotomy try count = %d, guess = %f\n"</span>, count, last_middle);</div><div class="line">    &#125;</div><div class="line">    System.out.printf(<span class="string">"Dichotomy final result = %f\n"</span>, last_middle);</div><div class="line">    <span class="keyword">return</span> last_middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>二分法的讲解就不多说了，跟牛顿迭代法的验证结果相似，看精度差是否在定义范围内。</p>
<p>那么接下来我们来测试二分法和牛顿迭代法求值的效率。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> result = NewtonSqrt(<span class="number">2</span>,<span class="number">1e-3</span>);</div><div class="line">    <span class="keyword">double</span> dichotomyRes = DichotomySqrt(<span class="number">2</span>,<span class="number">1e-3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先看小精度情况下，求2的平方根</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.5</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.4166666666666665</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.4142156862745097</span></div><div class="line"><span class="keyword">final</span> result = <span class="number">1.4142156862745097</span></div><div class="line"></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.0</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.5</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.25</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.4375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">6</span> guess = <span class="number">1.40625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">7</span> guess = <span class="number">1.421875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">8</span> guess = <span class="number">1.4140625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">9</span> guess = <span class="number">1.41796875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">10</span> guess = <span class="number">1.416015625</span></div><div class="line">Dichotomy <span class="keyword">final</span> result = <span class="number">1.416015625</span></div></pre></td></tr></table></figure>
<p>可以看到牛顿迭代法计算了3次，二分法计算了10次。</p>
<p>而精度稍大的时候</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> result = NewtonSqrt(<span class="number">2</span>,<span class="number">1e-15</span>);</div><div class="line">    <span class="keyword">double</span> dichotomyRes = DichotomySqrt(<span class="number">2</span>,<span class="number">1e-15</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.5</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.4166666666666665</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.4142156862745097</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.4142135623746899</span></div><div class="line"><span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.414213562373095</span></div><div class="line"><span class="keyword">final</span> result = <span class="number">1.414213562373095</span></div><div class="line"></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">1</span> guess = <span class="number">1.0</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">2</span> guess = <span class="number">1.5</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">3</span> guess = <span class="number">1.25</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">4</span> guess = <span class="number">1.375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">5</span> guess = <span class="number">1.4375</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">6</span> guess = <span class="number">1.40625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">7</span> guess = <span class="number">1.421875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">8</span> guess = <span class="number">1.4140625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">9</span> guess = <span class="number">1.41796875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">10</span> guess = <span class="number">1.416015625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">11</span> guess = <span class="number">1.4150390625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">12</span> guess = <span class="number">1.41455078125</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">13</span> guess = <span class="number">1.414306640625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">14</span> guess = <span class="number">1.4141845703125</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">15</span> guess = <span class="number">1.41424560546875</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">16</span> guess = <span class="number">1.414215087890625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">17</span> guess = <span class="number">1.4141998291015625</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">18</span> guess = <span class="number">1.4142074584960938</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">19</span> guess = <span class="number">1.4142112731933594</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">20</span> guess = <span class="number">1.4142131805419922</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">21</span> guess = <span class="number">1.4142141342163086</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">22</span> guess = <span class="number">1.4142136573791504</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">23</span> guess = <span class="number">1.4142134189605713</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">24</span> guess = <span class="number">1.4142135381698608</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">25</span> guess = <span class="number">1.4142135977745056</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">26</span> guess = <span class="number">1.4142135679721832</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">27</span> guess = <span class="number">1.414213553071022</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">28</span> guess = <span class="number">1.4142135605216026</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">29</span> guess = <span class="number">1.414213564246893</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">30</span> guess = <span class="number">1.4142135623842478</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">31</span> guess = <span class="number">1.4142135614529252</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">32</span> guess = <span class="number">1.4142135619185865</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">33</span> guess = <span class="number">1.4142135621514171</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">34</span> guess = <span class="number">1.4142135622678325</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">35</span> guess = <span class="number">1.4142135623260401</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">36</span> guess = <span class="number">1.414213562355144</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">37</span> guess = <span class="number">1.4142135623696959</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">38</span> guess = <span class="number">1.4142135623769718</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">39</span> guess = <span class="number">1.4142135623733338</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">40</span> guess = <span class="number">1.4142135623715149</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">41</span> guess = <span class="number">1.4142135623724243</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">42</span> guess = <span class="number">1.414213562372879</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">43</span> guess = <span class="number">1.4142135623731065</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">44</span> guess = <span class="number">1.4142135623729928</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">45</span> guess = <span class="number">1.4142135623730496</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">46</span> guess = <span class="number">1.414213562373078</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">47</span> guess = <span class="number">1.4142135623730923</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">48</span> guess = <span class="number">1.4142135623730994</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">49</span> guess = <span class="number">1.4142135623730958</span></div><div class="line">Dichotomy <span class="keyword">try</span> count = <span class="number">50</span> guess = <span class="number">1.414213562373094</span></div><div class="line">Dichotomy <span class="keyword">final</span> result = <span class="number">1.414213562373094</span></div></pre></td></tr></table></figure>
<p>这里就一目了然了，所以有时候，写代码一定不能想着功能实现了就好，在算法的效率上一定要多多思考。</p>
<p>不再举栗子了，免得有凑字数的嫌疑。下次再讨论咯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为不是科班出身，所以即使编程一段时间也时常感觉自身基础知识非常不扎实，于是在最近开始补习算法和计算机理论的基础知识。&lt;/p&gt;
&lt;p&gt;目前看的算法书籍是《算法》（第四版），由&lt;strong&gt;Robert Sedgewick&lt;/strong&gt;以及&lt;strong&gt;Kevin Wayne&lt;/strong&gt;编写的，由于不可能把所有的练习都写成博客记录下来，于是就在学习过程中，挑选一些有意思的写成笔记，以便日后参考以及与同行互相交流。&lt;/p&gt;
&lt;p&gt;今天要准备写的就是非常经典的牛顿迭代法求平方根，事实上现在的绝大部分编程语言中，标准库中都已经为我们准备好了计算平方根的函数，但是本着学习的精神，今天我们也要写出一个求平方根的函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="牛顿迭代法" scheme="http://yoursite.com/tags/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《Clean Code》 读书小节（二）</title>
    <link href="http://yoursite.com/2017/04/02/%E3%80%8AClean-Code%E3%80%8B-%E8%AF%BB%E4%B9%A6%E5%B0%8F%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/02/《Clean-Code》-读书小节（二）/</id>
    <published>2017-04-02T11:03:40.000Z</published>
    <updated>2017-04-02T11:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在看了《Clean Code》这本书的前两章时，就写下了第一篇读书小节，而随着读书的深入，便决定再总结一下后面一部分的读书心得。</p>
<h1 id="那些多余的注释"><a href="#那些多余的注释" class="headerlink" title="那些多余的注释"></a>那些多余的注释</h1><p>相信每一个程序员都经历过一个坑，那就是去阅读甚至修改没有注释的代码。如果这些代码风格糟糕，命名不遵循规则，毫无疑问这是一段你永远都不想回忆的时光，而若是这些代码命名准确，设计模式使用的恰到好处，函数拆分合理，说不定你有一种怎么读别人的代码比回顾我自己写的代码还清晰的错觉。</p>
<p>是的，毫无疑问我一直是代码是最好的注释这个说法的拥护者之一。但是，这里有个前提，就是你必须有能力写出优秀的代码，你才有资格去不写注释。我们要一直明白一个问题，我们的代码写出来是为了给别人看的，而不是仅仅给自己看的，如果你的团队有严谨的<strong>Code Review</strong>那你好意思写出脏乱不堪的代码被投影仪放到幕布上给所有部门同事看么？对于一个新手程序员来说，请老老实实的写好每一个关键函数的注释，也请在修改函数的时候，不吝时间的修改对应的注释。若是项目的目的是为了公开API给第三方开发者使用，那么请在开放api上写好注释，这是应该完善的工作。</p>
<p>而上述说的类型您都不是，那么我想该强调一下谈这个话题的主题了，去除那些多余的注释吧。有时候，在一些明显目的的函数上，加注释，会给阅读你代码的开发者一种错觉，你的水平很低，不足以理解代码，所以需要在简单的语句上加上注释。打个比方，你是我的面试官，有一道面试题，我在写完之后交给你，你看到的是如下格式的面试题：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$arr = $User-&gt;where($where)-&gt;find(); <span class="comment">// 读取数据</span></div><div class="line"></div><div class="line">$list = [];</div><div class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $val) &#123; <span class="comment">// 遍历数组</span></div><div class="line">  $list[$key] = [</div><div class="line">    <span class="string">'name'</span> =&gt; $val[<span class="string">'name'</span>],</div><div class="line">    <span class="string">'age'</span> =&gt; $val[<span class="string">'age'</span>],</div><div class="line">  ];</div><div class="line">&#125;</div><div class="line"></div><div class="line">$list[<span class="string">'count'</span>] = count($arr); <span class="comment">// 其他属性</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> json_encode($list); <span class="comment">// 输出 json</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这是随手找的一个php的栗子，显而易见他不足以成为一道面试题，但是假设您今天就问我这道题，如何输出一串json格式的数据。我提交了这样一段代码给您看，那么您来体会下你看到这样一段代码的心情。不知道你会不会觉得我是认为您水平不够，才写这样的代码给你看，难道读取数据和遍历数组都需要写一个注释么？所以，请把那些自以为能让代码很易懂的注释去掉吧。大胆的去掉，假设你去了这些注释，我相信这段代码依然会一眼就明白它将执行什么任务。</p>
<p>其实最不应该随意加注释的原因是，我们往往勤于修改代码，而疏于及时变更注释。扪心自问一下，当有个紧急bug需要你修复的时候，你匆匆开电脑修改好了bug，会顺便把注释修改了么？所以，注释有时候是带有欺骗性质的，尤其是当版本迭代的越来越频繁的时候，注释的时效性就越来越差。往往会误导你理解代码。而永远不会欺骗你的，就是代码。</p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>今天的格式我们不去讨论变量名、函数名以及缩进大小写等等代码风格的范畴，我们就来讨论一个很小的点——函数摆放的位置。</p>
<p>在IDE越来越强大的今天，如果我们看到了函数里调用的方法，会怎么查看呢，直接按着Commond键就去查看了吧。其实很多程序员，在敲代码的大部分实际都在按着commond跳来跳去的看代码，而这时候，不起眼的函数的摆放位置就显得作用很大了。</p>
<p>函数的格式，应该是由上至下，从最顶层的代码，逐步的向最下层靠拢。被调用的代码都排在调用他的代码之下，这样在你看到主函数里有不清楚的函数时，眼睛向下扫一扫就知道下一个函数的大致了。而当你始终保持这样的排版，那么阅读你代码的程序员，应该是非常的享受的。</p>
<p>而我们定义的变量，亦是如此，变量的定义尽量靠近使用它的函数，而一些公共变量，请你始终保持放在同一个位置，可以是类的头部，也可以是尾部。</p>
<h1 id="净化数据结构"><a href="#净化数据结构" class="headerlink" title="净化数据结构"></a>净化数据结构</h1><p>在如今面向对象的思想下，大部分人都把东西想象成一个对象来处理，而这样的思想确实是被广为接受的，因为那样会让我们的代码更具有可读性以及践行某些设计模式，但是与之而来的就是我们该怎么处理对象内部的数据结构。有些不必让人了解的数据结构，我们应该充分的封装，做好读写属性的定义，在暴露的api中思考好命名和可读性。而继承、封装又是我们编程的必修课，在这里也就不再赘述，我还想讨论的一个现象，是暴露那些明确的数据结构，牺牲一些面向对象的思想，采取过程式编程来提高效率及可读性。举个例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">CGPoint</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> x: <span class="type">CGFloat</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> y: <span class="type">CGFloat</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>()</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(x: <span class="type">CGFloat</span>, y: <span class="type">CGFloat</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是Swift对于<code>CGPoint</code>这个结构体的定义，我们平时在使用<code>CGPoint</code>的过程中，直接使用构造器方法创建一个CGPoint实例。而这里对于x,y这两个属性是直接暴露的。而这也是我们众所周知的平面坐标系，所以适当的暴露你的数据结构换取可读性也是可取的。</p>
<p>面向对象，和过程式编程本是一个冲突的思想，作为一个有思想的程序员，需要做出选择，目的是为了写出可读性更好的代码。</p>
<p>继续看书了，下次再聊，希望可以评论交流对于编码的思考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在看了《Clean Code》这本书的前两章时，就写下了第一篇读书小节，而随着读书的深入，便决定再总结一下后面一部分的读书心得。&lt;/p&gt;
&lt;h1 id=&quot;那些多余的注释&quot;&gt;&lt;a href=&quot;#那些多余的注释&quot; class=&quot;headerlink&quot; title=&quot;那些多余的注释&quot;&gt;&lt;/a&gt;那些多余的注释&lt;/h1&gt;&lt;p&gt;相信每一个程序员都经历过一个坑，那就是去阅读甚至修改没有注释的代码。如果这些代码风格糟糕，命名不遵循规则，毫无疑问这是一段你永远都不想回忆的时光，而若是这些代码命名准确，设计模式使用的恰到好处，函数拆分合理，说不定你有一种怎么读别人的代码比回顾我自己写的代码还清晰的错觉。&lt;/p&gt;
&lt;p&gt;是的，毫无疑问我一直是代码是最好的注释这个说法的拥护者之一。但是，这里有个前提，就是你必须有能力写出优秀的代码，你才有资格去不写注释。我们要一直明白一个问题，我们的代码写出来是为了给别人看的，而不是仅仅给自己看的，如果你的团队有严谨的&lt;strong&gt;Code Review&lt;/strong&gt;那你好意思写出脏乱不堪的代码被投影仪放到幕布上给所有部门同事看么？对于一个新手程序员来说，请老老实实的写好每一个关键函数的注释，也请在修改函数的时候，不吝时间的修改对应的注释。若是项目的目的是为了公开API给第三方开发者使用，那么请在开放api上写好注释，这是应该完善的工作。&lt;/p&gt;
&lt;p&gt;而上述说的类型您都不是，那么我想该强调一下谈这个话题的主题了，去除那些多余的注释吧。有时候，在一些明显目的的函数上，加注释，会给阅读你代码的开发者一种错觉，你的水平很低，不足以理解代码，所以需要在简单的语句上加上注释。打个比方，你是我的面试官，有一道面试题，我在写完之后交给你，你看到的是如下格式的面试题：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$arr = $User-&amp;gt;where($where)-&amp;gt;find(); &lt;span class=&quot;comment&quot;&gt;// 读取数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$list = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($arr &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $key =&amp;gt; $val) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 遍历数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $list[$key] = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt; =&amp;gt; $val[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt; =&amp;gt; $val[&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$list[&lt;span class=&quot;string&quot;&gt;&#39;count&#39;&lt;/span&gt;] = count($arr); &lt;span class=&quot;comment&quot;&gt;// 其他属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode($list); &lt;span class=&quot;comment&quot;&gt;// 输出 json&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编码思考" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E6%80%9D%E8%80%83/"/>
    
      <category term="代码风格" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="clean code" scheme="http://yoursite.com/tags/clean-code/"/>
    
  </entry>
  
  <entry>
    <title>《代码整洁之道》读书小结</title>
    <link href="http://yoursite.com/2017/03/24/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/24/《代码整洁之道》读书小结/</id>
    <published>2017-03-24T12:29:05.000Z</published>
    <updated>2017-03-24T08:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近晚间的加班暂时暂停了，大概已经整整一个月每天焦头烂额的写着业务代码，被各种逻辑搞的整个人都不大好了，好在是写的差不多了。</p>
<p>每当写了很多业务代码之后，我都会停下来反思一个问题，你的代码写的干净么，有需要重构的地方么。而这一次，因为一些临时性的需求变更，我自认为我写了一部分脏代码，这部分代码恰恰是bug的高发地段，而且也可能会带来后期维护的困难。那么如何来重构这部分代码呢？</p>
<p>在我写下这部分脏代码之前，我自认为也是用了一些能够用上的设计模式，但是随着临时性的需求变更不断增加，有时候贪图省事直接在原有代码的基础上修改了事，很明显这违反了开放闭合原则。</p>
<p>回到正题上来，回顾《clean code》这本书，正是帮助自己在反思的同时做好知识的回顾梳理，并且能够在重构中把学到的知识学以致用。虽然现在我还没有全部看完，但是也是可以从已经完成阅读的部分总结一点心得。</p>
<p>第一次看这本书是在几年前，可以说这本书对我编写代码的风格形成了很深的影响，而初读此书时也有种醍醐灌顶的感觉，哦，原来代码还可以这么写。</p>
<a id="more"></a>
<h1 id="从命名谈起"><a href="#从命名谈起" class="headerlink" title="从命名谈起"></a>从命名谈起</h1><p>当我们在写代码时，面临的第一个问题大概就是命名，你想创建一个类，需要命名；写函数，需要命名；甚至初始化一个变量，也需要给变量命名。但是一个好的命名和差的命名，可是有着天差地别的区别的。好的命名，让人扫一眼，就大概知道这个函数的作用是什么，甚至连大体会输出什么都知道，提升了代码的可读性。而差的命名会极大降低代码的可读性，让下一个阅读你代码的人，花费大量的时间。举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">privite func syncDataWhenConnect() &#123;</div><div class="line">    //doSomething</div><div class="line">&#125;</div><div class="line"></div><div class="line">privite func syncData() &#123;</div><div class="line">    //doSomething</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上下两个函数，很明显你看完第一个，会更明白这个函数的目的是什么，所以建议在书写函数的时候，尽量的使用动词，来准确的秒数函数的目的。</p>
<p>而给类命名则正好相反，再举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AddressManager.php</div><div class="line">MacAddress.php</div></pre></td></tr></table></figure>
<p>上下两个类名，这里我写的有点争议，其实在不同的语境里两个似乎都可以完成可读性的使命，但是假设一个程序，有存储用户地址的类，也有外接设备mac地址的类，哪个更易懂？所以类名的命名，尽量使用名词，并且要求简单直接，是什么就是什么，尽量少用动词，动词的活，让我们所在的文件夹，让命名空间们去阐述吧。</p>
<p>虽然我上面反复提及了名字简短，但是只有很少比例的命名能又短又明确的阐述命名意义，所以如果是为了增加可读性，长命名也不是完全不可取，虽然很多人黑<strong>Objective-C</strong>命名是又臭又长，但是这种命名带来的便利就是你扫一眼便知道函数要完成的目的，以及需要的参数。长短之别，自己把握吧。</p>
<h1 id="从简短代码谈起"><a href="#从简短代码谈起" class="headerlink" title="从简短代码谈起"></a>从简短代码谈起</h1><p>编程界的那帮金字塔尖的大牛们一致认为，函数是越短越好，如果实在控制不住，请不要超过20行，如果不小心超过了，那么你可以考虑拆分你的函数了。</p>
<p>其实每次我去反思这点的时候，我觉得可有意思了，讲道理的说，我有可能做不到，为什么呢，因为水平不够，对语言的理解不够透彻，有很多更深层的语言特性，还不能熟练应用。所以只能在能够考虑到的范围内，尽量缩短自己的函数长度，向大牛们看齐。</p>
<p>这次的手环模块，因为有很多蓝牙的连接状态判断，写了很多Swich ifelse等判断，而ifelse因为业务逻辑复杂，还在初次编写的时候夹杂了很多嵌套，所以需要重构的地方还是很多的。</p>
<p>我们写代码，开发时间算20%，那么剩下的80%就是维护时间，什么样的函数易于修改，当然是短的函数，每次改动都能做到心中有数。</p>
<p>而提到了维护，那么测试又不能不提，很可惜，我还没有看全测试，平时的工作中因为很多是移动端的编码，view层占的比重很大，有时候疏于测试，好好理解，好好实践，再来写下一篇心得吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近晚间的加班暂时暂停了，大概已经整整一个月每天焦头烂额的写着业务代码，被各种逻辑搞的整个人都不大好了，好在是写的差不多了。&lt;/p&gt;
&lt;p&gt;每当写了很多业务代码之后，我都会停下来反思一个问题，你的代码写的干净么，有需要重构的地方么。而这一次，因为一些临时性的需求变更，我自认为我写了一部分脏代码，这部分代码恰恰是bug的高发地段，而且也可能会带来后期维护的困难。那么如何来重构这部分代码呢？&lt;/p&gt;
&lt;p&gt;在我写下这部分脏代码之前，我自认为也是用了一些能够用上的设计模式，但是随着临时性的需求变更不断增加，有时候贪图省事直接在原有代码的基础上修改了事，很明显这违反了开放闭合原则。&lt;/p&gt;
&lt;p&gt;回到正题上来，回顾《clean code》这本书，正是帮助自己在反思的同时做好知识的回顾梳理，并且能够在重构中把学到的知识学以致用。虽然现在我还没有全部看完，但是也是可以从已经完成阅读的部分总结一点心得。&lt;/p&gt;
&lt;p&gt;第一次看这本书是在几年前，可以说这本书对我编写代码的风格形成了很深的影响，而初读此书时也有种醍醐灌顶的感觉，哦，原来代码还可以这么写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编码思考" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E6%80%9D%E8%80%83/"/>
    
      <category term="代码风格" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="clean code" scheme="http://yoursite.com/tags/clean-code/"/>
    
  </entry>
  
  <entry>
    <title>在云服务器上部署Laravel</title>
    <link href="http://yoursite.com/2017/03/19/%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2Laravel/"/>
    <id>http://yoursite.com/2017/03/19/在云服务器上部署Laravel/</id>
    <published>2017-03-19T08:27:56.000Z</published>
    <updated>2017-03-19T08:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习PHP和Laravel已经有一段时间了,但是所有的代码都是跑在本地的虚拟主机上的，于是去腾讯云申请了一个月的免费云主机，想把项目部署到云服务器上。</p>
<p>不得不说这里面的坑实在是有点多，让我这个初次接触服务器的小白摸不清头脑。在配置好服务器之后，部署一个Laravel项目更是费劲心思，于是乎想记录下部署Laravel项目的过程。</p>
<p>PS： Linux真是越用越有感觉的系统，回家在台式机上也要装个Linux敲代码用。</p>
<a id="more"></a>
<h1 id="环境简介"><a href="#环境简介" class="headerlink" title="环境简介"></a>环境简介</h1><p>在操作系统的选择上，我选用了Linux ubuntu16.04的系统，使用的是LNMP的环境，即 Linux + Nginx + Mysql + PHP的环境。</p>
<h2 id="删除Apache"><a href="#删除Apache" class="headerlink" title="删除Apache"></a>删除Apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 stop</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update-rc.d <span class="_">-f</span> apache2 remove</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove apache2</div></pre></td></tr></table></figure>
<p>先用这三条命令来删除Apaceh 之后更新一下包列表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<h2 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure>
<p>在安装完Nginx之后，要重启nginx </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx start</div></pre></td></tr></table></figure>
<p>执行完之后，在浏览器输入云服务器分配给你的公网ip，就可以看到welcome to nginx的界面了</p>
<h2 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2. 安装Mysql"></a>2. 安装Mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>
<p>过程中会提示你设置Mysql的密码，就跟平时的密码设置一样，一次输入，一次确认。密码确认完毕后基本等一会就安装好了。尝试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<p>如果登录成功，那Mysql就正确安装了。</p>
<h2 id="3-安装PHP"><a href="#3-安装PHP" class="headerlink" title="3.安装PHP"></a>3.安装PHP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install php5-fpm php5-cli php5-mcrypt</div></pre></td></tr></table></figure>
<p>只有通过php5-fpm，PHP在Nginx下才能正常运行，遂，安装之。</p>
<p>至于php5-mcrypt，有些PHP框架会依赖于这个，比如Laravel就是，所以也把它装上了。</p>
<p>题外话，这里的php5我自己在部署时安装了php7 如果想尝试的也可以试试。</p>
<h2 id="4-配置PHP"><a href="#4-配置PHP" class="headerlink" title="4.配置PHP"></a>4.配置PHP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/php5/fpm/php.ini</div></pre></td></tr></table></figure>
<p>打开PHP配置文件，找到cgi.fix_pathinfo选项，去掉它前面的注释分号;，然后将它的值设置为0,如下</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cgi.fix_pathinfo=<span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="5-启用php5-mcrypt"><a href="#5-启用php5-mcrypt" class="headerlink" title="5. 启用php5-mcrypt:"></a>5. 启用php5-mcrypt:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php5enmod mcrypt</div></pre></td></tr></table></figure>
<h2 id="6-重启php5-fpm"><a href="#6-重启php5-fpm" class="headerlink" title="6.重启php5-fpm:"></a>6.重启php5-fpm:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service php5-fpm restart</div></pre></td></tr></table></figure>
<p>在搭建完LEMP环境之后，首先要明确两个重要目录</p>
<p><strong>Nginx的默认root文件夹</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/share/nginx/html</div></pre></td></tr></table></figure>
<p><strong>Nginx的服务器配置文件所在目录</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/nginx/sites-available/</div></pre></td></tr></table></figure></p>
<p>上面两个目录记住就好，很常用，先摆出来</p>
<h1 id="下面一步一步在云服务器上部署Laravel"><a href="#下面一步一步在云服务器上部署Laravel" class="headerlink" title="下面一步一步在云服务器上部署Laravel"></a>下面一步一步在云服务器上部署Laravel</h1><h2 id="1-创建网站的根目录"><a href="#1-创建网站的根目录" class="headerlink" title="1.创建网站的根目录"></a>1.创建网站的根目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /var/www</div></pre></td></tr></table></figure>
<h2 id="2-配置nginx服务器"><a href="#2-配置nginx服务器" class="headerlink" title="2.配置nginx服务器"></a>2.配置nginx服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>
<p>打开nginx的配置文件之后，找到server这一块，大概是长这个样子的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80 default_server;</div><div class="line">        listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">        root /usr/share/nginx/html;</div><div class="line">        index index.html index.htm;</div><div class="line"></div><div class="line">        server_name localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中root，index ，server_name和location这几行需要稍微修改一下</p>
<p><strong>root修改</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root /var/www/laravel/public;</div></pre></td></tr></table></figure>
<p>这里就是将nginx服务器的根目录指向Laravel的public文件夹下，后续的Laravel项目的代码我们会放在我们之前创建的/var/www/laravel目录下</p>
<p><strong>index修改</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index index.php index.html index.htm;</div></pre></td></tr></table></figure>
<p>这里需要注意的是，将index.php排在最前面</p>
<p><strong>server_name修改</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server_name server_domain_or_IP;</div></pre></td></tr></table></figure>
<p>将server_domain_or_IP修改为你的公网IP</p>
<p><strong>location修改</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>修改完是这样的：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    root /var/www/laravel/public;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name server_domain_or_IP;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们还需要配置一下Nginx，让其执行PHP文件。同样是在这个文件里，在location下方添加下面的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    root /var/www/laravel/public;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    server_name server_domain_or_IP;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files <span class="variable">$uri</span> /index.php =404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，最下面的<code>location ~ \.php$</code>是自己加上去的：</p>
<p>配置完之后重启Nginx，使上面的配置项生效。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
<h2 id="3-创建Laravel项目"><a href="#3-创建Laravel项目" class="headerlink" title="3.创建Laravel项目"></a>3.创建Laravel项目</h2><p>在配置完nginx后，怎么获取Laravel的项目代码呢？有以下几种方法：</p>
<p><strong>(1).直接composer安装</strong></p>
<p>直接通过composer来安装，你可以在服务器上通过执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">curl <span class="_">-s</span>S https://getcomposer.org/installer | php</div></pre></td></tr></table></figure>
<p>上面命令会安装composer</p>
<p>composer全局使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</div></pre></td></tr></table></figure>
<p>然后在/var/www目录下直接执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo composer create-project laravel/laravel laravel</div></pre></td></tr></table></figure>
<p>因为我们之前创建/var/www目录，你可以直接cd /var/www然后执行上面的命令。然后坐等安装完成。</p>
<p><strong>(2).直接上传代码</strong></p>
<p>使用下面命令上传</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -r laravel root@your_IP:</div></pre></td></tr></table></figure>
<p>然后在服务器上将laravel移动到/var/www目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv laravel/ /var/www</div></pre></td></tr></table></figure>
<p>(3).使用Git和Coding平台</p>
<p>个人比较喜欢使用git来上传代码，可以很方便的更新代码和进行回滚，一旦版本更新出Bug我可以借助Git的强大版本管理能力来修复Bug。流程大概是这样：</p>
<p>本地代码－－－－&gt;Github－－－－&gt;云服务器<br>既然要使用git，那么先在云服务器上安装git：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<p>安装完成就可以使用git了，然后在Github上创建一个私有项目laravel，里面包含所有该Laravel项目所需代码。</p>
<p>一旦本地代码都推送到Coding，然后在/var/www目录下直接使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> your-project-git-link</div></pre></td></tr></table></figure>
<p>your-project-git-link替换为你Github上的laravel项目地址</p>
<h2 id="5-BINGO"><a href="#5-BINGO" class="headerlink" title="5.BINGO"></a>5.BINGO</h2><p>在浏览器输入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://server_domain_or_IP</div></pre></td></tr></table></figure>
<p>至此，你可以在服务器上随意地用Laravel了,keep coding!</p>
<h3 id="终极tips：-有了问题，页面出不来-各种错误-一定不要胡乱的调试，记得看log，非常有用。"><a href="#终极tips：-有了问题，页面出不来-各种错误-一定不要胡乱的调试，记得看log，非常有用。" class="headerlink" title="终极tips： 有了问题，页面出不来 各种错误 一定不要胡乱的调试，记得看log，非常有用。"></a>终极tips： 有了问题，页面出不来 各种错误 一定不要胡乱的调试，记得看log，非常有用。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习PHP和Laravel已经有一段时间了,但是所有的代码都是跑在本地的虚拟主机上的，于是去腾讯云申请了一个月的免费云主机，想把项目部署到云服务器上。&lt;/p&gt;
&lt;p&gt;不得不说这里面的坑实在是有点多，让我这个初次接触服务器的小白摸不清头脑。在配置好服务器之后，部署一个Laravel项目更是费劲心思，于是乎想记录下部署Laravel项目的过程。&lt;/p&gt;
&lt;p&gt;PS： Linux真是越用越有感觉的系统，回家在台式机上也要装个Linux敲代码用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Laravel部署" scheme="http://yoursite.com/tags/Laravel%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Laravel —— 路由的学习笔记</title>
    <link href="http://yoursite.com/2017/03/04/Laravel-%E2%80%94%E2%80%94-%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/04/Laravel-——-路由的学习笔记/</id>
    <published>2017-03-04T10:52:30.000Z</published>
    <updated>2017-03-04T10:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的工作非常忙，公司从项目紧张起来之后，一直在实施996加班制度，工作强度虽然如此，但是任然要利用有限的空余时间来学习。之前都有在前端方面的学习，所以一直想学习PHP，好把前后端的知识能贯穿起来做。现在有个很小的目标就是完成自己的第一个前后端串联的作品。</p>
<p>在一周之前开始系统学习PHP，在把语法过完之后，就开始找寻自己想首先研习的框架，方案有很多，最后我还是在众多方案中选择了<code>Laravel</code>，理由很简单 —— 优雅编程。</p>
<a id="more"></a>
<p>我一直觉得编程都不是一件枯燥的事情，能够把一个复杂的逻辑用简洁清晰的代码呈现出来，是一件很棒的事情。但是奈何功力尚浅，有时候空有一个优雅的开头，却在之后越来越复杂的业务逻辑中迷失了初心。所以首先选择一个以优雅著称的框架，之后慢慢修炼自己，写出美的代码才是正道。</p>
<p>吐槽完毕，咱来正式的记录下学习Laravel框架的一些笔记，因为之前配置开发环境的什么的网上的blog一抓一大把，我也在上面吐了三升血，所以咱一句都不提开发环境的配置了。如果你配置好了开发环境，看到了<code>Laravel 5</code>这个标题，那么，我们就正式与Laravel见面了。</p>
<p>新手第一次用Laravel，必须先掌握的一个知识点就是路由 —— <code>Route</code>, 因为之前在做iOS开发时，iOS的设计模式里也提出过路由的概念，我也大致的了解过，所以对于路由我并不陌生，熟悉了Laravel<code>Route</code>之后，诚实的说Laravel又一次提升了我对路由系统的认知，不由得感叹这个Laravel中路由系统的强大和优美，尤其当你把他和中间件结合起来看的时候。不过由于学习Laravel时间过短，我所能感受到的也只是皮毛而已。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'homepage'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>举个🌰，上面的代码是Laravel中最基本的路由设置，<strong>get</strong>后面的<strong>‘homepage’</strong>说明这个路由的跳转域名就是<strong>index/homepage</strong>,而返回的操作则是<code>return view(&#39;welcome&#39;)</code>,即为跳转到view层的welcome界面。只接受来自HTTP的GET请求。</p>
<p>上面的讲解，会让你很清晰的理解这段代码到底是什么意思。而这种一目了然也是Laravel的优雅之一。</p>
<p>至于其余的，我觉得文档应该比我讲的更明白，我也就不拿例子出来讲了。若是学习笔记等同于抄文档，那也失去了意义，更倾向于写一些心得体会。PHP的路，还很漫长呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的工作非常忙，公司从项目紧张起来之后，一直在实施996加班制度，工作强度虽然如此，但是任然要利用有限的空余时间来学习。之前都有在前端方面的学习，所以一直想学习PHP，好把前后端的知识能贯穿起来做。现在有个很小的目标就是完成自己的第一个前后端串联的作品。&lt;/p&gt;
&lt;p&gt;在一周之前开始系统学习PHP，在把语法过完之后，就开始找寻自己想首先研习的框架，方案有很多，最后我还是在众多方案中选择了&lt;code&gt;Laravel&lt;/code&gt;，理由很简单 —— 优雅编程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="Route" scheme="http://yoursite.com/tags/Route/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的警卫队</title>
    <link href="http://yoursite.com/2017/02/22/Swift%E4%B8%AD%E7%9A%84%E8%AD%A6%E5%8D%AB%E9%98%9F/"/>
    <id>http://yoursite.com/2017/02/22/Swift中的警卫队/</id>
    <published>2017-02-22T11:12:03.000Z</published>
    <updated>2017-02-22T11:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>大半个月没有更新自己的博客了，最近在忙一个新项目时间非常紧张，所以最近的博客更新进度就要稍微放缓一点了。</p>
<p>这个项目是纯粹的Swift项目，所以最近的博客会结合自己在使用Swift这门语言的过程中，对Swift的总结和感悟。今天就来介绍一下能让你在Swift中如虎添翼的警卫队成员 —— <code>guard</code>。</p>
<p>我们在编写业务代码中，经常会遇到的一种情况就是一大串的<strong>if else*，一层又一层的甚至还有嵌套，看的眼花缭乱，有时候根本不知道跑到了哪一层了，代码的可读性非常差。而在Swift里有比</strong>if else**更优雅的写法，那就是<code>guard</code>。</p>
<a id="more"></a>
<h2 id="使用-guard-来判断-nil"><a href="#使用-guard-来判断-nil" class="headerlink" title="使用 guard 来判断 nil"></a>使用 guard 来判断 nil</h2><p>传统的Objective-C在判断<strong>nil</strong>的时候，会用下面的写法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (something == <span class="literal">nil</span>) &#123;</div><div class="line">    <span class="comment">// doSomething</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// throw error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而若是我们改用<strong>guard</strong>来实现的话会是下面的情况:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> (something == <span class="literal">nil</span>) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// throw error</span></div><div class="line">    <span class="keyword">return</span> <span class="comment">// guard 裡面一定要有 return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// doSomething</span></div></pre></td></tr></table></figure>
<p>改成这样，判断并不会一层一层的累加下去，代码看上去也比之前美观易懂了很多，但是要注意的是不要搞错逻辑，免得直接<strong>return</strong>了。</p>
<p>而这样的用法也符合<a href="https://github.com/github/swift-style-guide" target="_blank" rel="external">Swift编码规范</a>所强调的那样，尽早的<code>Return</code>或者<code>break</code>。</p>
<h2 id="使用-guard-来判断类型"><a href="#使用-guard-来判断类型" class="headerlink" title="使用 guard 来判断类型"></a>使用 guard 来判断类型</h2><p>介于Swift里的Optional类型的增加，我们有时候也可以使用<strong>guard</strong>来判断一个属性的类型。例如如下代码所做的那样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明的function</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(input: Bool, handler: <span class="params">(obj: AnyObject?)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Void</span> &#123;</div><div class="line">    <span class="keyword">let</span> someDict: [<span class="type">Int</span>: <span class="type">String</span>] = [<span class="number">1</span>: <span class="string">"One"</span>, <span class="number">2</span>: <span class="string">"Two"</span>, <span class="number">3</span>: <span class="string">"Three"</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> input &#123;</div><div class="line">        handler(obj: someDict)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        handler(obj: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 执行函数</span></div><div class="line">doSomething(<span class="literal">true</span>) &#123; (obj) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 判断是否为 [Int:String] 的类型(Dictionary)</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> someDict = obj <span class="keyword">as</span>? [<span class="type">Int</span>:<span class="type">String</span>] <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj not match dictionary"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将 Dictionary 里面每个 value 打印出来</span></div><div class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> someDict &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Dictionary key <span class="subst">\(key)</span> -  Dictionary value <span class="subst">\(value)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 自行输入 key 但会印出 Optional</span></div><div class="line">    <span class="built_in">print</span>( <span class="string">"Value of key = 1 is <span class="subst">\(someDict[<span class="number">1</span>])</span>"</span> )</div><div class="line">    <span class="built_in">print</span>( <span class="string">"Value of key = 2 is <span class="subst">\(someDict[<span class="number">2</span>])</span>"</span> )</div><div class="line">    <span class="built_in">print</span>( <span class="string">"Value of key = 3 is <span class="subst">\(someDict[<span class="number">3</span>])</span>"</span> )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的🌰，我们已经可以看到一个如何对可选类型解包的操作了。许多人在初入Swift的大门时，经常被可选类型搞的程序Crash，所以学以致用，用上优雅的警卫队吧。让他来帮助你实现更加优雅健壮的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大半个月没有更新自己的博客了，最近在忙一个新项目时间非常紧张，所以最近的博客更新进度就要稍微放缓一点了。&lt;/p&gt;
&lt;p&gt;这个项目是纯粹的Swift项目，所以最近的博客会结合自己在使用Swift这门语言的过程中，对Swift的总结和感悟。今天就来介绍一下能让你在Swift中如虎添翼的警卫队成员 —— &lt;code&gt;guard&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们在编写业务代码中，经常会遇到的一种情况就是一大串的&lt;strong&gt;if else*，一层又一层的甚至还有嵌套，看的眼花缭乱，有时候根本不知道跑到了哪一层了，代码的可读性非常差。而在Swift里有比&lt;/strong&gt;if else**更优雅的写法，那就是&lt;code&gt;guard&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="guard" scheme="http://yoursite.com/tags/guard/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——影响图形性能的因素以及检测方法</title>
    <link href="http://yoursite.com/2017/02/08/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E5%BD%B1%E5%93%8D%E5%9B%BE%E5%BD%A2%E6%80%A7%E8%83%BD%E7%9A%84%E5%9B%A0%E7%B4%A0%E4%BB%A5%E5%8F%8A%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/02/08/iOS开发——影响图形性能的因素以及检测方法/</id>
    <published>2017-02-08T02:32:37.000Z</published>
    <updated>2017-02-08T02:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我想各位攻城狮们肯定听过一句话：“过早的优化是万恶之源”。若是你有着丰富的项目经验，一定会对这句话有着自己的体会，而若是编程新手，那么，请牢记这句话。在一个项目开发到后期，优化就会成为一个不可避免的话题，而这时，优化以及性能问题又显得尤为重要。</p>
<p>本文讨论的是iOS的图形性能问题。</p>
<a id="more"></a>
<h1 id="影响性能的因素"><a href="#影响性能的因素" class="headerlink" title="影响性能的因素"></a>影响性能的因素</h1><p>1、 <strong>CALayer</strong>的<strong>shouldRasterize</strong>(光栅化)</p>
<p>这个属性看上去很不好理解，光栅化是将几何数据经过一系列变换后最终转换为像素，从而呈现在显示设备上的过程。光栅化的本质是坐标变换、几何离散化。</p>
<p>把<strong>layer</strong>的<strong>shouldRasterize</strong>设为<strong>YES</strong>后，<strong>CALayer</strong>会被光栅化为<strong>bitmap</strong>，<strong>layer</strong>的阴影等效果也会被保存到<strong>bitmap</strong>中作为缓存。在使用了<strong>shadow</strong>或<strong>cornerRadius</strong>等效果时，缓存使性能得到提升。</p>
<p>但是在使用这个属性前，需要明确3点：</p>
<ul>
<li><p>更新已经光栅化的<strong>CALayer</strong>会造成离屏渲染</p>
</li>
<li><p>被光栅化的<strong>bitmap</strong>如果超过100ms没有被使用则会被移除</p>
</li>
<li><p>系统限制缓存的大小为<strong>2.5 x screen size</strong></p>
</li>
</ul>
<p>2、<strong>Offscreen rendering</strong>(离屏渲染)</p>
<p>讨论造成离屏渲染的原因之前，先说明什么是离屏渲染：离屏渲染指的是在图像在绘制到当前屏幕前,需要先进行一次渲染,之后才绘制到当前屏幕。在第一次渲染时，<strong>GPU(Core Animation)</strong>或<strong>CPU(Core Graphics)</strong>需要额外的一块内存来进行渲染，完成后再绘制到屏幕。<strong>offscreen</strong>到<strong>onscreen</strong>需要进行上下文切换，这个切换的性能消耗是昂贵的。</p>
<p>因此，我们必须避免不必要的离屏渲染。</p>
<p>造成离屏渲染的原因有：</p>
<ul>
<li>设置<code>CALayer</code>的<code>cornerRadiu</code>，<code>edgeAntialiasingMask</code>，<code>allowsEdgeAntialiasing</code>属性</li>
<li>把<code>CALayer</code>的<code>maskToBounds</code>设为<code>YES</code></li>
<li>设置<code>CALayer</code>的<code>shadow</code>属性</li>
<li>设置<code>CALayer</code>的<code>mask</code>属性</li>
<li>把<code>CALayer</code>的<code>allowsGroupOpacity</code>属性设为<code>YES</code>而且<code>opacity</code>小于1</li>
</ul>
<p>等等…</p>
<p>由此可见，很多常用属性都会造成离屏渲染，在性能要求高的地方，就需要使用另外的实现方案。比如使用<code>shadowPath</code>代替使用<code>shadow+shadowOffset+shadowColor</code>；在需要使用圆形图片的<code>tableview</code>里，使用<code>cornerRadius</code>设置圆角是下下之选，可以用一张中间为透明圆形的图片进行遮盖来达到圆形的效果，或者在使用前就把图片裁剪为圆形。</p>
<p>3、Blending(混合绘制)</p>
<p>GPU会放弃绘制那些完全被其他图层遮盖的内容。如果两个图层叠加在一起，上面的图层不是完全不透明的，那么GPU便会计算合并两个图层的透明重叠像素，这个过程便是<code>blending</code>，这同样也是一个消耗资源的过程。</p>
<p>因此，不要随便把一个视图或图层的<code>backgroundColor</code>设为透明。</p>
<h1 id="使用Instrument进行检查"><a href="#使用Instrument进行检查" class="headerlink" title="使用Instrument进行检查"></a>使用Instrument进行检查</h1><p>用<code>Xcode</code>打开你的项目，选择工具栏上的<code>Product-&gt;Profile</code>，编译成功后会打开<code>Instrument</code>，在<code>Choose a profile template</code>页面下选择<code>Core Animation</code>，进入主界面。(如果需要检测动画帧数，需要使用真机)</p>
<p>点击左上方红色的录制按钮，开始检测：</p>
<p><img src="https://raw.githubusercontent.com/lizhijiang/BlogPhotos/master/2015-08-03-1.png" alt=""></p>
<p>在页面右下方，有一系列的复选框，利用这几个选项，我们可以很轻松的检查上面所提到的问题：(下面解释摘抄自iOS核心动画高级技巧第十二章)</p>
<ul>
<li><p><strong>Color Blended Layers</strong> - 这个选项基于渲染程度对屏幕中的混合区域进行绿到红的高亮（也就是多个半透明图层的叠加）。由于重绘的原因，混合对GPU性能会有影响，同时也是滑动或者动画帧率下降的罪魁祸首之一。</p>
</li>
<li><p><strong>ColorHitsGreenandMissesRed</strong> - 当使用<code>shouldRasterizep</code>属性的时候，耗时的图层绘制会被缓存，然后当做一个简单的扁平图片呈现。当缓存再生的时候这个选项就用红色对栅格化图层进行了高亮。如果缓存频繁再生的话，就意味着栅格化可能会有负面的性能影响了。</p>
</li>
<li><p><strong>Color Copied Images</strong> - 有时候寄宿图片的生成意味着<code>Core Animation</code>被强制生成一些图片，然后发送到渲染服务器，而不是简单的指向原始指针。这个选项把这些图片渲染成蓝色。复制图片对内存和CPU使用来说都是一项非常昂贵的操作，所以应该尽可能的避免。</p>
</li>
<li><p><strong>Color Immediately</strong> - 通常<code>Core Animation Instruments</code>以每毫秒10次的频率更新图层调试颜色。对某些效果来说，这显然太慢了。这个选项就可以用来设置每帧都更新（可能会影响到渲染性能，而且会导致帧率测量不准，所以不要一直都设置它）。</p>
</li>
<li><p><strong>Color Misaligned Images</strong> - 这里会高亮那些被缩放或者拉伸以及没有正确对齐到像素边界的图片（也就是非整型坐标）。这些中的大多数通常都会导致图片的不正常缩放，如果把一张大图当缩略图显示，或者不正确地模糊图像，那么这个选项将会帮你识别出问题所在。</p>
</li>
<li><p><strong>Color Offscreen-Rendered Yellow</strong> - 这里会把那些需要离屏渲染的图层高亮成黄色。这些图层很可能需要用<code>shadowPath</code>或者<code>shouldRasterize</code>来优化。</p>
</li>
<li><p><strong>Color OpenGL Fast Path Blue</strong> - 这个选项会对任何直接使用OpenGL绘制的图层进行高亮。如果仅仅使用UIKit或者Core Animation的API，那么不会有任何效果。如果使用<code>GLKView</code>或者<code>CAEAGLLayer</code>，那如果不显示蓝色块的话就意味着你正在强制CPU渲染额外的纹理，而不是绘制到屏幕。</p>
</li>
<li><p><strong>Flash Updated Regions</strong> - 这个选项会对重绘的内容高亮成黄色（也就是任何在软件层面使用<code>Core Graphics</code>绘制的图层）。这种绘图的速度很慢。如果频繁发生这种情况的话，这意味着有一个隐藏的bug或者说通过增加缓存或者使用替代方案会有提升性能的空间。</p>
</li>
</ul>
<p>需要注意的重点是这3个：</p>
<ul>
<li><strong>Color Blended Layers</strong></li>
</ul>
<p>勾选后，检查你的应用界面，<code>blended layer</code>会显示为红色，不透明的为绿色，红色越少越好，如果你的界面一片红海，那就是时候好好优化了。</p>
<ul>
<li><strong>ColorHitsGreenandMissesRed</strong></li>
</ul>
<p>勾选后，如果在你使用了<code>shouldRasterize</code>的地方界面显示为绿色，则表示使用正确性能良好，如果为红色，则需要考虑优化了。(第一次加载时会显示红色，因为这时还没缓存成功，需要检测重用的过程中(比如<code>tableview</code>上下滚动)的变化)</p>
<ul>
<li><strong>Color Offscreen-Rendered Yellow</strong></li>
</ul>
<p>如上所述，离屏渲染的地方都标记为黄色。并非所有的黄色区域都是需要优化的，比如<code>UINavigationBar</code>，因为需要做背景模糊效果，因此它需要离屏渲染。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述的很多原因分析，希望大家不要有强迫症的感觉，要求自己的所有项目必须按这个标准执行，因为这是不可能的，只是给大家提供一个优化方向，以及出了性能问题以后的分析依据。但是在日常的编码过程中，也要时刻把性能的意识放在心上，写出优秀的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想各位攻城狮们肯定听过一句话：“过早的优化是万恶之源”。若是你有着丰富的项目经验，一定会对这句话有着自己的体会，而若是编程新手，那么，请牢记这句话。在一个项目开发到后期，优化就会成为一个不可避免的话题，而这时，优化以及性能问题又显得尤为重要。&lt;/p&gt;
&lt;p&gt;本文讨论的是iOS的图形性能问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Instruments" scheme="http://yoursite.com/tags/Instruments/"/>
    
  </entry>
  
  <entry>
    <title>高性能设置圆角，告别离屏渲染</title>
    <link href="http://yoursite.com/2017/02/06/%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%BE%E7%BD%AE%E5%9C%86%E8%A7%92%EF%BC%8C%E5%91%8A%E5%88%AB%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2017/02/06/高性能设置圆角，告别离屏渲染/</id>
    <published>2017-02-06T07:27:03.000Z</published>
    <updated>2017-02-06T07:28:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来写一个老生常谈的话题，也是一个面试的高频问题，我也在面试时不止一次被问到过这个问题——如何高性能的设置圆角。就用他作为2017年春节上班之后的第一篇文章。</p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在谈及圆角这个话题之前，我们必须先知道系统的<code>API</code>是怎样去简单方便的设置圆角的。以一个<code>imageView</code>控件来举例。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.layer.cornerRadius = <span class="built_in">CGFloat</span>(<span class="number">10</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>简单粗暴，就能设置圆角。而在这里的一行代码，必须为它洗白一件事情，设置圆角的这行代码，本身并不会带来任何的性能损耗。如果诸位看官看到此处不相信，大可打开<code>Instruments</code>用<code>Core Animation</code>来试试看，你就会发现既没有<code>Off-Screen Render</code>,也不会出现掉帧的情况。至于使用<code>Instruments</code>来对<code>UIKit</code>进行分析调试，到时候再写一篇文章来详解好了。</p>
<p>但是，如果你给一个<code>UILabel</code>也使用了上面的一行代码，你会发现这个<code>UILabel</code>并不会有任何的变化，可是我们确实实实在在的为它设置了圆角属性。也就是说，很多时候这个属性对于内部还有子视图的控件是无能为力的。所以很多时候，我们会这么来设置圆角。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">imageView.layer.cornerRadius = <span class="built_in">CGFloat</span>(<span class="number">10</span>);</div><div class="line">imageView.layer.masksToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>这时候咱们再打开<code>Instruments</code>去观察，恶心的离屏渲染如约而至。</p>
<p>这里我在稍微赘述一下离屏渲染的概念，什么是离屏渲染呢？</p>
<blockquote>
<p>讨论造成离屏渲染的原因之前，先说明什么是离屏渲染：离屏渲染指的是在图像在绘制到当前屏幕前,需要先进行一次渲染,之后才绘制到当前屏幕。在第一次渲染时，GPU(Core Animation)或CPU(Core Graphics)需要额外的一块内存来进行渲染，完成后再绘制到屏幕。offscreen到onscreen需要进行上下文切换，这个切换的性能消耗是昂贵的。</p>
<p>因此，我们必须避免不必要的离屏渲染。</p>
</blockquote>
<p>造成离屏渲染的原因有：</p>
<ul>
<li><p>设置CALayer的cornerRadius，edgeAntialiasingMask，allowsEdgeAntialiasing属性</p>
</li>
<li><p>把CALayer的maskToBounds设为YES</p>
</li>
<li><p>设置CALayer的shadow属性</p>
</li>
<li><p>设置CALayer的mask属性</p>
</li>
<li><p>把CALayer的allowsGroupOpacity属性设为YES而且opacity小于1</p>
</li>
</ul>
<p>讲到这里，大家大可不必对离屏渲染产生巨大的恐慌，因为当一个界面的圆角图片不够多的时候，对性能的损耗影响基本可以忽略不计。所以这里的圆角优化是针对一屏有很多个圆角的应用来说的。</p>
<h1 id="UIImageView-添加圆角"><a href="#UIImageView-添加圆角" class="headerlink" title="UIImageView 添加圆角"></a>UIImageView 添加圆角</h1><p>一般我们最常见的是为<code>UIImageView</code>添加圆角，首先重要的事情放到前面讲，千万避免通过重写<code>drawRect</code>方法来设置圆角，不恰当的使用这个方法，会导致内存的暴增。其次，这种方法的同样会导致离屏渲染。</p>
<p>而一个比较理想的实现思路，是直接截取图片。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGSize</span> size = <span class="keyword">self</span>.bounds.size;</div><div class="line">    <span class="built_in">CGFloat</span> scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    <span class="built_in">CGSize</span> cornerRadii = <span class="built_in">CGSizeMake</span>(cornerRadius, cornerRadius);</div><div class="line">    </div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">YES</span>, scale);</div><div class="line">    <span class="built_in">CGContextRef</span> currentContext = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == currentContext) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">UIBezierPath</span> *cornerPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.bounds byRoundingCorners:rectCornerType cornerRadii:cornerRadii];</div><div class="line">    <span class="built_in">UIBezierPath</span> *backgroundRect = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="keyword">self</span>.bounds];</div><div class="line">    [backgroundColor setFill];</div><div class="line">    [backgroundRect fill];</div><div class="line">    [cornerPath addClip];</div><div class="line">    [<span class="keyword">self</span>.layer renderInContext:currentContext];</div><div class="line">    [<span class="keyword">self</span> drawBorder:cornerPath];</div><div class="line">    <span class="built_in">UIImage</span> *processedImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    <span class="keyword">if</span> (processedImage) &#123;</div><div class="line">        objc_setAssociatedObject(processedImage, &amp;kProcessedImage, @(<span class="number">1</span>), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.image = processedImage;</div></pre></td></tr></table></figure>
<p>上面这段代码我只是给出了大致的实现思路，圆角路径直接用贝塞尔曲线绘制，而其中的属性，使用了<code>runtime</code>的黑魔法去设置，在<strong>Category</strong> 给一个现有的类添加属性，但是却不能添加实例变量，这似乎成为了 <strong>Objective-C</strong>的一个明显短板。然而值得庆幸的是，我们可以通过 <strong>Associated Objects</strong>来弥补这一不足。</p>
<p>至于完整的Demo和方法库，网上已经有很多了，Github动手搜索吧。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>如果能够只用 cornerRadius 解决问题，就不用优化。</p>
</li>
<li><p>如果必须设置 masksToBounds，可以参考圆角视图的数量，如果数量较少（一页只有几个）也可以考虑不用优化。</p>
</li>
<li><p>UIImageView 的圆角通过直接截取图片实现，其它视图的圆角可以通过 Core Graphics 画出圆角矩形实现。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来写一个老生常谈的话题，也是一个面试的高频问题，我也在面试时不止一次被问到过这个问题——如何高性能的设置圆角。就用他作为2017年春节上班之后的第一篇文章。&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;在谈及圆角这个话题之前，我们必须先知道系统的&lt;code&gt;API&lt;/code&gt;是怎样去简单方便的设置圆角的。以一个&lt;code&gt;imageView&lt;/code&gt;控件来举例。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;imageView.layer.cornerRadius = &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="圆角" scheme="http://yoursite.com/tags/%E5%9C%86%E8%A7%92/"/>
    
      <category term="离屏渲染" scheme="http://yoursite.com/tags/%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——推送跳转到指定页面</title>
    <link href="http://yoursite.com/2017/01/24/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E6%8E%A8%E9%80%81%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%8C%87%E5%AE%9A%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2017/01/24/iOS开发——推送跳转到指定页面/</id>
    <published>2017-01-24T05:54:23.000Z</published>
    <updated>2017-01-24T05:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>眨眼2016年就这么走到了结尾，再过两天新年就要开始了。回顾从2016年开始养成的写博客的习惯，一直能延续下来，保持了一整年，还是比较欣慰的一件事情。希望2017年自己的技术能够继续稳步的提升。</p>
<p>今天在这2016年的最后一篇博客里，咱来聊聊推送通知的跳转。</p>
<p>当推送通知到达时，点击推送通知跳转到指定界面，是很多应用都会碰到的一个需求，而要实现这个功能，解决的方法也很多，若是去谷歌搜索，有一个万能跳转的文章可能会进入您的眼帘，但是我实际的去看了这个项目的源码之后，感觉这个库有一定的局限性，用<strong>runtime</strong>实现跳转这不假，但是在请求字段里加上了<code>ViewController</code>的类名，这其实就是局限的地方了，毕竟除了服务咱们<strong>iOS</strong>端，你也得考虑考虑安卓端的攻城狮不是，然而如果你换一个约定的字段再来解析，那倒不如用<code>URL</code>来作为判断依据更为方便。</p>
<a id="more"></a>
<p>之前的几篇文章，我也在研究<strong>iOS</strong>开发的组件化的架构模式，也有的应用在走组件化的道路上使用了<code>URL</code>来跳转界面完成解耦，在实现推送时，我们也能沿用这个思路，用<code>URL</code>实现界面的跳转。关于使用哪个<code>Router</code>框架，其实真的是萝卜青菜各有所爱，很成熟的 <a href="https://github.com/joeldev/JLRoutes" target="_blank" rel="external">JLRoutes</a>、 <a href="https://github.com/clayallsopp/routable-ios" target="_blank" rel="external">routable-ios</a>、 <a href="https://github.com/lightory/HHRouter" target="_blank" rel="external">HHRouter</a>、 <a href="https://github.com/mogujie/MGJRouter" target="_blank" rel="external">MGJRouter</a>，在经过比较已经实际使用之后，我选择了<code>MGJRouter</code>这款蘑菇街开源的组件应用到项目中。为什么会选择<code>MGJRouter</code>这款组件呢，其实理由就跟他简单的介绍一样，高效、灵活。</p>
<p>来说一说这个基本的使用方式，首先你得跟后台约定推送的参数，比如我在跟后台的约定里，参数名就是<code>url</code>，那么我在拿到推送的<code>userInfo</code>时，就需要把<code>url</code>解析出来。在</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject], fetchCompletionHandler completionHandler: <span class="params">(UIBackgroundFetchResult)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject])</span></span></div></pre></td></tr></table></figure>
<p> 这两个方法中，你可以获取到<code>userInfo</code>,例如后端给我传了这样的推送消息</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[aps: &#123;</div><div class="line">    alert = "\U6d4b\U8bd5\U7cfb\U7edf\U6d88\U606f";</div><div class="line">    badge = 1;</div><div class="line">    category = system;</div><div class="line">    sound = "";</div><div class="line">&#125;, redirect: &#123;</div><div class="line">    data = "&lt;null&gt;";</div><div class="line">    target = article;</div><div class="line">    "target_id" = 5397;</div><div class="line">    "target_url" = "lix://cms/articles/3333";</div><div class="line">&#125;, _j_msgid: 5228988433]</div></pre></td></tr></table></figure>
<p> 很清楚的看到我们需要拿到<code>target_url</code>这个字段，至于怎么解析JSON，我就不啰嗦了，假设此时我们已经拿到了<code>url</code>，<code>url</code>其实为 <code>lix://cms/articles/:id</code>这个格式，<code>3333</code>是我们需要根据这个id跳转到的文章界面。</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 推送地址</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *ARTICLES_URL = <span class="string">@"lix://cms/articles/:id"</span>;   <span class="comment">//资讯详情</span></div></pre></td></tr></table></figure>
<p> 在定义好<code>url</code>的情况下，我们需要先用<code>MGJRouter</code>注册我们的<code>url</code>，</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)registerArticlePush &#123;</div><div class="line">    [MGJRouter registerURLPattern:ARTICLES_URL toHandler:^(<span class="built_in">NSDictionary</span> *routerParameters) &#123;</div><div class="line">       <span class="comment">//打印URL</span></div><div class="line">        LixLog(<span class="string">@"routerParameterURL:%@"</span>, routerParameters[MGJRouterParameterURL]);</div><div class="line">        <span class="comment">//获取URL中的id</span></div><div class="line">        <span class="built_in">NSString</span> *<span class="keyword">id</span> = routerParameters[<span class="string">@"id"</span>];</div><div class="line">        ArticleModel *model = [[ArticleModel alloc] init];</div><div class="line">        model._id = <span class="keyword">id</span>;</div><div class="line">        ArticleDetailViewController *articleViewController = [[ArticleDetailViewController alloc] init];</div><div class="line">        articleViewController.articleModel = model;</div><div class="line">        <span class="comment">//界面跳转</span></div><div class="line">        [LixObjcRouter pushController:articleViewController];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这段代码可以当成一个完整的业务逻辑的范例，在写好业务逻辑之后，我们需要去<code>AppDelegate</code>的<code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool</code>里注册<code>url</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">LixObjcRouter</span>.registerArticlePush()</div></pre></td></tr></table></figure>
<p>做完这些之后，咱们只要</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject], fetchCompletionHandler completionHandler: <span class="params">(UIBackgroundFetchResult)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject])</span></span></div></pre></td></tr></table></figure>
<p>这两个方法里处理推送通知就好了，非常简单的一个<code>Api</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[MGJRouter openURL:url];</div></pre></td></tr></table></figure>
<p>到这里，推送之后的页面跳转也就差不多完成了，只要再注意<code>badge</code>的数值处理，前台时推送通知的处理等情况就可以了。</p>
<p>用完蘑菇街的<code>Router</code>组件，又让我想接着啰嗦上次的组件化的思考了，用完这种方式，我还是觉得，如果把这个框架引入进行组件化，那么每次启动，都必须去注册这些<code>url</code>，如果小工程也没有组件化的必要，可是大工程，管理<code>url</code>又是一件费神的事情。</p>
<p>所以推送跳转，我选择<code>MGJRouter</code>,因为足够方便高效，可是组件化的道路，我更看好<a href="https://github.com/casatwy/CTMediator" target="_blank" rel="external">CTMediator</a>这样彻底解耦的方式。感兴趣的自己搜索研究吧。</p>
<p>年前最后一篇，新年快乐，鸡年大吉吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;眨眼2016年就这么走到了结尾，再过两天新年就要开始了。回顾从2016年开始养成的写博客的习惯，一直能延续下来，保持了一整年，还是比较欣慰的一件事情。希望2017年自己的技术能够继续稳步的提升。&lt;/p&gt;
&lt;p&gt;今天在这2016年的最后一篇博客里，咱来聊聊推送通知的跳转。&lt;/p&gt;
&lt;p&gt;当推送通知到达时，点击推送通知跳转到指定界面，是很多应用都会碰到的一个需求，而要实现这个功能，解决的方法也很多，若是去谷歌搜索，有一个万能跳转的文章可能会进入您的眼帘，但是我实际的去看了这个项目的源码之后，感觉这个库有一定的局限性，用&lt;strong&gt;runtime&lt;/strong&gt;实现跳转这不假，但是在请求字段里加上了&lt;code&gt;ViewController&lt;/code&gt;的类名，这其实就是局限的地方了，毕竟除了服务咱们&lt;strong&gt;iOS&lt;/strong&gt;端，你也得考虑考虑安卓端的攻城狮不是，然而如果你换一个约定的字段再来解析，那倒不如用&lt;code&gt;URL&lt;/code&gt;来作为判断依据更为方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——在CocoaPods发布个人第三方库</title>
    <link href="http://yoursite.com/2017/01/17/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E5%9C%A8CocoaPods%E5%8F%91%E5%B8%83%E4%B8%AA%E4%BA%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>http://yoursite.com/2017/01/17/iOS开发——在CocoaPods发布个人第三方库/</id>
    <published>2017-01-17T09:14:24.000Z</published>
    <updated>2017-01-17T09:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在进行日常的 iOS 开发的时候，我们肯定会用到各种第三方库，每次使用一个库的时候，各种依赖配置总是让人很头痛。幸好我们有了 CocoaPods，CocoaPods 为我们节省了大量集成第三方库的时间。在我们便捷地使用他人制作的 Pod 的时候，一定也希望能够将自己的代码制作成 Pod 供别人使用，来为开源社区做一点贡献。接下来，我们就来尝试制作一个属于自己的 Pod 库，并发布供他人使用。</p>
</blockquote>
<p>备注：假设你已经拥有了一个完善的用于制作 Pod 的 iOS 工程。</p>
<a id="more"></a>
<h1 id="创建-Pod-库依赖的文件"><a href="#创建-Pod-库依赖的文件" class="headerlink" title="创建 Pod 库依赖的文件"></a>创建 Pod 库依赖的文件</h1><h2 id="1-podspec-文件"><a href="#1-podspec-文件" class="headerlink" title="1. podspec 文件"></a>1. podspec 文件</h2><p>podspec 文件是 Pod 库的描述文件，每个 Pod 库必须有且仅有一个这样的文件。文件名需要与我们将要创建的 Pod 库的名称一致，如我将创建的 Pod 库名称为 LixFoundation， 那么我的 podspec 文件就是 LixFoundation.podspec。</p>
<h2 id="创建-podspec-文件"><a href="#创建-podspec-文件" class="headerlink" title="创建 podspec 文件"></a>创建 podspec 文件</h2><p>在工程目录下，执行(注意把名称换成你自己的名称)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create LixFoundation</div></pre></td></tr></table></figure>
<p>创建完成后，在你的工程目录下就会出现对应的文件。以下是我创建出来的文件（为了方便阅读，我把所有注释和不需要的选项都删去了）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line"></div><div class="line">  s.name         = &quot;LixFoundation&quot;</div><div class="line">  s.version      = &quot;0.0.1&quot;</div><div class="line">  s.summary      = &quot;Objective-C编程基础工具类&quot;</div><div class="line"></div><div class="line">  s.homepage     = &quot;https://github.com/originalix/LixFoundation&quot;</div><div class="line"></div><div class="line">  #s.license      = &quot;MIT&quot;</div><div class="line">  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</div><div class="line"></div><div class="line"></div><div class="line">  s.author             = &#123; &quot;Lix&quot; =&gt; &quot;xiao.liunit@gmail.com&quot; &#125;</div><div class="line"></div><div class="line">  s.platform     = :ios</div><div class="line">  s.platform     = :ios, &quot;7.0&quot;</div><div class="line"></div><div class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/originalix/LixFoundation.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</div><div class="line"></div><div class="line">  s.source_files  = &quot;Lix_Foundation&quot;, &quot;Lix_Foundation/**/*.&#123;h,m&#125;&quot;</div><div class="line">  s.frameworks = &quot;Foundation&quot;, &quot;UIKit&quot;</div><div class="line">  s.dependency &apos;LixMacro&apos;, &apos;~&gt; 0.0.3&apos;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>该文件虽然是 Ruby 文件，但是里面的条目的意思都明显，就算没有学过 Ruby 也不影响。<br>几个需要说明的参数：</p>
<ol>
<li>s.homepage: 一般就是 Github 仓库的主页）。</li>
<li>s.license: 指的是 Pods 依赖库使用的 license 类型。</li>
<li>s.source: 表示 git 仓库的地址，注意是指向 tag 的，所以需要给你的 git 仓库打上 tag。</li>
<li>s.source_files : 表示源文件的路径，是相对于创建的 podspec 文件而言的。</li>
</ol>
<h2 id="其他应该具备的文件"><a href="#其他应该具备的文件" class="headerlink" title="其他应该具备的文件"></a>其他应该具备的文件</h2><h3 id="1-license-文件"><a href="#1-license-文件" class="headerlink" title="1. license 文件"></a>1. license 文件</h3><p><code>CocoaPods</code> 强制要求所有的 <code>Pod</code> 依赖库都必须有 <code>license</code> 文件，否则验证不会通过。<code>license</code> 的类型很多，你可以在创建 <code>Github</code>仓库的时候一并创建，也可以在后来添加进去。具体的 <code>license</code> 类型和适合你的 <code>license</code> 请自行 <code>google</code>。我在 Github 创建项目的时候，选择了 <code>MIT license</code> 一并创建</p>
<h3 id="2-主文件"><a href="#2-主文件" class="headerlink" title="2. 主文件"></a>2. 主文件</h3><p><code>Pod</code> 的根本目的就是将自己创建的类供他人使用，比如我的 Pod 的作用就是将 <code>LixFoundation</code> 类分享给别人使用，方便他们快捷的使用常用扩展和宏定义。所以我将 <code>LixFoundation</code> 放入到 <code>LixFoundation</code> 文件夹中。</p>
<h3 id="3-Demo-工程"><a href="#3-Demo-工程" class="headerlink" title="3. Demo 工程"></a>3. Demo 工程</h3><p><code>Demo</code> 工程是为了方便向其他使用者展示该 <code>Pod</code> 的使用。我将 <code>Demo</code>工程放在了 <code>LixFoundationDemo</code> 文件夹中。</p>
<h3 id="4-README-文件"><a href="#4-README-文件" class="headerlink" title="4. README 文件"></a>4. README 文件</h3><p>该文件一般使用 <code>Markdown</code> 语言标记，是对仓库的详细说明。作为一个共享给他人使用的 <code>Pod</code> 库，<code>README</code> 文件是必不可少的，这样对方才能很快的了解你的 <code>Pod</code> 具体是干嘛用的。</p>
<h2 id="提交修改的文件"><a href="#提交修改的文件" class="headerlink" title="提交修改的文件`"></a>提交修改的文件`</h2><h3 id="1-提交修改到-Github"><a href="#1-提交修改到-Github" class="headerlink" title="1. 提交修改到 Github"></a>1. 提交修改到 Github</h3><p>依次执行以下命令：</p>
<ul>
<li>将新添加的文件加入到 <code>git</code> 管理，并提交一个 <code>commit</code></li>
<li>打上 <code>tag</code> 为 <code>0.0.1</code>（为了 <code>Pod</code> 指向）</li>
<li>提交 <code>tag</code></li>
<li>提交到 <code>Github</code> 仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add -A &amp;&amp; git commit -m &quot;Release 0.0.1&quot;</div><div class="line">git tag &apos;0.0.1&apos;</div><div class="line">git push --tags</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>如果一切正常，就可以在 <code>Github</code> 上看到刚才的改动</p>
<h3 id="2-pod-验证"><a href="#2-pod-验证" class="headerlink" title="2. pod 验证"></a>2. pod 验证</h3><p>执行以下命令，为 <code>Pod</code> 添加版本号，并打上 <code>tag</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set the new version to 0.0.1</div><div class="line">set the new tag to 0.0.1</div></pre></td></tr></table></figure>
<p>接下来是验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果一切正常，终端中会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> -&gt; LixFoundation (0.0.1)</div><div class="line"></div><div class="line">LixFoundation passed validation.</div></pre></td></tr></table></figure>
<p>到此，pod 验证就成功。</p>
<p>##Trunk 你的 <code>Pod</code></p>
<p>以上工作都就绪后，就可以将我们的 <code>Pod</code> 提交给 <code>CocoaPods</code> 了，CocoaPods 使用 <code>trun</code> 服务让我们来提交 <code>Pod</code>。<br>`</p>
<h3 id="1-注册-Trunk"><a href="#1-注册-Trunk" class="headerlink" title="1. 注册 Trunk"></a>1. 注册 Trunk</h3><p>使用以下命令进行 <code>trunk</code> 注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register  youremail@gmail.com &apos;ihomway&apos; --description=&apos;macbook pro @ home&apos; --verbose</div></pre></td></tr></table></figure>
<p>上面的命令是我注册时使用的，你需要把邮箱和名字以及描述替换成你的，加上 <code>--verbose</code> 可以输出详细 <code>debug</code> 信息，方便出错时查看。</p>
<p>注册后 <code>CocoaPods</code> 会给你的邮箱发送验证链接，点击后就注册成功了，可以用 <code>pod trunk me</code> 命令查看自己的注册信息，如我的注册信息是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- Name:     **********</div><div class="line">- Email:    **********</div><div class="line">- Since:    **********</div><div class="line">- Pods:</div><div class="line">  - Lix_ModelSqliteKit</div><div class="line">  - LixMacro</div><div class="line">  - LixFoundation</div><div class="line">- Sessions:</div><div class="line">  - January 99th, 99:99 - May 25th, 03:02. IP: ********</div><div class="line">  Description: macbook pro @ home</div></pre></td></tr></table></figure>
<h3 id="2-部署你的Pod"><a href="#2-部署你的Pod" class="headerlink" title="2. 部署你的Pod"></a>2. 部署你的Pod</h3><p>使用以下命令，通过 <code>trunk</code> 部署你的 <code>Pod</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push LixFoundation.podspec</div></pre></td></tr></table></figure>
<p>将 <code>podspec</code> 的文件名换成自己的文件名。</p>
<p>如果你出现报错，请根据提示寻找错误的原因。</p>
<p>之后你可以运行 <code>pod setup</code> 来更新你的 Pod 依赖库后，再使用 <code>pod search LixFoundation</code> 命令来查找刚刚加入的名字叫 <code>LixFoundation</code> 的 <code>Pod</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在进行日常的 iOS 开发的时候，我们肯定会用到各种第三方库，每次使用一个库的时候，各种依赖配置总是让人很头痛。幸好我们有了 CocoaPods，CocoaPods 为我们节省了大量集成第三方库的时间。在我们便捷地使用他人制作的 Pod 的时候，一定也希望能够将自己的代码制作成 Pod 供别人使用，来为开源社区做一点贡献。接下来，我们就来尝试制作一个属于自己的 Pod 库，并发布供他人使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;备注：假设你已经拥有了一个完善的用于制作 Pod 的 iOS 工程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS漫谈——对于项目架构的思考</title>
    <link href="http://yoursite.com/2017/01/11/iOS%E6%BC%AB%E8%B0%88%E2%80%94%E2%80%94%E5%AF%B9%E4%BA%8E%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/01/11/iOS漫谈——对于项目架构的思考/</id>
    <published>2017-01-11T09:55:29.000Z</published>
    <updated>2017-01-11T09:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>又一次的版本更新上架，心情容不得片刻舒缓，新的迭代任务又明白的摆在桌面上。今年上半年自己琢磨完<code>ReactiveCocoa</code>之后，对手上了项目做了<code>MVVM</code>架构的尝试，当时自我感觉效果还不错，代码之间的关系确实变得清楚了，并且有更加多的机会去进行单元测试，但是在新的一年，回头再去思考自己当时的架构，依旧会发现很多的问题，例如虽然逻辑清晰，但是并没有完全解耦，一些界面任务的处理，依旧通过<code>RAC</code>返回到<code>View</code>层去处理。只是<code>Controller</code>更干净了，心里自己觉得舒服罢了。</p>
<p>之后又经手了现在这个项目，在最近不断的工作不断的熟悉业务代码的同时，近日来对于架构方面的思考也不少。这个项目模块之间功能清晰，业务A和业务B之间耦合较少，但是在未来的日子里，公司又有可能新启动项目，不出意外会使用到跟当前项目相同的模块，而如何能节约时间，亦或是在当前项目上调优架构，是我最近思考的主题。</p>
<a id="more"></a>
<p>在了解体会了项目中越来越多的缺点之后，我的脑子里首先蹦出来的就是<strong>模块化开发</strong>这个概念，这个概念在脑子里成形之后，我阅读了大量的他人组件化开发的源码，从阿里大神刘坤的博客里再到蘑菇街的组件化之路，大家再做<code>iOS</code>组件化开发时，似乎都或多或少的受到了路由这个概念的影响，这个概念是在各个模块之间，或者每个页面之间都用<code>url</code>来进行跳转，具体的话可以去查看<code>JLRoute</code>这个框架，是一个把<code>URL</code>跳转使用的非常好的一个框架，很理想。</p>
<p>但是我认为<code>URL</code>的路由概念虽好，但是在App启动时需要实例化各组件的模块，说白了就是有个类似注册各个模块的行为，而在组件化的过程中，注册<code>URL</code>并不是充分必要条件，会造成不必要的内存常驻，如果是注册<code>Class</code>，内存常驻会小一点，如果是注册实例，组件多了，常驻的内存也就更大了。</p>
<p>上述是第一点原因，其二，我认为当前团队，当开发人员去切换到路由模式，学习成本过大，我并不像在之前的公司，在软件团队里是一个决策者，当前我只是一个普通的程序员，改良架构这种事情的推动力度不够大，所以暂时先抛开组件化开发的这个想法。</p>
<p>其三，目前项目的时机未到，当前的项目还没有到相对完善的时候，迭代的压力也比较大，就目前的项目状况来看，似乎常规的开发模式还是可以沿用一段时间的，毕竟组件化开发的成效在小团队模式单项目的模式下不会体现的特别明显，反而团队越大，组件开发的必要性越强。并且当前团队在用<code>Swift</code>开发项目，如果希望最优的模块化开发，还是需要依赖到OC的<code>runtime</code>的。</p>
<p>至于如何进行组件化开发，我这里也就不赘述了，网上优秀的团队博客说了很多，比如阿里念纪、微信阅读、蘑菇街、casatwy等等。每一个都对组件化有独到的见解，而我现在能谈得所有见解，只不过是站在这些巨人的肩膀上汲取到的一点皮毛，真正的感想，还需等实践之后再来谈。</p>
<p>最近就打算写个小模块，把这个模块完全封装成一个组件，植入到App中。</p>
<p>对于缓存和数据持久化，我也想到了一个似乎可以更好处理，更干净的方案，等到测试完成，再写个文章单独讲述吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又一次的版本更新上架，心情容不得片刻舒缓，新的迭代任务又明白的摆在桌面上。今年上半年自己琢磨完&lt;code&gt;ReactiveCocoa&lt;/code&gt;之后，对手上了项目做了&lt;code&gt;MVVM&lt;/code&gt;架构的尝试，当时自我感觉效果还不错，代码之间的关系确实变得清楚了，并且有更加多的机会去进行单元测试，但是在新的一年，回头再去思考自己当时的架构，依旧会发现很多的问题，例如虽然逻辑清晰，但是并没有完全解耦，一些界面任务的处理，依旧通过&lt;code&gt;RAC&lt;/code&gt;返回到&lt;code&gt;View&lt;/code&gt;层去处理。只是&lt;code&gt;Controller&lt;/code&gt;更干净了，心里自己觉得舒服罢了。&lt;/p&gt;
&lt;p&gt;之后又经手了现在这个项目，在最近不断的工作不断的熟悉业务代码的同时，近日来对于架构方面的思考也不少。这个项目模块之间功能清晰，业务A和业务B之间耦合较少，但是在未来的日子里，公司又有可能新启动项目，不出意外会使用到跟当前项目相同的模块，而如何能节约时间，亦或是在当前项目上调优架构，是我最近思考的主题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="架构思考" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>使用Block提高代码可读性</title>
    <link href="http://yoursite.com/2017/01/06/%E4%BD%BF%E7%94%A8Block%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    <id>http://yoursite.com/2017/01/06/使用Block提高代码可读性/</id>
    <published>2017-01-06T09:11:37.000Z</published>
    <updated>2017-01-06T09:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在思考并持续的扩充着自己的技术栈，比如每天坚持着学习前端知识，并且时常想着在移动端这条路上，自己的技术盲区。诚然，想要在一个领域达到一定的技术高度是挺困难的一件事情，操之过急万万不可，最主要的还是保持对技术的热情，慢慢沉淀。</p>
<p>以前的公司并不需要高强度的加班，所以时长有时间去发掘一些新鲜玩意儿，圈内有了技术热潮，也能及时跟进观望或者学习，但是最近在一波高强度加班过后，这种业务代码与自身学习之间的冲突也让我产生了一些自己的看法。一个程序员，不论何时，不能抛掉持续学习的习惯。</p>
<p>最近的大面积写业务代码，当碰到两个类之间的传值问题，我习惯性的解决方案是使用<code>delegate</code>，我觉得<code>delegate</code>本身当命名得当并且功能单一时，可阅读性会比较好。在习惯了这种思维后，开发中也养成了自己的习惯。</p>
<p>但是在最近封装代码的时候，我发觉<code>delegate</code>对于我自己定义并编写代码来说，可读性和使用性很好，但是当他人来使用我封装的代码的时候，也许<code>Block</code>更容易被理解一点。举个简单的例子，就比如</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1</span> animations:^&#123;</div><div class="line">       <span class="comment">//do something</span></div><div class="line">           </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这是我们日常最常用的<code>Block</code>结构之一，需要执行的事情，只要在<code>Block</code>中交代清楚就可以了，在阅读他人的代码时，可以直接在<code>Block</code>中直接阅读到执行的事件，并不用再去关注各种<code>delegate</code>中执行了什么。大大提高了代码的可读性。</p>
<p>我认为，程序员首先是写人能看得懂的代码，顺便运行。</p>
<p>在这个理念的驱使下，我大概会在之后的开发过程中，对可读性这个概念更上心一点，能用<code>block</code>处理的事件，尽量的用<code>block</code>处理。很久以前我写过一篇博客，讲述的是<code>blcok</code>的传值，<strong>iOS4.0</strong>开始，苹果爸爸引入了<code>block</code>的特性，而自从<code>block</code>特性诞生之日起，似乎它就受到了苹果爸爸特殊的照顾和青睐。字面上说，<code>block</code>就是一个代码块，但是它的神奇之处在于在内联(inline)执行的时候(这和C++很像)还可以传递参数。同时block本身也可以被作为参数在方法和函数间传递，这就给予了<code>block</code>无限的可能。</p>
<p>在日常的<code>coding</code>里绝大时间里开发者会是各种<code>block</code>的使用者，但是当你需要构建一些比较基础的，提供给别人用的类的时候，使用<code>block</code>会给别人的使用带来很多便利。当然如果你已经厌烦了一直使用<code>delegate</code>模式来编程的话，偶尔转转写一些<code>block</code>，不仅可以锻炼思维，也能让你写的代码看起来高端洋气一些，而且因为代码跳转变少，所以可读性也会增加。</p>
<p>今天我用一个判断奇数偶数的例子，来说说如何在封装的方法中，根据条件来执行方法内携带的<code>block</code>。</p>
<p>首先看看我们这个含有<code>blcok</code>的类是如何声明的。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^LixExcuteOperation)(<span class="built_in">NSInteger</span>);</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^LixError)(<span class="keyword">void</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LixBlock</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)isOddNumber:(<span class="built_in">NSInteger</span>)number Excute:(LixExcuteOperation)excute Lixerror:(LixError)error;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>结合下面的图片，来看看<code>block</code>是如何声明并且定义的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/783864-3ad5d92333756aa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="block的声明与定义"></p>
<p>再来看看这个方法的内部，是如何使用<code>block</code>的，因为是示例，所以我很粗略的去判断了奇偶数，并没有考虑特殊情况，见谅，只是个栗子。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)isOddNumber:(<span class="built_in">NSInteger</span>)number Excute:(LixExcuteOperation)excute Lixerror:(LixError)error &#123;</div><div class="line">    <span class="built_in">BOOL</span> isOddNum = number % <span class="number">2</span> == <span class="number">0</span> ? <span class="literal">NO</span> : <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">if</span> (isOddNum &amp;&amp; excute) &#123;</div><div class="line">            excute(number);</div><div class="line">                </div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> (!isOddNum &amp;&amp; error) &#123;</div><div class="line">            error();</div><div class="line">                </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于调用，就更加随意了。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LixBlock *block = [[LixBlock alloc] init];</div><div class="line">[block isOddNumber:<span class="number">9</span> Excute:^(<span class="built_in">NSInteger</span> number) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"is OddNumber %ld"</span>, number);</div><div class="line">            </div><div class="line">&#125; Lixerror:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"is not OddNumber"</span>);</div><div class="line">            </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>至此，一个简单的封装<code>block</code>进方法的栗子就已经讲完了。举一反三的讲，我们在对网络请求进行二次封装，执行<code>success</code>或者<code>error</code>状态的闭包时，就可以用到类似的思想了。代码的可读性是否如愿提升了呢。</p>
<p>简单的栗子讲到这里，<code>Coding</code>还是需要多写多思考的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在思考并持续的扩充着自己的技术栈，比如每天坚持着学习前端知识，并且时常想着在移动端这条路上，自己的技术盲区。诚然，想要在一个领域达到一定的技术高度是挺困难的一件事情，操之过急万万不可，最主要的还是保持对技术的热情，慢慢沉淀。&lt;/p&gt;
&lt;p&gt;以前的公司并不需要高强度的加班，所以时长有时间去发掘一些新鲜玩意儿，圈内有了技术热潮，也能及时跟进观望或者学习，但是最近在一波高强度加班过后，这种业务代码与自身学习之间的冲突也让我产生了一些自己的看法。一个程序员，不论何时，不能抛掉持续学习的习惯。&lt;/p&gt;
&lt;p&gt;最近的大面积写业务代码，当碰到两个类之间的传值问题，我习惯性的解决方案是使用&lt;code&gt;delegate&lt;/code&gt;，我觉得&lt;code&gt;delegate&lt;/code&gt;本身当命名得当并且功能单一时，可阅读性会比较好。在习惯了这种思维后，开发中也养成了自己的习惯。&lt;/p&gt;
&lt;p&gt;但是在最近封装代码的时候，我发觉&lt;code&gt;delegate&lt;/code&gt;对于我自己定义并编写代码来说，可读性和使用性很好，但是当他人来使用我封装的代码的时候，也许&lt;code&gt;Block&lt;/code&gt;更容易被理解一点。举个简单的例子，就比如&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
      <category term="代码可读性" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——解析崩溃日志</title>
    <link href="http://yoursite.com/2017/01/04/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E8%A7%A3%E6%9E%90%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2017/01/04/iOS开发——解析崩溃日志/</id>
    <published>2017-01-04T09:19:51.000Z</published>
    <updated>2017-01-04T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS开发——解析崩溃日志</p>
<p>在实际的开发过程中，作为开发者的我们常常会碰到一种场景，那就是真机调试时崩溃了，而有时又不能在Xcode中打印出崩溃信息，那么这时候我们就必须要获取到崩溃原因，从而解决问题。</p>
<a id="more"></a>
<p>而在万能的<strong>Xcode</strong>中，你可以找到自己测试机里的崩溃日志。<code>Window</code> -&gt; <code>Devices</code> -&gt; 选中自己的测试机 <code>View Device Logs</code> ，类似下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/134882-3eb075f8e82c2413.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/jpg" alt=""></p>
<p>而此时你可以选择导出自己的崩溃日志，并且这里的我们看到的崩溃日志，都是Xcode已经帮我们符号化的，很清晰的就可以看到崩溃原因，以及崩溃的位置。</p>
<p>如果是其他用户，下载了我们的App之后出现了崩溃，我们可以从<code>iTunes Connect</code>中获取到其他用户的崩溃日志，但是这时如果你去看他人的崩溃日志，不出意外您是懵逼的。这是崩溃日志么？ 天书还差不多。而如何把他人的崩溃日志符号化呢？ 这就是我们接下来要讲的内容了。</p>
<p>依旧是万能的<strong>Xcode</strong>给我们提供了一个工具 —— <strong>symbolicatecrash</strong>，这是一个<strong>Xcode</strong>自带的分析工具，可以通过机器上的崩溃日志和应用的<code>.dSYM</code>文件定位发生崩溃的位置，把<code>Crash</code>日志中的一堆地址替换成代码相应的位置。</p>
<h1 id="如何使用symbolicatecrash分析崩溃日志"><a href="#如何使用symbolicatecrash分析崩溃日志" class="headerlink" title="如何使用symbolicatecrash分析崩溃日志"></a>如何使用symbolicatecrash分析崩溃日志</h1><ol>
<li><p>在你的桌面创建一个新文件夹，并且命名为”CrashReport”</p>
</li>
<li><p>打开终端输入 <code>find /Applications/Xcode.app -name symbolicatecrash -type f</code>，然后终端会返回这个文件的路径,只要找到<code>symbolicatecrash</code>文件, 复制然后粘贴到刚才创建的 “CrashReport” 文件夹里面.</p>
</li>
<li><p>从<strong>Xcode Archive</strong>的二进制文件中找到<strong>.dSYM</strong>文件和<strong>.app</strong>文件拷贝到刚才创建的 <code>CrashReport</code> 文件夹里面.</p>
</li>
<li><p>打开终端进入<strong>CrashReport</strong>文件夹，依次输入以下命令行:</p>
</li>
</ol>
<p>记得替换自己的<strong>Username</strong></p>
<ul>
<li><p><code>cd /Users/username/Desktop/CrashReport</code></p>
</li>
<li><p><code>export DEVELOPER_DIR=/Applications/XCode.app/Contents/Developer</code></p>
</li>
<li><p><code>./symbolicatecrash ./*.crash ./*.app.dSYM &gt; symbol.crash</code></p>
</li>
</ul>
<p>这时候终端将会进行处理……<br>处理结果是生成一个新的文件symbol.crash。然后打开这个文件。<br>你就会看到日志跟我们调试APP的控制台输出的内容一样了！</p>
<p>天书变成了可以看懂的崩溃记录，攻城狮们，赶紧改Bug吧。</p>
<p>不知不觉博客更新了一年了，2017的第一篇日志，希望大家新年无Bug。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发——解析崩溃日志&lt;/p&gt;
&lt;p&gt;在实际的开发过程中，作为开发者的我们常常会碰到一种场景，那就是真机调试时崩溃了，而有时又不能在Xcode中打印出崩溃信息，那么这时候我们就必须要获取到崩溃原因，从而解决问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Crash" scheme="http://yoursite.com/tags/Crash/"/>
    
      <category term="symbolicatecrash" scheme="http://yoursite.com/tags/symbolicatecrash/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——带有暂停功能的计时器</title>
    <link href="http://yoursite.com/2016/12/23/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E5%B8%A6%E6%9C%89%E6%9A%82%E5%81%9C%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2016/12/23/iOS开发——带有暂停功能的计时器/</id>
    <published>2016-12-22T23:39:35.000Z</published>
    <updated>2016-12-22T23:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇博客我跟大家分享了如何在iOS系统中使用原生框架获取步数，又是大半个月过去了，运动模块的全部功能也总算完成了，也打算有始有终的把如何做一个跑步类App跟大家分享了。</p>
<p>运动类应用中，有一个很重要的模块就是计时器，当然，这个计时器不算复杂，只要有简单的开始、暂停以及复位功能即可。那么今天我们从<strong>Model</strong>层来看看这个计时器的逻辑实现。</p>
<p>我们先自己创建一个时间的<strong>Model</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunningTimer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"><span class="comment">//MARK: var property</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> timeLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> timer: <span class="type">NSTimer</span>?</div><div class="line">    <span class="comment">//开始和结束时间列表</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">private</span> <span class="keyword">var</span> startTimes = [<span class="type">NSDate</span>]()</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">private</span> <span class="keyword">var</span> endTimes = [<span class="type">NSDate</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> timeNumber = <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            timeString = getTimeStringFromSecond(timeNumber)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">internal</span> <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> timeString = <span class="string">"00:00:00"</span> &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            timeLabel.text = timeString</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>先从这段声明变量的代码分析开来，首先是定义了一个<strong>timeLabel</strong>，这个变量主要是为了在初始化时，直接将<strong>View</strong>层要显示的<strong>Label</strong>绑定进来，<strong>timer</strong>即为一个计时器，顺便定义了两个数组，用来记录时间，因为在真实环境中，可能有若干次暂停，所以用数组来存储。<strong>timeNumber</strong>即为计时器中的总秒数，用<strong>Swift</strong>的<strong>didSet</strong>特性来监听属性的变化，当秒数发送变化时，讲秒数转化成时间的标准格式，并且赋值给<strong>timeString</strong>，同理，<strong>timeString</strong>也在属性发送变化时，将自己的值赋值给<strong>Label</strong>的<strong>text</strong>属性用以显示。</p>
<p>到这里我们的变量讲解完毕，接着往下看功能的实现。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK: - 初始化</span></div><div class="line"><span class="keyword">init</span>(timeLabel: <span class="type">UILabel</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.timeLabel = timeLabel</div><div class="line">    timeLabel.text = timeString</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是这个<strong>Model</strong>的初始化，用意一目了然，传入一个外部<strong>Label</strong>用以显示时间。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计时开始</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">timingStart</span><span class="params">()</span></span>&#123;</div><div class="line">        startTimes.append(<span class="type">NSDate</span>())</div><div class="line">        timer = <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">1</span>, target: <span class="keyword">self</span>, selector: #selector(<span class="keyword">self</span>.<span class="built_in">count</span>), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//暂停计时</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">timingPause</span><span class="params">()</span></span>&#123;</div><div class="line">        endTimes.append(<span class="type">NSDate</span>())</div><div class="line">        timer?.invalidate()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//暂停后继续计时</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">timingContinue</span><span class="params">()</span></span>&#123;</div><div class="line">        timingStart()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//重置Timer</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resetToStart</span><span class="params">()</span></span> &#123;</div><div class="line">        startTimes = []</div><div class="line">        endTimes = []</div><div class="line">        timer?.invalidate()</div><div class="line">        timeNumber = <span class="number">0</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里定义了四个方法，对应我们<strong>UI</strong>界面会出现的<strong>Button</strong>功能，<strong>Start</strong>、<strong>Pause</strong>、<strong>Continue</strong>、<strong>resetToStart</strong>。代码很简单，当start时添加当前时间至数组里，并且启动定时器，暂停时，销毁定时器，添加暂停的时间进入暂停数组。继续和重置同理。那么我们来看定时器启动时，对应的<strong>selector</strong>做了哪些事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK: - 计时器</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">timeCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> startTimes.<span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">            <span class="keyword">let</span> currentTime = <span class="type">NSDate</span>()</div><div class="line">            timeNumber = <span class="type">Int</span>(<span class="type">CFDateGetTimeIntervalSinceDate</span>(currentTime, startTimes[<span class="number">0</span>]))</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span> startTimes.<span class="built_in">count</span> - endTimes.<span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">                endTimes.append(<span class="type">NSDate</span>())</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> index = startTimes.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">            endTimes[index] = <span class="type">NSDate</span>()</div><div class="line">            <span class="keyword">var</span> timeCount = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> startTime <span class="keyword">in</span> startTimes&#123;</div><div class="line">                timeCount += <span class="type">Int</span>(<span class="type">CFDateGetTimeIntervalSinceDate</span>(endTimes[startTimes.indexOf(startTime)!],startTime))</div><div class="line">            &#125;</div><div class="line">            timeNumber = timeCount</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">()</span></span>&#123;</div><div class="line">        timeCount()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当计时器的<code>count()</code>方法运行时、调用<code>timeCount()</code>方法。<br>当我们第一次运行计时器时，获取的秒数就是开始时间与当前时间比对的差值。<br>而之后，就是跟暂停之后启动时间的对比了。<br>这里面使用<code>public func CFDateGetTimeIntervalSinceDate(theDate: CFDate!, _ otherDate: CFDate!) -&gt; CFTimeInterval</code>函数获取两个时间之间的时间戳差值。<br>最后再把前面那个秒数转格式化时间的方法也贴出来吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从以秒计时的时间里获得表示时间的字符串用于显示</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTimeStringFromSecond</span><span class="params">(seconds: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> secondNumber = seconds % <span class="number">60</span></div><div class="line">    <span class="keyword">let</span> minuteNumber = (seconds / <span class="number">60</span>) % <span class="number">60</span></div><div class="line">    <span class="keyword">let</span> hourNumber = (seconds / (<span class="number">60</span>*<span class="number">60</span>)) % <span class="number">24</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> secondText = secondNumber &lt; <span class="number">10</span> ? <span class="string">"0<span class="subst">\(secondNumber)</span>"</span> : <span class="string">"<span class="subst">\(secondNumber)</span>"</span></div><div class="line">    <span class="keyword">let</span> minuteText = minuteNumber &lt; <span class="number">10</span> ? <span class="string">"0<span class="subst">\(minuteNumber)</span>"</span> : <span class="string">"<span class="subst">\(minuteNumber)</span>"</span></div><div class="line">    <span class="keyword">let</span> hourText = hourNumber &lt; <span class="number">10</span> ? <span class="string">"0<span class="subst">\(hourNumber)</span>"</span> : <span class="string">"<span class="subst">\(hourNumber)</span>"</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(hourText)</span>:<span class="subst">\(minuteText)</span>:<span class="subst">\(secondText)</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇博客我跟大家分享了如何在iOS系统中使用原生框架获取步数，又是大半个月过去了，运动模块的全部功能也总算完成了，也打算有始有终的把如何做一个跑步类App跟大家分享了。&lt;/p&gt;
&lt;p&gt;运动类应用中，有一个很重要的模块就是计时器，当然，这个计时器不算复杂，只要有简单的开始、暂停以及复位功能即可。那么今天我们从&lt;strong&gt;Model&lt;/strong&gt;层来看看这个计时器的逻辑实现。&lt;/p&gt;
&lt;p&gt;我们先自己创建一个时间的&lt;strong&gt;Model&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RunningTimer&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MARK: var property&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeLabel: &lt;span class=&quot;type&quot;&gt;UILabel&lt;/span&gt;!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer: &lt;span class=&quot;type&quot;&gt;NSTimer&lt;/span&gt;?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//开始和结束时间列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startTimes = [&lt;span class=&quot;type&quot;&gt;NSDate&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; endTimes = [&lt;span class=&quot;type&quot;&gt;NSDate&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeNumber = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            timeString = getTimeStringFromSecond(timeNumber)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeString = &lt;span class=&quot;string&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            timeLabel.text = timeString&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="计时器" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——步数获取</title>
    <link href="http://yoursite.com/2016/12/09/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E6%AD%A5%E6%95%B0%E8%8E%B7%E5%8F%96/"/>
    <id>http://yoursite.com/2016/12/09/iOS开发——步数获取/</id>
    <published>2016-12-08T23:12:43.000Z</published>
    <updated>2016-12-08T23:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近半个月的开发工作，重点一直是类似于悦跑圈、咕咚这样的运动产品的功能，所以在处理iOS设备在运动中的表现也是积累了一些经验。</p>
<p>打算之后的文章，开始把整体的运动功能，分成简单的模块，来介绍一下。那么今天我们就来围绕iOS设备的计步功能，稍微简单的聊一聊。</p>
<a id="more"></a>
<p>大家可能都看过或者知晓<code>HealthKit</code>这个框架，但是实际上，一般去研究过这个框架的，都会知道，实时的获取运动数据，并不是用这个框架的，尤其是步数，这个框架如果你在健康中没有开启步数权限的话，是获取不到的。</p>
<p>所以讲到了实时获取运动数据，苹果还提供了另一个框架给我们使用 —— <code>CoreMotion</code>框架。在这个框架中，我们可以获取加速度、步数等等等等运动数据，今天我们主要是讲讲步数是怎么获取的。</p>
<p>首先我们要去引用这个框架 <code>import CoreMotion</code>。</p>
<p>然后生成两个时间，分别为查询步数的起止时间，<code>CoreMotion</code>中会保存七天的运动数据,假设我们生成的时间为<code>startTime</code>,<code>endTime</code>.</p>
<p>分别对这两个时间进行初始化</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepCounter</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> startTime: <span class="type">NSDate</span>?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> endTime: <span class="type">NSDate</span>!</div><div class="line">    </div><div class="line">   <span class="comment">//在这里我只是随意初始化， 你可以根据自己具体的时间周期去设置时间</span></div><div class="line">   startTime = <span class="type">NSDate</span>()</div><div class="line">   endTime = <span class="type">NSDate</span>()</div></pre></td></tr></table></figure>
<p><code>CoreMotion</code>框架中，专门有一个类是负责处理步数的，就是<code>CMPedometer</code>，所以在这里我们想获取到步数信息，也要创建一个这个对象,并且同时创建一个<code>int</code>对象保存步数数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> pedometer: <span class="type">CMPedometer</span>!</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">private</span> <span class="keyword">var</span> numberOfSteps = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>接下来 我们来看看具体获取步数的代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getPedonmeterData</span><span class="params">()</span></span>&#123;</div><div class="line">    pedometer = <span class="type">CMPedometer</span>()</div><div class="line">    <span class="keyword">if</span> <span class="type">CMPedometer</span>.isStepCountingAvailable()&#123;</div><div class="line">        <span class="keyword">if</span> startTime != <span class="literal">nil</span>&#123;</div><div class="line">            pedometer.queryPedometerDataFromDate(startTime!, toDate: endTime, withHandler: &#123; (data, error) <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</div><div class="line">                    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(error?.localizedDescription)</span>"</span>)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span> data != <span class="literal">nil</span>&#123;</div><div class="line">                        dispatch_async(dispatch_get_main_queue(), &#123;</div><div class="line">                            <span class="keyword">self</span>.numberOfSteps = <span class="type">Int</span>(data!.numberOfSteps)</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码是否简单易懂，先判断该设备是否支持计步功能，若是时间不为空，那么调用<code>public func queryPedometerDataFromDate(start: NSDate, toDate end: NSDate, withHandler handler: CMPedometerHandler)</code>函数去查询步数数据，传入的参数有起止时间，之后的操作在闭包中完成，分别判断是否有错误信息以及返回的数据时，就可以轻易的获取到步数。</p>
<p>今天的分享就到这里了，代码非常简短易懂，就不往GitHub上丢了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近半个月的开发工作，重点一直是类似于悦跑圈、咕咚这样的运动产品的功能，所以在处理iOS设备在运动中的表现也是积累了一些经验。&lt;/p&gt;
&lt;p&gt;打算之后的文章，开始把整体的运动功能，分成简单的模块，来介绍一下。那么今天我们就来围绕iOS设备的计步功能，稍微简单的聊一聊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="步数获取" scheme="http://yoursite.com/tags/%E6%AD%A5%E6%95%B0%E8%8E%B7%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 —— Swift版地址选择器</title>
    <link href="http://yoursite.com/2016/11/25/iOS%E5%BC%80%E5%8F%91-%E2%80%94%E2%80%94-Swift%E7%89%88%E5%9C%B0%E5%9D%80%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/25/iOS开发-——-Swift版地址选择器/</id>
    <published>2016-11-25T02:44:06.000Z</published>
    <updated>2016-11-25T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>已经有二十多天没有更新自己的博客了，这段时间经历了很多事情，离开了生活了六七年的杭州，从离职再入职，忙的是一塌糊涂。</p>
<p>现在这个公司的项目使用了Swift开发，我一直想在自己的项目中也运用Swift，但是一直也没有机会，所以这次能够使用Swift正儿八经的开发，我也是超级兴奋的。</p>
<p>所以从以后开始，我的iOS系列的文章会逐渐的与Swift语言越来越相关。不得不说只有实际开发才能发现Swift中等着我要去踩的坑还有很多。没辙了，爱他就拼命的去填坑吧。</p>
<p>刚入职的第一周写了个简单的页面来熟悉公司项目代码，并且了解下业务。做了一个电商方面相关的收货地址的选择。</p>
<p>今天就来讲讲Swift版本的地址选择器的构建。</p>
<a id="more"></a>
<h2 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h2><p>刚开始领导丢给我了一个数据库包含着中国地区的省市区关系，但是以前处理这个问题常用Plist文件来搞定，所以我也就偷懒懒得再去写Sql语句了，直接用一个Plist文件来处理。</p>
<p>之前OC写的很多省市选择器，都是封装的不够完善，直接调用存在很多问题。并且在处理省市联动的问题上，常常是通过拆分省市区为三个数组，当其中一个数据变化时，再根据 <code>index</code>来处理之后的数据联动。</p>
<p>所以这次的类就本着提高复用性的想法，对地址选择界面做了比较全面的封装，在之后的任何地方调用就非常方便。</p>
<p>首先把<code>UIPickerView</code>这个类的两个代理方法在自己的类里实现，以后调用的时候不用再去实现<code>UIPickerView</code>的两个<strong>Delegate Method</strong>，之后我们再提供一个协议，用最简单的方式来完成数据的获取。</p>
<p>至于省市区的结构，我们用结构体来处理，将省市区写成两个<strong>Struct</strong>，再之后就是简单的数据处理了。将数据加载并且传入这个Struct中。</p>
<p>最后，因为有时候不是省市区三个一起调用，有可能只是单个，或者两个。所以再用枚举声明三种类型，包括了<strong>省、省市、省市区</strong>三种情况，我想这样就可以满足所有情况的使用了。</p>
<h2 id="简单调用"><a href="#简单调用" class="headerlink" title="简单调用"></a>简单调用</h2><p>贴上一个简单调用的方法吧，最直接的调用，非常的简单。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">LixAreaPickerDelegate</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> dataLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> subdivisionsPicker: <span class="type">LixAreaPickerView</span>!</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">selectPickerType</span><span class="params">(sender: UISegmentedControl)</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span> sender.selectedSegmentIndex &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            subdivisionsPicker.pickerType = .<span class="type">Province</span></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            subdivisionsPicker.pickerType = .<span class="type">City</span></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            subdivisionsPicker.pickerType = .<span class="type">District</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">areaPickerDidUpdate</span><span class="params">(sender: LixAreaPickerView)</span></span> &#123;</div><div class="line">        dataLabel.text = (subdivisionsPicker.province ?? <span class="string">""</span>) + <span class="string">" "</span> + (subdivisionsPicker.city ?? <span class="string">""</span>) + <span class="string">" "</span> + (subdivisionsPicker.district ?? <span class="string">""</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        subdivisionsPicker.pickerDelegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p>源码我已经放在我的<a href="https://github.com/originalix/LixAreaPickerView" target="_blank" rel="external">Github</a>上面了，欢迎使用。<br>如果您觉得好用，麻烦Star</p>
<p>谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经有二十多天没有更新自己的博客了，这段时间经历了很多事情，离开了生活了六七年的杭州，从离职再入职，忙的是一塌糊涂。&lt;/p&gt;
&lt;p&gt;现在这个公司的项目使用了Swift开发，我一直想在自己的项目中也运用Swift，但是一直也没有机会，所以这次能够使用Swift正儿八经的开发，我也是超级兴奋的。&lt;/p&gt;
&lt;p&gt;所以从以后开始，我的iOS系列的文章会逐渐的与Swift语言越来越相关。不得不说只有实际开发才能发现Swift中等着我要去踩的坑还有很多。没辙了，爱他就拼命的去填坑吧。&lt;/p&gt;
&lt;p&gt;刚入职的第一周写了个简单的页面来熟悉公司项目代码，并且了解下业务。做了一个电商方面相关的收货地址的选择。&lt;/p&gt;
&lt;p&gt;今天就来讲讲Swift版本的地址选择器的构建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="地址选择器" scheme="http://yoursite.com/tags/%E5%9C%B0%E5%9D%80%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——GCD在Swift中的变脸</title>
    <link href="http://yoursite.com/2016/11/02/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94GCD%E5%9C%A8Swift%E4%B8%AD%E7%9A%84%E5%8F%98%E8%84%B8/"/>
    <id>http://yoursite.com/2016/11/02/iOS开发——GCD在Swift中的变脸/</id>
    <published>2016-11-02T00:34:25.000Z</published>
    <updated>2016-11-02T00:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xcode8正式发布后，Swift3也随即发布，为了跟上苹果这艘大船的脚步，赶紧逼着自己看文档哦。在看文档的过程中，发现GCD的变化跟OC相比简直都要不认识了，赶紧写个文章总结下，顺手复习下GCD中死锁的概念，死锁的总结发布在另一篇文章里了。</p>
<h1 id="取消过去的接口"><a href="#取消过去的接口" class="headerlink" title="取消过去的接口"></a>取消过去的接口</h1><p>说起 GCD， 大家肯定回想起类似 <code>dispatch_async</code> 这样的语法。 GCD 的这个语法模式无论是和 Objc 还是 Swift 的整体风格都不太搭调。 所以 Swift 3 中对它的语法进行了彻底的改写。</p>
<a id="more"></a>
<p>比如最常用的，在一个异步队列中读取数据， 然后再返回主线程更新 UI， 这种操作在新的 Swift 语法中是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global().async &#123;</div><div class="line">    </div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.label?.text = <span class="string">"finished"</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="DispatchQueue"><a href="#DispatchQueue" class="headerlink" title="DispatchQueue"></a>DispatchQueue</h1><p>首先，dispatch 的全局函数不再写为下划线风格的名称了，它变成了一个更符合 Swift 风格的 DispatchQueue 的样子。</p>
<h1 id="main-thread"><a href="#main-thread" class="headerlink" title="main thread"></a>main thread</h1><p>同样的，你不需要在去用  <code>dispatch_get_main_queue()</code> 来获取主线程，而是 <code>DispatchQueue.main</code> ，那么要放到主线程的代码怎么执行呢？只需要在线程后边使用  <code>.async {}</code> 即可，也就是说，大概是这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">      your code runs <span class="keyword">in</span> main thread</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><p>无论从代码长度，已经语法含义上都清晰了一些呢。 另外， 这次对 <code>GCD</code> 的改进还包括优先级的概念。 以往我们使用 <code>Global Queue</code> 的时候，可以使用<code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code> 或 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 等，来指定队列的优先级。 而新的 <code>GCD</code> 引入了 <code>QoS (Quality of Service)</code> 的概念，体现在代码上面就是优先级所对应的名称变了， 对应关系如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* <span class="type">DISPATCH_QUEUE_PRIORITY_HIGH</span>:         .userInitiated</div><div class="line">* <span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>:      .<span class="keyword">default</span></div><div class="line">* <span class="type">DISPATCH_QUEUE_PRIORITY_LOW</span>:          .utility</div><div class="line">* <span class="type">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>:   .background</div></pre></td></tr></table></figure>
<p>举个例子，如果想以最高优先级执行这个队列， 那么就可以这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .userInitiated).async &#123;</div><div class="line">            </div><div class="line">            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以这个优先级概念的变化， 大家也需要留意一下。</p>
<h1 id="获取一个队列"><a href="#获取一个队列" class="headerlink" title="获取一个队列"></a>获取一个队列</h1><p>我们使用  <code>DispatchQueue.global()</code> 获取一个系统的队列，这样的话获取的就是默认  <code>.default</code> 优先级的队列了，如果要获取其他优先级的队列，就使用 <code>DispatchQueue.global(qos: .userInitiated)</code> ，最后，我们使用 <code>.async {}</code> 来执行代码。</p>
<h1 id="创建一个队列"><a href="#创建一个队列" class="headerlink" title="创建一个队列"></a>创建一个队列</h1><p>直接用<code>DispatchQueue</code> 的初始化器来创建一个队列。最简单直接的办法是这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"myBackgroundQueue"</span>)</div></pre></td></tr></table></figure>
<p>复杂一点？你可以指定优先级以及队列类别：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"myBackgroundQueue"</span>, qos: .userInitiated, attributes: .concurrent)</div></pre></td></tr></table></figure>
<p>然后把代码放进去即可：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">queue.async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"aaa"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="组队列"><a href="#组队列" class="headerlink" title="组队列"></a>组队列</h1><p>对于组，现在你可以使用这样的语法直接创建一个组：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</div></pre></td></tr></table></figure>
<p>至于使用，则是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</div><div class="line"> </div><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"myBackgroundQueue"</span>)</div><div class="line"> </div><div class="line">queue.async(group:group) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"background working"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么，如果有多个并发队列在同一个组里，我们需要它们完成了再继续呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">group.wait()</div></pre></td></tr></table></figure>
<h1 id="dispatch-time-t"><a href="#dispatch-time-t" class="headerlink" title="dispatch_time_t"></a>dispatch_time_t</h1><p>还有一个是对 dispatch_time_t 的改进：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> delay = <span class="type">DispatchTime</span>.now() + .seconds(<span class="number">60</span>)</div><div class="line"><span class="type">DispatchQueue</span>.main.after(when: delay) &#123;</div><div class="line">    <span class="comment">// Do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>语法使用起来更加简单。DispatchTime.now() 是当前事前， 然后加上 .seconds(60) 代表 60秒。 再使用 DispatchQueue.main.after 让这个操作在 60 秒后执行。 相比于之前的 GCD 语法，那就容易理解很多了。</p>
<p>顺手儿把 GCD 以前获取当前时间的语法贴出来对比一下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dispatch_time = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(<span class="number">60</span> * <span class="type">NSEC_PER_SEC</span>))</div></pre></td></tr></table></figure>
<p>这样一比， 立竿见影哈。 至少上面新的 GCD 语法， 我大概看了一眼，就能明白它是什么意思了。 而下面这个老的语法，如果不查阅相关文档的话，第一眼恐怕没那么容易看懂了。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>Swift 3 对 GCD 的语法改进还是很大的。 新的语法结构还是很不错的， 当然大多数朋友应该都习惯了以前的写法，也包括我~ 所以肯定需要一点时间适应。 希望这篇文章能帮你节省查阅文档的时间， 在闲暇时刻了解一些技术点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xcode8正式发布后，Swift3也随即发布，为了跟上苹果这艘大船的脚步，赶紧逼着自己看文档哦。在看文档的过程中，发现GCD的变化跟OC相比简直都要不认识了，赶紧写个文章总结下，顺手复习下GCD中死锁的概念，死锁的总结发布在另一篇文章里了。&lt;/p&gt;
&lt;h1 id=&quot;取消过去的接口&quot;&gt;&lt;a href=&quot;#取消过去的接口&quot; class=&quot;headerlink&quot; title=&quot;取消过去的接口&quot;&gt;&lt;/a&gt;取消过去的接口&lt;/h1&gt;&lt;p&gt;说起 GCD， 大家肯定回想起类似 &lt;code&gt;dispatch_async&lt;/code&gt; 这样的语法。 GCD 的这个语法模式无论是和 Objc 还是 Swift 的整体风格都不太搭调。 所以 Swift 3 中对它的语法进行了彻底的改写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS——GCD的死锁案例</title>
    <link href="http://yoursite.com/2016/11/01/iOS%E2%80%94%E2%80%94GCD%E7%9A%84%E6%AD%BB%E9%94%81%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/11/01/iOS——GCD的死锁案例/</id>
    <published>2016-11-01T04:57:11.000Z</published>
    <updated>2016-11-01T04:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，用GCD的时候非常多，但是我最近脑子里一直在问自己一个问题，死锁是什么。惭愧的是这个当初清晰的概念现在愈加模糊，考虑到自己并没有专门整理过死锁的文章，所以写一篇技术文章来帮助自己梳理概念。</p>
<p>GCD提供了功能强大的任务和队列控制功能，相比于NSOperationQueue更加底层，因此如果不注意也会导致死锁。</p>
<p>所谓死锁，通常指有两个线程A和B都卡住了，并等待对方完成某些操作。A不能完成是因为它在等待B完成。但B也不能完成，因为它在等待A完成。于是大家都完不成，就导致了死锁（DeadLock）。</p>
<a id="more"></a>
<h1 id="串行与并行"><a href="#串行与并行" class="headerlink" title="串行与并行"></a>串行与并行</h1><p>在使用GCD的时候，我们会把需要处理的任务放到<code>Block</code>中，然后将任务追加到相应的队列里面，这个队列，叫做<code>Dispatch Queue</code>。然而，存在于两种<code>Dispatch Queue</code>，一种是要等待上一个执行完，再执行下一个的<code>Serial Dispatch Queue</code>，这叫做串行队列；另一种，则是不需要上一个执行完，就能执行下一个的<code>Concurrent Dispatch Queue</code>，叫做并行队列。这两种，均遵循<code>FIFO</code>原则。</p>
<blockquote>
<p>举一个简单的例子，在三个任务中输出1、2、3，串行队列输出是有序的1、2、3，但是并行队列的先后顺序就不一定了。</p>
</blockquote>
<h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><p>串行与并行针对的是队列，而同步与异步，针对的则是线程。最大的区别在于，同步线程要阻塞当前线程，必须要等待同步线程中的任务执行完，返回以后，才能继续执行下一任务；而异步线程则是不用等待。</p>
<h1 id="死锁的具体案例"><a href="#死锁的具体案例" class="headerlink" title="死锁的具体案例"></a>死锁的具体案例</h1><blockquote>
<p>接下来所有的案例代码，我都会用Swift3的语言重写一遍，为了帮助自己加深对Swift3的语言的理解。</p>
</blockquote>
<p>##Demo1</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"1"</span>); <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>); <span class="comment">// 任务2</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"3"</span>); <span class="comment">// 任务3</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"1"</span>)   <span class="comment">//任务1</span></div><div class="line"> </div><div class="line"> <span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"2"</span>)  <span class="comment">//任务2</span></div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="built_in">print</span>(<span class="string">"3"</span>)  <span class="comment">//任务3</span></div></pre></td></tr></table></figure>
<p>接下来 控制器输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li><p>dispatch_sync表示是一个同步线程；</p>
</li>
<li><p>dispatch_get_main_queue表示运行在主线程中的主队列；</p>
</li>
<li><p>任务2是同步线程的任务。</p>
</li>
<li><p>首先执行任务1，这是肯定没问题的，只是接下来，程序遇到了同步线程，那么它会进入等待，等待任务2执行完，然后执行任务3。但这是队列，有任务来，当然会将任务加到队尾，然后遵循FIFO原则执行任务。那么，现在任务2就会被加到最后，任务3排在了任务2前面</p>
</li>
<li><p>任务3要等任务2执行完才能执行，任务2由排在任务3后面，意味着任务2要在任务3执行完才能执行，所以他们进入了互相等待的局面。</p>
</li>
</ul>
<h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"1"</span>); <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>); <span class="comment">// 任务2</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"3"</span>); <span class="comment">// 任务3</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    </div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).sync &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="built_in">print</span>(<span class="string">"3"</span>)</div></pre></td></tr></table></figure>
<p>控制器输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">3</div></pre></td></tr></table></figure>
<ul>
<li><p>首先执行任务1，接下来会遇到一个同步线程，程序会进入等待。</p>
</li>
<li><p>等待任务2执行完成以后，才能继续执行任务3。</p>
</li>
<li><p>从<code>dispatch_get_global_queue</code>可以看出，任务2被加入到了全局的并行队列中，当并行队列执行完任务2以后，返回到主队列，继续执行任务3。</p>
</li>
</ul>
<h2 id="Demo3"><a href="#Demo3" class="headerlink" title="Demo3"></a>Demo3</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.demo.serialQueue"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"1"</span>); <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>); <span class="comment">// 任务2</span></div><div class="line"></div><div class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;  </div><div class="line"></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3"</span>); <span class="comment">// 任务3</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"4"</span>); <span class="comment">// 任务4</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"5"</span>); <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"serealQueue"</span>, qos: .<span class="keyword">default</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">queue.async &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">queue.sync &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"5"</span>)</div></pre></td></tr></table></figure>
<p>控制台输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">5</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">// 5和2的顺序不一定</div></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li><p>这个案例没有使用系统提供的串行或并行队列，而是自己通过<code>dispatch_queue_create</code>函数创建了一个<code>DISPATCH_QUEUE_SERIAL</code>的串行队列。</p>
</li>
<li><p>执行任务1；</p>
</li>
<li><p>遇到异步线程，将【任务2、同步线程、任务4】加入串行队列中。因为是异步线程，所以在主线程中的任务5不必等待异步线程中的所有任务完成；</p>
</li>
<li><p>因为任务5不必等待，所以2和5的输出顺序不能确定；</p>
</li>
<li><p>任务2执行完以后，遇到同步线程，这时，将任务3加入串行队列；</p>
</li>
<li><p>又因为任务4比任务3早加入串行队列，所以，任务3要等待任务4完成以后，才能执行。但是任务3所在的同步线程会阻塞，所以任务4必须等任务3执行完以后再执行。这就又陷入了无限的等待中，造成死锁。</p>
</li>
</ul>
<h2 id="Demo4"><a href="#Demo4" class="headerlink" title="Demo4"></a>Demo4</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"1"</span>); <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>); <span class="comment">// 任务2</span></div><div class="line"></div><div class="line">    <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3"</span>); <span class="comment">// 任务3</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"4"</span>); <span class="comment">// 任务4</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"5"</span>); <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    <span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"5"</span>)</div></pre></td></tr></table></figure>
<p>控制器输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">5</div><div class="line"></div><div class="line">3</div><div class="line"></div><div class="line">4</div><div class="line"></div><div class="line">// 5和2的顺序不一定</div></pre></td></tr></table></figure>
<p>分析:</p>
<ul>
<li><p>首先，将【任务1、异步线程、任务5】加入Main Queue中，异步线程中的任务是：【任务2、同步线程、任务4】。</p>
</li>
<li><p>所以，先执行任务1，然后将异步线程中的任务加入到Global Queue中，因为异步线程，所以任务5不用等待，结果就是2和5的输出顺序不一定。</p>
</li>
<li><p>然后再看异步线程中的任务执行顺序。任务2执行完以后，遇到同步线程。将同步线程中的任务加入到Main Queue中，这时加入的任务3在任务5的后面。</p>
</li>
<li><p>当任务3执行完以后，没有了阻塞，程序继续执行任务4。</p>
</li>
<li><p>从以上的分析来看，得到的几个结果：1最先执行；2和5顺序不一定；4一定在3后面。</p>
</li>
</ul>
<h2 id="Demo5"><a href="#Demo5" class="headerlink" title="Demo5"></a>Demo5</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>); <span class="comment">// 任务1</span></div><div class="line"></div><div class="line">    <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2"</span>); <span class="comment">// 任务2</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"3"</span>); <span class="comment">// 任务3</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"4"</span>); <span class="comment">// 任务4</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"5"</span>); <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">    <span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"3"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"4"</span>)</div><div class="line"><span class="keyword">while</span> (<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"5"</span>)</div></pre></td></tr></table></figure>
<p>控制器输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">4</div><div class="line"></div><div class="line">// 1和4的顺序不一定</div></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li><p>和上面几个案例的分析类似，先来看看都有哪些任务加入了Main Queue：【异步线程、任务4、死循环、任务5】。</p>
</li>
<li><p>在加入到Global Queue异步线程中的任务有：【任务1、同步线程、任务3】。</p>
</li>
<li><p>第一个就是异步线程，任务4不用等待，所以结果任务1和任务4顺序不一定。</p>
</li>
<li><p>任务4完成后，程序进入死循环，Main Queue阻塞。但是加入到Global Queue的异步线程不受影响，继续执行任务1后面的同步线程。</p>
</li>
<li><p>同步线程中，将任务2加入到了主线程，并且，任务3等待任务2完成以后才能执行。这时的主线程，已经被死循环阻塞了。所以任务2无法执行，当然任务3也无法执行，在死循环后的任务5也不会执行。</p>
</li>
<li><p>最终，只能得到1和4顺序不定的结果。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在总结完这些GCD死锁的情况的以后，我觉得脑子里关于GCD中死锁的概念也逐渐清晰了。以后在项目中也会运用的时候也会更加注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中，用GCD的时候非常多，但是我最近脑子里一直在问自己一个问题，死锁是什么。惭愧的是这个当初清晰的概念现在愈加模糊，考虑到自己并没有专门整理过死锁的文章，所以写一篇技术文章来帮助自己梳理概念。&lt;/p&gt;
&lt;p&gt;GCD提供了功能强大的任务和队列控制功能，相比于NSOperationQueue更加底层，因此如果不注意也会导致死锁。&lt;/p&gt;
&lt;p&gt;所谓死锁，通常指有两个线程A和B都卡住了，并等待对方完成某些操作。A不能完成是因为它在等待B完成。但B也不能完成，因为它在等待A完成。于是大家都完不成，就导致了死锁（DeadLock）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="GCD的死锁" scheme="http://yoursite.com/tags/GCD%E7%9A%84%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——TDD、BDD方法以及Kiwi单元测试框架</title>
    <link href="http://yoursite.com/2016/10/26/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94TDD%E3%80%81BDD%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8AKiwi%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/10/26/iOS开发——TDD、BDD方法以及Kiwi单元测试框架/</id>
    <published>2016-10-26T06:39:21.000Z</published>
    <updated>2016-10-26T07:35:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TDD和BDD"><a href="#TDD和BDD" class="headerlink" title="TDD和BDD"></a>TDD和BDD</h1><p>在GitBook上看过一篇文章，一个不写单元测试的程序员不是一个好的攻城狮。坦白的说，在<strong>Objective-C</strong>这个领域的里，我见过的会主动写单元测试的程序员还是比较少的。当然了，在那些大的开源项目里，我还是见到过很多单元测试的应用。</p>
<p>于是也就促使我想总结总结自己现在对单元测试的理解。众所周知苹果在<code>Xcode5</code>中引入了<code>XCTest</code>框架替换了原来的<code>SenTestingKit</code>。这也显示了苹果一直致力于在iOS开发中集成更方便可用的测试。但是我一直觉得<code>XCTest</code>的断言可读性较差，如果是让他人来阅读这段单元测试，会比较的花费精力。</p>
<p>再进入讨论单元测试之前，我们来谈谈不一样测试思想</p>
<a id="more"></a>
<ul>
<li><p>行为驱动开发（英语：Behavior-driven development，缩写BDD）是一种敏捷软件开发的技术，BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。它通过用自然语言书写非程序员可读的测试用例扩展了测试驱动开发方法。</p>
</li>
<li><p>测试驱动开发（英语：Test-driven development，缩写为TDD）是一种软件开发过程中的应用方法，由极限编程中倡导，以其倡导先写测试程序，然后编码实现其功能得名。测试驱动开发是戴两顶帽子思考的开发方式：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上重构的帽子，在测试的保护下，通过去除冗余的代码，提高代码质量。测试驱动着整个开发过程：首先，驱动代码的设计和功能的实现；其后，驱动代码的再设计和重构。</p>
</li>
</ul>
<p>上面讲述了TDD和BDD的思想差别，看到这里，你们认为当前的iOS开发适合怎样的测试思想。不知道你们开发中的实际情况是如何，在现在大环境赶进度的开发下，一般我是采用BDD的测试方法。</p>
<p>而谈到BDD，我要给大家介绍一个iOS中非常有名并且好用的BDD框架 —— <strong>Kiwi</strong>。</p>
<h1 id="Kiwi"><a href="#Kiwi" class="headerlink" title="Kiwi"></a>Kiwi</h1><h2 id="Kiwi的安装"><a href="#Kiwi的安装" class="headerlink" title="Kiwi的安装"></a>Kiwi的安装</h2><ul>
<li>项目主页: <a href="https://github.com/kiwi-bdd/Kiwi" target="_blank" rel="external">https://github.com/kiwi-bdd/Kiwi</a></li>
</ul>
<p><strong>使用Cocopods 安装</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">target :YourProjectTests do</div><div class="line">  pod &apos;Kiwi&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>在这里记得一定要替换<code>YourProject</code>为你的项目名。</p>
<h2 id="Kiwi的基本结构"><a href="#Kiwi的基本结构" class="headerlink" title="Kiwi的基本结构"></a>Kiwi的基本结构</h2><p>在讲<strong>Kiwi</strong>的常用语法前，我们先来看一段Kiwi的Github提供的示例代码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">@"Team"</span>, ^&#123;</div><div class="line">    context(<span class="string">@"when newly created"</span>, ^&#123;</div><div class="line">        it(<span class="string">@"should have a name"</span>, ^&#123;</div><div class="line">            <span class="keyword">id</span> team = [Team team];</div><div class="line">            [[team.name should] equal:<span class="string">@"Black Hawks"</span>];</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        it(<span class="string">@"should have 11 players"</span>, ^&#123;</div><div class="line">            <span class="keyword">id</span> team = [Team team];</div><div class="line">            [[[team should] have:<span class="number">11</span>] players];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们很容易根据上下文将其提取为Given..When..Then的三段式自然语言。</p>
<blockquote>
<p>Given a team, when newly created, it should have a name, and should have 11 players</p>
</blockquote>
<p>是不是非常简单易懂的语法结构。</p>
<p><code>describe</code>描述需要测试的对象内容，也即我们三段式中的<code>Given</code>，<code>context</code>描述测试上下文，也就是这个测试在<code>When</code>来进行，最后<code>it</code>中的是测试的本体，描述了这个测试应该满足的条件，三者共同构成了<strong>Kiwi</strong>测试中的行为描述。它们是可以<strong>nest</strong>的，也就是一个Spec文件中可以包含多个<code>describe</code>（虽然我们很少这么做，一个测试文件应该专注于测试一个类）；一个<code>describe</code>可以包含多个<code>context</code>，来描述类在不同情景下的行为；一个<code>context</code>可以包含多个<code>it</code>的测试例。</p>
<p>Kiwi还有一些其他的行为描述关键字，其中比较重要的包括:</p>
<ul>
<li><p><code>beforeAll(aBlock)</code> - 当前scope内部的所有的其他block运行之前调用一次</p>
</li>
<li><p><code>afterAll(aBlock)</code> - 当前scope内部的所有的其他block运行之后调用一次</p>
</li>
<li><p><code>beforeEach(aBlock)</code> - 在scope内的每个it之前调用一次，对于context的配置代码应该写在这里</p>
</li>
<li><p><code>afterEach(aBlock)</code> - 在scope内的每个it之后调用一次，用于清理测试后的代码</p>
</li>
<li><p><code>specify(aBlock)</code> - 可以在里面直接书写不需要描述的测试</p>
</li>
<li><p><code>pending(aString, aBlock)</code> - 只打印一条log信息，不做测试。这个语句会给出一条警告，可以作为一开始集中书写行为描述时还未实现的测试的提示。</p>
</li>
<li><p><code>xit(aString, aBlock)</code> - 和pending一样，另一种写法。因为在真正实现时测试时只需要将x删掉就是it，但是pending语意更明确，因此还是推荐pending</p>
</li>
</ul>
<h2 id="Kiwi使用实例"><a href="#Kiwi使用实例" class="headerlink" title="Kiwi使用实例"></a>Kiwi使用实例</h2><p>就拿项目中一个真实的场景来说，我在写完一个适配所有iPhone机型的宽高的类之后，我用Kiwi来进行单元测试。</p>
<p>首先我这个类是这么描述宽高的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CalculateLayout.h</span></div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)neu_layoutForAlliPhoneHeight:(<span class="built_in">CGFloat</span>)height;</div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)neu_layoutForAlliPhoneWidth:(<span class="built_in">CGFloat</span>)width;</div><div class="line"></div><div class="line"><span class="comment">//  CalculateLayout.m</span></div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)layoutForAlliPhoneHeight:(<span class="built_in">CGFloat</span>)height type:(IPhoneType)type &#123;</div><div class="line">    <span class="built_in">CGFloat</span> layoutHeight = <span class="number">0.0</span>f;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> iPhone4Type:</div><div class="line">            layoutHeight = ( height / iPhone6Height ) * iPhone4Height;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone5Type:</div><div class="line">            layoutHeight = ( height / iPhone6Height ) * iPhone5Height;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone6Type:</div><div class="line">            layoutHeight = ( height / iPhone6Height ) * iPhone6Height;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone6PlusType:</div><div class="line">            layoutHeight = ( height / iPhone6Height ) * iPhone6PlusHeight;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> layoutHeight;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)layoutForAlliPhoneWidth:(<span class="built_in">CGFloat</span>)width type:(IPhoneType)type &#123;</div><div class="line">    <span class="built_in">CGFloat</span> layoutWidth = <span class="number">0.0</span>f;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> iPhone4Type:</div><div class="line">            layoutWidth = ( width / iPhone6Width ) * iPhone4Width;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone5Type:</div><div class="line">            layoutWidth = ( width / iPhone6Width ) * iPhone5Width;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone6Type:</div><div class="line">            layoutWidth = ( width / iPhone6Width ) * iPhone6Width;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> iPhone6PlusType:</div><div class="line">            layoutWidth = ( width / iPhone6Width ) * iPhone6PlusWidth;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> layoutWidth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>反正大概意思就是我输入了一个宽高，他根据UI给定的设计图，返回给我一个宽高适配当前机型的宽高。</p>
<p>那么我们如何来写这个测试用例呢.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Kiwi/Kiwi.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"CalculateLayout.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line">SPEC_BEGIN(CalculateLayoutTests)</div><div class="line"></div><div class="line">describe(<span class="string">@"CalculateLayout"</span>, ^&#123;</div><div class="line">    context(<span class="string">@"when calculate width and height"</span>, ^&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> width = [CalculateLayout neu_layoutForAlliPhoneWidth:<span class="number">375.</span>f];</div><div class="line">        <span class="built_in">CGFloat</span> height = [CalculateLayout neu_layoutForAlliPhoneHeight:<span class="number">667.</span>f];</div><div class="line">        </div><div class="line">        pending_(<span class="string">@"All iPhone Test"</span>, ^&#123;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        it(<span class="string">@"should layout width"</span>, ^&#123;</div><div class="line">            [[theValue(width) should] equal:theValue(<span class="number">320.</span>f)];</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        it(<span class="string">@"should layout height"</span>, ^&#123;</div><div class="line">            [[theValue(height) should] equal:theValue(<span class="number">568.</span>f)];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">SPEC_END</div></pre></td></tr></table></figure>
<p>我写进去的宽高数值是iPhone6的宽高数值，如果用5S的模拟器来运行，将会返回5S的宽高 320 * 568</p>
<p>当我们 com+U 运行这段测试用例时。</p>
<p>控制台的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ &apos;CalculateLayout, when calculate width and height, should layout width&apos; [PASSED]</div><div class="line"></div><div class="line">+ &apos;CalculateLayout, when calculate width and height, should layout height&apos; [PASSED]</div></pre></td></tr></table></figure>
<p>可以看到，由于有<code>context</code>的存在，以及其可以嵌套的特性，测试的流程控制相比传统测试可以更加精确。我们更容易把<code>before</code>和<code>after</code>的作用区域限制在合适的地方。</p>
<p>实际的测试写在it里，是由一个一个的期望(Expectations)来进行描述的，期望相当于传统测试中的断言，要是运行的结果不能匹配期望，则测试失败。在<code>Kiwi</code>中期望都由<code>should</code>或者<code>shouldNot</code>开头，并紧接一个或多个判断的的链式调用，大部分常见的是<code>be</code>或者<code>haveSomeCondition</code>的形式。在我们上面的例子中我们使用了<code>should not be nil</code>和<code>should equal</code>两个期望来确保字符串赋值的行为正确。其他的期望语句非常丰富，并且都符合自然语言描述，所以并不需要太多介绍。在使用的时候不妨直接按照自己的想法来描述自己的期望，一般情况下在<code>IDE</code>的帮助下我们都能找到想要的结果。如果您想看看完整的期望语句的列表，可以参看文档的这个页面。从这一点来看，Kiwi可以说是一个非常灵活并具有可扩展性的测试框架。</p>
<p>来解释下上面的语法中用到的<code>theValue</code>.</p>
<p><code>Kiwi</code>为我们提供了一个标量转对象的语法糖，叫做<code>theValue</code>，在做精确比较的时候我们可以直接使用例子中直接与<code>320.f或者568.f</code>做比较这样的写法来进行对比。</p>
<p>通过这样一个简单的例子，我们基本能掌握Kiwi的语法，以及Kiwi的使用。单元测试的门其实很好进，但是如何用心的，动脑子的去写单元测试，则是对我们程序员莫大的考验哦。</p>
<p>我讲的并不完善，也不详细，就算简单记录自己目前的收获吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TDD和BDD&quot;&gt;&lt;a href=&quot;#TDD和BDD&quot; class=&quot;headerlink&quot; title=&quot;TDD和BDD&quot;&gt;&lt;/a&gt;TDD和BDD&lt;/h1&gt;&lt;p&gt;在GitBook上看过一篇文章，一个不写单元测试的程序员不是一个好的攻城狮。坦白的说，在&lt;strong&gt;Objective-C&lt;/strong&gt;这个领域的里，我见过的会主动写单元测试的程序员还是比较少的。当然了，在那些大的开源项目里，我还是见到过很多单元测试的应用。&lt;/p&gt;
&lt;p&gt;于是也就促使我想总结总结自己现在对单元测试的理解。众所周知苹果在&lt;code&gt;Xcode5&lt;/code&gt;中引入了&lt;code&gt;XCTest&lt;/code&gt;框架替换了原来的&lt;code&gt;SenTestingKit&lt;/code&gt;。这也显示了苹果一直致力于在iOS开发中集成更方便可用的测试。但是我一直觉得&lt;code&gt;XCTest&lt;/code&gt;的断言可读性较差，如果是让他人来阅读这段单元测试，会比较的花费精力。&lt;/p&gt;
&lt;p&gt;再进入讨论单元测试之前，我们来谈谈不一样测试思想&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发——Instruments工具调试</title>
    <link href="http://yoursite.com/2016/10/24/iOS%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Instruments%E5%B7%A5%E5%85%B7%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2016/10/24/iOS开发——Instruments工具调试/</id>
    <published>2016-10-24T05:25:53.000Z</published>
    <updated>2016-10-24T05:27:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着项目的进行，APP的优化必须要尽早的展开了，所以最近自己在学习很多APP的调试技巧，今天我们就来说说Xcode为我们准备的自带的调试工具。</p>
<p>代码性能是个避不开的话题。随着项目的扩大和功能的增多，没经过认真调试和优化的代码，要么任性地卡顿运行，要么低调地崩溃了之……结果呢，大家用着不高兴，开发者也不开心。</p>
<p>本篇重点讨论一下 iOS性能测试中的启动测试、内存泄露测试、CPU测试。</p>
<a id="more"></a>
<p>##1.启动测试<br>测试工具：Instruments &gt; TimeProfile<br>可在 appDelegate.m中加入一段代码，来进行测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)testLaunch</div><div class="line">&#123;</div><div class="line">	for(int i = 0; i &lt; 100000;i++)&#123;</div><div class="line">		NSLog(@&quot;test&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###1）获得启动时间<br>APP启动之后，中止 TimeProfile，按住 option键在监控窗口中拖拽，选中监控区域中起始点到打开 APP后的峰谷，查看APP启动所需时间，如下图：<br><img src="http://img.blog.csdn.net/20150428175349386" alt="图1 在 TimeProfile中查看启动时间"></p>
<p>###2）分析可优化空间<br>首先，需要注意一下右侧栏中的几个给力的筛选项，如下图：<br><img src="http://img.blog.csdn.net/20150428180729277" alt="图2 TimeProfile右边栏"></p>
<p>（注：我觉得非常常用的标记为『必选项』）</p>
<blockquote>
<ul>
<li>Separate by Thread //按线程聚类，『可选项』，当我们想查看每个线程中哪些方法比较耗时时，勾选它；</li>
<li>Invert Call Tree //反转调用栈信息，『必选项』，否则 main一直排在最上面，碍事；</li>
<li>Hide System Libraries //隐藏系统库，『可选项』，只查看自己应用的栈信息；</li>
<li>Top Functions //按耗时降序排列，『必选项』</li>
</ul>
</blockquote>
<p>Running Time列中显示运行每个方法所耗费的时间，根据耗时和占比猜测是否有代码需要优化。双击中间主窗口中的方法名进入具体的代码行查看，耗时多的代码行有颜色标记，并显示占比。<br><img src="http://img.blog.csdn.net/20150428182138433" alt="图3 TimeProfile 代码行"></p>
<p>获取 APP启动时间非常简单，但分析哪些地方可以优化，则需要对代码足够了解。项目的启动时间没有一个特定的值，利用该方法可以提供一个缩小的检测范围，尽可能发现可被优化的代码。</p>
<p>##2.内存泄露测试<br>有两种方法可以采用，第一利用静态分析，第二使用Instruments工具集。</p>
<p>###1）静态分析<br>在 xcode中长按运行按钮&gt;Analyze，可启动代码静态分析。<br><img src="http://img.blog.csdn.net/20150428182542806" alt="启动静态分析"></p>
<p><img src="http://img.blog.csdn.net/20150428191837926" alt="这里写图片描述"><br>对于 MRC项目，静态分析是必要的，对于 ARC项目，静态分析作为可选项。<br>这项检查只覆盖代码编译时可能存在的问题，但并不能覆盖代码运行时。这时，我们还需要结合动态分析工具。</p>
<p>###2）动态分析<br>工具: Allocations,Leaks</p>
<h4 id="【Allocation】"><a href="#【Allocation】" class="headerlink" title="【Allocation】"></a>【Allocation】</h4><p>Allocations组件监控对象调用了 alloc方法申请内存后的内存使用情况，可记录对象生命周期中内存引用计数的变化，当对象被正常释放后不再继续追踪。</p>
<p>####【Leaks】<br>Leaks监控内存泄露，一般和 Allocations一起使用，在检测到内存泄露后，通过 Allocations定位到具体的代码。发现问题时，监控图会显示红条。修改代码后，再次查看，如果红色消失则表示内存泄露被修复成功了。</p>
<p>但 Leaks可能会『假摔』，例如每次 APP启动后，都会显示几个红条，因此 Leaks的使用过程中也需要人工判断分析。</p>
<p>步骤：<br>a）运行Profile&gt;Allocations，启动 APP后实时查看 Allocations\Leaks图，若 Leaks中出现红条，则双击红条，切换到 Leaks视图；<br><img src="http://img.blog.csdn.net/20150430114811540" alt="这里写图片描述"><br>b) 选择右侧栏查看 stack trace，点击黑色图标（非系统类），查看具体的代码实现，分析可能出现的问题，如下图：<br><img src="http://img.blog.csdn.net/20150430140252822" alt="这里写图片描述"></p>
<p>例如，上面的代码中，每次初始化都会创建一个NSMutableArray 对象，可以优化为removeAllObject后重利用。</p>
<p>###3）CPU等指标<br>工具：Activity Monitor<br>可监控 CPU和内存指标，并可对比多次监控的结果。</p>
<p>步骤：<br>a)profile&gt;Activity Monitor 启动 APP, 运行过程中option选择峰值查看 cpu和内存使用量。<br>b)对比多次监控的结果，把最差情况作为最终结果；</p>
<p><img src="http://img.blog.csdn.net/20150430141211461" alt="ActivityMonitor"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着项目的进行，APP的优化必须要尽早的展开了，所以最近自己在学习很多APP的调试技巧，今天我们就来说说Xcode为我们准备的自带的调试工具。&lt;/p&gt;
&lt;p&gt;代码性能是个避不开的话题。随着项目的扩大和功能的增多，没经过认真调试和优化的代码，要么任性地卡顿运行，要么低调地崩溃了之……结果呢，大家用着不高兴，开发者也不开心。&lt;/p&gt;
&lt;p&gt;本篇重点讨论一下 iOS性能测试中的启动测试、内存泄露测试、CPU测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Instruments工具" scheme="http://yoursite.com/tags/Instruments%E5%B7%A5%E5%85%B7/"/>
    
      <category term="调试" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
</feed>
